/**
 * Copyright 2018 Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as i}from"../../../../lit-element/lit-element.js";import{RichTextToolbarStyles as o}from"../buttons/rich-text-editor-button.js";import"../../../simple-popover/simple-popover.js";import"../../../simple-fields/simple-fields.js";import"./rich-text-editor-selection.js";class RichTextEditorPrompt extends t{static get styles(){return[...o,i`
        #prompt {
          display: block;
          width: 300px;
          max-width: 300px;
          --simple-popover-padding: 0px;
          z-index: 2;
        }
        #prompt[hidden] {
          display: none;
        }
        #prompt #form {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: space-between;
          z-index: 2;
        }
        #formfields {
          width: calc(100% - 20px);
          padding: 10px 10px 0;
          overflow: visible;
        }
        #prompt simple-fields-field {
          padding: 0;
        }
        #confirm,
        #cancel {
          min-width: unset;
        }
        #cancel {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);
        }
        #cancel:focus,
        #cancel:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        #confirm {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);
        }
        #confirm:focus,
        #confirm:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        .actions {
          width: calc(100% - 20px);
          padding: 0 10px 3px;
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        .confirm-or-cancel {
          min-width: 40px;
        }
      `]}render(){return e`
      <simple-popover
        id="prompt"
        ?auto="${!this.hidden}"
        for="${this.selection?this.selection.id:""}"
        ?hidden="${this.hidden}"
        position="bottom"
        position-align="center"
        .target="${this.selection}"
      >
        <form
          id="form"
          @blur="${this._handleBlur}"
          @focus="${this._handleFocus}"
        >
          <simple-fields
            id="formfields"
            hide-line-numbers
            .fields="${this.fields}"
            @fields-ready="${this._handleReady}"
            .value="${this.value}"
          ></simple-fields>
          <div class="actions">
            <rich-text-editor-button
              id="cancel"
              controls="${this.selection?this.selection.id:""}"
              label="Cancel"
              icon="clear"
              @click="${this._cancel}"
              tabindex="0"
            >
            </rich-text-editor-button>
            <rich-text-editor-button
              id="confirm"
              controls="${this.selection?this.selection.id:""}"
              @click="${this._confirm}"
              icon="check"
              label="OK"
              tabindex="0"
            >
            </rich-text-editor-button>
          </div>
        </form>
      </simple-popover>
    `}static get tag(){return"rich-text-editor-prompt"}static get properties(){return{fields:{type:Array},range:{type:Object},value:{type:Object},__focused:{type:Boolean},__hovered:{type:Boolean},__opened:{type:Boolean}}}constructor(){if(super(),window.addEventListener("rich-text-editor-prompt-open",this.open.bind(this)),!window.RichTextEditorPrompt.instance)return window.RichTextEditorPrompt.instance=this,this}get hidden(){return!this.__opened}get selection(){return window.RichTextEditorSelection.requestAvailability()}firstUpdated(t){this.selection.addEventListener("change",(t=>setTimeout(this._handleChange(t),300))),this.addEventListener("focus",this._handleFocus),this.addEventListener("focus",this._handleFocus),this.addEventListener("blur",this._handleBlur)}updated(t){super.updated(t),t.forEach(((t,e)=>{["__focused","__hovered","__opened"].includes(e)&&setTimeout(this._handleChange.bind(this),300)}))}_handleReady(t){t.detail.focus()}_handleFocus(t){this.__focused=!0}_handleBlur(t){this.__focused=!1}_handleChange(t){!this.__opened||this.__focused||this.__hovered||this._cancel()}open(t){t&&(this.__opened=!0,this.shadowRoot.querySelector("#cancel").focus(),this.button=t.detail,this.fields=[...t.detail.fields],this.__selection=t.detail.__selection,this.selectedNode=t.detail.selectedNode,this.value={...t.detail.value})}close(){this.__opened=!1,this.__focused=!1,this.button=void 0,this.fields=[],this.value={}}_cancel(t){t&&t.preventDefault(),this.button&&this.button.cancel(),this.close()}_confirm(t){t.preventDefault(),this.button.confirm(this.value),this.close()}}window.customElements.define(RichTextEditorPrompt.tag,RichTextEditorPrompt);export{RichTextEditorPrompt};window.RichTextEditorPrompt=window.RichTextEditorPrompt||{},window.RichTextEditorPrompt.requestAvailability=()=>(window.RichTextEditorPrompt.instance||(window.RichTextEditorPrompt.instance=document.createElement("rich-text-editor-prompt"),document.body.appendChild(window.RichTextEditorPrompt.instance)),window.RichTextEditorPrompt.instance);