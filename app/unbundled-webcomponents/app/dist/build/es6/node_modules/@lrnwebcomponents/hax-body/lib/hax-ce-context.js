import{LitElement as e,html as t,css as i}from"../../../lit-element/lit-element.js";import{HAXStore as o}from"./hax-store.js";import"./hax-context-item.js";import"./hax-toolbar-menu.js";import"../../simple-toolbar/lib/simple-toolbar-menu-item.js";import"./hax-toolbar.js";import{wipeSlot as a}from"../../utils/utils.js";import{HaxContextBehaviors as s}from"./hax-context-behaviors.js";import{autorun as n,toJS as r}from"../../../mobx/dist/mobx.esm.js";import{I18NMixin as c}from"../../i18n-manager/lib/I18NMixin.js";class HaxCeContext extends(c(s(e))){static get styles(){return[...super.styles]}constructor(){super(),this.t={changeTo:"Change to",modifyHTMLSource:"Modify HTML source",clickToChange:"Click to change",insertItemAbove:"Insert item above",insertItemAboveOrBelow:"Insert item above or below",insertItemBelow:"Insert item below"},this.registerLocalization({context:this,namespace:"hax"}),this.haxUIElement=!0,this.onScreen=!1,this.ceButtons=[],this.activeTagName="",this.activeTagIcon="hax:paragraph",this.addEventListener("hax-context-item-selected",this.handleCECustomEvent.bind(this))}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{"onScreen"===t&&this.onScreen&&this._resetCEMenu()}))}render(){return t`
      <div id="toolbar">
        <hax-toolbar>
          <div class="group">
            <hax-context-item
              action
              more
              .icon="${this.activeTagIcon}"
              label="${this.t.changeTo}.."
              tooltip="${this.activeTagName}, ${this.t.clickToChange}"
              ?disabled="${this.disableTransform}"
              event-name="hax-transform-node"
              show-text-label
            ></hax-context-item>
            <slot name="primary"></slot>
          </div>
          <div class="group">
            ${this.ceButtons.map((e=>t` <hax-context-item
                action
                icon="${e.icon}"
                label="${e.label}"
                event-name="hax-ce-custom-button"
                value="${e.callback}"
              ></hax-context-item>`))}
            <slot name="secondary"></slot>
          </div>
          <div class="group">
            <hax-context-item
              action
              icon="icons:code"
              label="${this.t.modifyHTMLSource}"
              ?disabled="${!this.sourceView}"
              event-name="hax-source-view-toggle"
              toggles
              ?toggled="${this.viewSource}"
              @click="${e=>this.viewSource=!this.viewSource}"
            ></hax-context-item>
            <slot name="more"></slot>
          </div>
          <div class="group">
            <hax-toolbar-menu
              icon="add"
              label="${this.t.insertItemAboveOrBelow}"
            >
              <simple-toolbar-menu-item slot="menuitem">
                <hax-context-item
                  action
                  align-horizontal="left"
                  show-text-label
                  role="menuitem"
                  icon="hardware:keyboard-arrow-up"
                  event-name="insert-above-active"
                  label="${this.t.insertItemAbove}"
                ></hax-context-item>
              </simple-toolbar-menu-item>
              <simple-toolbar-menu-item slot="menuitem">
                <hax-context-item
                  action
                  align-horizontal="left"
                  show-text-label
                  role="menuitem"
                  icon="hardware:keyboard-arrow-down"
                  event-name="insert-below-active"
                  label="${this.t.insertItemBelow}"
                ></hax-context-item>
              </simple-toolbar-menu-item>
            </hax-toolbar-menu>
          </div>
        </hax-toolbar>
      </div>
    `}static get tag(){return"hax-ce-context"}static get properties(){return{...super.properties,disableTransform:{type:Boolean},onScreen:{type:Boolean,attribute:"on-screen",reflect:!0},sourceView:{type:Boolean},activeTagIcon:{type:String},activeTagName:{type:String},ceButtons:{type:Array},viewSource:{type:Boolean}}}handleCECustomEvent(e){let t=e.detail;switch(t.eventName){case"hax-ce-custom-button":this.activeNode&&"function"==typeof this.activeNode[t.value]&&this.activeNode[t.value](e)&&o.refreshActiveNodeForm()}}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),n((()=>{this.activeNode=r(o.activeNode),this.activeNode&&this.activeNode.classList&&this._resetCEMenu()}))}async _resetCEMenu(){if(this.shadowRoot&&a(this,"*"),this.ceButtons=[],this.viewSource=!1,o.activeHaxBody&&null!=this.activeNode){let e=o.haxSchemaFromTag(this.activeNode.tagName);if(this.sourceView=e.canEditSource,!o.isTextElement(this.activeNode)){let e=await o.activeHaxBody.replaceElementWorkflow(this.activeNode,!0);this.disableTransform=0===e.length,o.activeGizmo&&(this.activeTagName=o.activeGizmo.title,this.activeTagIcon=o.activeGizmo.icon)}}else this.activeTagName="",this.activeTagIcon="";await o.runHook(this.activeNode,"inlineContextMenu",[this])}}window.customElements.define(HaxCeContext.tag,HaxCeContext);export{HaxCeContext};