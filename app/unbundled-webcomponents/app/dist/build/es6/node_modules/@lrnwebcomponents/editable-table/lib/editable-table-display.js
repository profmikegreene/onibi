/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as i}from"../../../lit-element/lit-element.js";import{displayBehaviors as s,editableTableDisplayStyles as l}from"./editable-table-behaviors.js";import{ResponsiveUtilityBehaviors as o}from"../../responsive-utility/lib/responsive-utility-behaviors.js";import"../../simple-picker/simple-picker.js";class EditableTableDisplay extends(s(o(t))){static get styles(){return[...super.styles||[],...l]}render(){return e`
      <table
        id="table"
        ?bordered="${this.bordered}"
        class="table"
        ?column-header="${this.columnHeader}"
        ?column-striped="${this.columnStriped}"
        ?condensed="${this.condensed}"
        ?filter="${this.filter}"
        ?footer="${this.footer}"
        ?hidden="${this.hidden}"
        ?numeric-styles="${this.numericStyles}"
        ?row-header="${this.rowHeader}"
        ?sort="${this.sort}"
        ?striped="${this.striped}"
        part="table"
      >
        <caption part="caption">
          <div>
            <div>${this.getHTML(this.caption)}</div>
            ${this.disableResponsive?"":e` <simple-picker
                  id="column"
                  align-right
                  aria-label="Select Column"
                  @change="${this._selectedChanged}"
                  hide-sample
                  .options="${this.options}"
                  .value="${this.selected}"
                >
                </simple-picker>`}
            ${this.downloadable?e`
                  <button id="download" @click="${this.download}">
                    <span class="sr-only">Download as CSV.</span>
                    <simple-icon-lite icon="file-download"></simple-icon-lite>
                  </button>
                  <simple-tooltip
                    id="download-tooltip"
                    for="download"
                    aria-hidden="true"
                    >Download as CSV.
                  </simple-tooltip>
                `:""}
            ${this.printable?e`
                  <button id="print" @click="${this.print}">
                    <span class="sr-only">Print table.</span>
                    <simple-icon-lite icon="print"></simple-icon-lite>
                  </button>
                  <simple-tooltip
                    id="print-tooltip"
                    for="print"
                    aria-hidden="true"
                    >Print table.
                  </simple-tooltip>
                `:""}
          </div>
        </caption>
        <thead ?hidden="${!this.columnHeader}" class="thead" part="thead">
          <tr class="tr thead-tr" part="tr">
            ${(this.thead[0]||[]).map(((t,i)=>e`
                <th
                  class="th th-or-td"
                  cell-index="${i}"
                  ?numeric="${this._isNumericColumn(i)}"
                  scope="col"
                  part="th"
                  ?xs-hidden="${this._isColHidden(i,1)}"
                >
                  ${this.sort?e`
                        <editable-table-sort
                          column-index="${i}"
                          sort-column="${this.sortColumn}"
                        >
                          ${this.getHTML(this._replaceBlankCell(t))}
                        </editable-table-sort>
                      `:this.getHTML(this._replaceBlankCell(t))}
                </th>
              `))}
          </tr>
        </thead>
        <tbody class="tbody" part="tbody">
          ${this.tbody.map((t=>this._isRowFiltered(t)?"":this._tbodyTr(t)))}
        </tbody>
        ${this.footer?e`
              <tfoot class="tfoot" part="tfoot">
                ${this._tbodyTr(this.tfoot[0],!0,!0)}
              </tfoot>
            `:""}
      </table>
      <div id="htmlImport" hidden><slot></slot></div>
    `}static get haxProperties(){return{type:"element",editingElement:{tag:"editable-table",import:"@lrnwebcomponents/editable-table/editable-table.js"},canScale:!0,canPosition:!0,canEditSource:!0,gizmo:{title:"Enhanced table",description:"A table for displaying data",icon:"image:grid-on",color:"blue-grey",groups:["Content","Table","Data"],meta:{author:"ELMS:LN"}},settings:{configure:[],advanced:[]},demoSchema:[{tag:"editable-table-display",content:"<table striped><tr><td>-</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td></tr></table>",properties:{}}]}}static get tag(){return"editable-table-display"}static get properties(){return{...s.properties,...o.properties,filterColumn:{type:Number,attribute:"filter-column"},filterContains:{type:Boolean,attribute:"filter-contains"},filterCaseSensitive:{type:Boolean,attribute:"filter-case-sensitive"},filtered:{type:Boolean},filterText:{type:String,attribute:"filter-text"},selected:{type:Number},sortMode:{type:String,attribute:"sort-mode"},sortColumn:{type:Number,attribute:"sort-column"}}}constructor(){super(),this.selected=1,this.sortMode="none",this.sortColumn=-1,this.filterContains=!0,import("./editable-table-sort.js"),import("./editable-table-filter.js"),this._observer=new MutationObserver((t=>{this.shadowRoot&&this.importHTML(this.children.item(0))})),this._observer.observe(this,{childList:!0,subtree:!0})}connectedCallback(){super.connectedCallback(),setTimeout((()=>{this.addEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.addEventListener("toggle-filter",this.toggleFilter.bind(this))}),0)}disconnectedCallback(){this.removeEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.removeEventListener("toggle-filter",this.toggleFilter.bind(this)),super.disconnectedCallback()}get hidden(){return!this.data||this.data.length<1||this.data[0].length<1}get options(){return((this.thead||[[]])[0]||[]).map(((t,e)=>[{alt:t,value:e}]))}sortData(t,e){if("none"!==t&&!1!==t){let i=this.tbody.map((t=>[t[e],...t]));"asc"===t?i.sort():i.reverse()}}toggleFilter(t){void 0===t||this.filterColumn==t.detail.columnIndex&&this.filtered?(this.filtered=!1,this.filterText=void 0,this.filterColumn=void 0):(this.filterText=t.detail.innerHTML,this.filterColumn=t.detail.columnIndex,this.filtered=!0)}_dataChanged(t,e){if(!t||t.length<1||t[0].length<1){let t=this.children.item(0);null!=t&&"TABLE"===t.tagName&&this.importHTML(t)}this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:t}))}_changeSortMode(t){this.sortColumn===t.detail.columnIndex&&"asc"===this.sortMode?this.sortMode="desc":this.sortColumn===t.detail.columnIndex&&"desc"===this.sortMode?this.sortMode="none":(this.sortMode="asc",this.sortColumn=t.detail.columnIndex),t.detail.setSortMode(this.sortMode)}_isColHidden(t,e=1){return e=e||1,0!==parseInt(t)&&parseInt(t)!==parseInt(e)}_isCellFiltered(t,e,i){return!!e&&e===t&&i}_selectedChanged(){this._updateCols()}_tableChanged(){this._updateCols()}_tbodyTr(t=[],i=!1,s=!1){return e`
      <tr class="tr ${s?"tfoot-tr":"tbody-tr"}">
        ${t.map(((t,e)=>this._isRowHeader(this.rowHeader,e)?this._tbodyTh(t,e):this._tbodyTd(t,e,i)))}
      </tr>
    `}_tbodyTh(t,i){return e`<th
      class="th th-or-td"
      cell-index="${i}"
      ?numeric="${this._isNumericColumn(i)}"
      scope="row"
      ?xs-hidden="${this._isColHidden(i,1)}"
    >
      ${this.getHTML(this._replaceBlankCell(t))}
    </th>`}_tbodyTd(t,i,s=!1){return e`<td
      part="td"
      class="td th-or-td"
      cell-index="${i}"
      ?numeric="${this._isNumericColumn(i)}"
      ?negative="${this._isNegative(t)}"
      ?xs-hidden="${this._isColHidden(i,1)}"
    >
      ${this.filter?e`
            <editable-table-filter
              class="cell"
              column-index="${i}"
              ?filtered="${this._isCellFiltered(i,this.filterColumn,this.filtered)}"
            >
              ${this.getHTML(this._replaceBlankCell(t))}
            </editable-table-filter>
          `:s?this.getHTML(this._replaceBlankCell(t)):e`<span class="cell"
            >${this.getHTML(this._replaceBlankCell(t))}</span
          >`}
    </td>`}_updateCols(){let t=this.shadowRoot.querySelector("#column").value,e=this.shadowRoot.querySelector("#table").querySelectorAll("th,td");if(e.length>0)for(let i=0;i<e.length;i++){let s=e[i];this._isColHidden(s.cellIndex,t)?s.setAttribute("xs-hidden",!0):s.removeAttribute("xs-hidden")}}}window.customElements.define(EditableTableDisplay.tag,EditableTableDisplay);export{EditableTableDisplay};