/**
 * Copyright 2021 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html as t,css as e}from"../../lit-element/lit-element.js";import{SimpleColors as i}from"../simple-colors/simple-colors.js";import{I18NMixin as a}from"../i18n-manager/lib/I18NMixin.js";import{validURL as s,cleanVideoSource as r}from"../utils/utils.js";import{gSheetInterface as n}from"../utils/lib/gSheetsInterface.js";import"../simple-fields/lib/simple-fields-field.js";import"../simple-fields/lib/simple-fields-tag-list.js";import"../a11y-collapse/a11y-collapse.js";import"../a11y-collapse/lib/a11y-collapse-group.js";import"../editable-table/lib/editable-table-display.js";import"../a11y-tabs/a11y-tabs.js";import"../a11y-tabs/lib/a11y-tab.js";import"../grid-plate/grid-plate.js";import"../iframe-loader/lib/loading-indicator.js";import"./lib/grade-book-student-block.js";import"./lib/letter-grade.js";import"../../@github/time-elements/dist/time-elements.js";class GradeBook extends(a(i)){constructor(){super(),this.gSheet=new n(this,{tags:0,roster:118800528,assignments:540222065,rubrics:1744429439,submissions:2104732668,gradeScale:980501320,grades:2130903440,gradesDetails:644559151,settings:1413275461}),this.assessmentView=this.resetAssessmentView(),this.totalScore=0,this.activeStudent=0,this.activeAssignment=0,this.activeSubmission=null,this.activeStudentSubmissions=[],this.scoreLock=!0,this.activeRubric=[],this.activeGrading={},this.database={tags:{categories:[],data:[]},submissions:[],rubrics:[],assignments:[],roster:[],grades:{},gradesDetails:{},gradeScale:[],settings:{}},this.hideGradeScale=!0,this.disabled=!1,this.loading=!0,this.t={csvURL:"CSV URL",debugData:"Debug data",points:"Points",criteria:"Criteria",description:"Description",assessmentWeight:"Assessment Weight",overallFeedback:"Overall feedback",letterGrade:"Letter grade",highRange:"High range",lowRange:"Low range",noSubmission:"No submission found",studentSubmission:"Student submission",openInNewWindow:"Open in new window",gradingScale:"Grading Scale"},this.registerLocalization({context:this,basePath:import.meta.url,locales:["es","fr","de"]}),this.addEventListener("simple-fields-tag-list-changed",this.qualitativeFeedbackUpdate.bind(this)),this.addEventListener("value-changed",this.rubricCriteriaPointsChange),this.addEventListener("drop",this._handleDragDrop.bind(this))}resetAssessmentView(){return{qualitative:[],written:[]}}getStudentSubmissions(t){let e=[];for(var i in this.database.submissions){let s=this.database.submissions[i];if(s.student===this.database.roster[t].student){for(var a in s)if("student"!==a){let i=this.getAssignmentByShortName(a);i&&e.push({studentScore:""==this.database.grades[t][a]?null:this.database.grades[t][a],assignmentPoints:i.points,assignmentName:i.name,assignmentIndex:i.index})}return e}}return e}getAssignmentByShortName(t){let e,i=this.database.assignments.filter(((i,a)=>i.shortName===t&&(e=a,!0)));return 1===i.length?(i[0].index=e,i[0]):null}getCurrentScore(t,e){return this.database.grades[t][this.database.assignments[e].shortName]?this.database.grades[t][this.database.assignments[e].shortName]:0}getActiveSubmission(){for(var t in this.database.submissions){let e=this.database.submissions[t];if(e.student===this.database.roster[this.activeStudent].student&&e[this.database.assignments[this.activeAssignment].shortName])return e[this.database.assignments[this.activeAssignment].shortName]}return null}getActiveRubric(){return this.database.rubrics.filter((t=>t.shortName==this.database.assignments[this.activeAssignment].rubric))}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"debug"==e&&this[e]&&import("../csv-render/csv-render.js"),["activeAssignment","activeStudent","database","loading"].includes(e)&&(this.activeSubmission=this.getActiveSubmission(),this.assessmentView=this.resetAssessmentView(),this.activeRubric=this.getActiveRubric(),this.activeStudentSubmissions=[],this.activeStudentSubmissions=[...this.getStudentSubmissions(this.activeStudent)],this.shadowRoot&&this.shadowRoot.querySelector(".mini-map div[data-active-assignment-student-pixel]")&&setTimeout((()=>{this.shadowRoot.querySelector(".mini-map").scrollTop=this.shadowRoot.querySelector(".mini-map div[data-active-assignment-student-pixel]").offsetTop-120-this.shadowRoot.querySelector(".mini-map").offsetTop}),100)),"sheet"==e&&this[e]&&(clearTimeout(this.__debouce),this.__debouce=setTimeout((async()=>{for(var t in this.loading=!0,this.gSheet.sheet=this[e],this.gSheet.sheetGids)this.database[t]=await this.gSheet.loadSheetData(t),this.requestUpdate();this.loading=!1,setTimeout((()=>{if(this.database.gradeScale.length>0){let e=this.shadowRoot.querySelectorAll("letter-grade");for(var t in Array.from(e))e[t].gradeScale=this.database.gradeScale}}),0)}),0))}))}processassignmentsData(t,e,i){for(var a in i){const t=new Date(`${i[a].dueDate} ${i[a].dueTime}`);i[a]._ISODueDate=t.toISOString()}return i}processtagsData(t,e,i){let a=new Set([]),s=[];for(var r in i)i[r].category=i[r].category?i[r].category.split(","):[],i[r].associatedMaterial=i[r].associatedMaterial?i[r].associatedMaterial.split(","):[],i[r].category.forEach((t=>{a.add(t)})),s=[...Array.from(a)];return{categories:s,data:i}}processrubricsData(t,e,i){for(var a in i)i[a].qualitative=i[a].qualitative?i[a].qualitative.split(","):[];return i}processrosterData(t,e,i){for(var a in i)i[a].interests=i[a].interests?i[a].interests.split(","):[];return i}processsettingsData(t,e,i){let a={};for(var s in i)a[i[s].key]=i[s].value;return a}static get properties(){return{...super.properties,hideGradeScale:{type:Boolean},disabled:{type:Boolean,reflect:!0},loading:{type:Boolean,reflect:!0},activeStudent:{type:Number,attribute:"active-student"},activeAssignment:{type:Number,attribute:"active-assignment"},totalScore:{type:Number},scoreLock:{type:Boolean},debug:{type:Boolean},sheet:{type:String},activeSubmission:{type:String,attribute:!1},database:{type:Object,attribute:!1},activeRubric:{type:Object,attribute:!1},assessmentView:{type:Object,attribute:!1},activeGrading:{type:Object,attribute:!1},activeStudentSubmissions:{type:Array}}}changeStudent(t){"prev"==t.target.value&&0!==this.activeStudent?this.activeStudent--:"next"==t.target.value&&this.database.roster.length-1!==this.activeStudent&&this.activeStudent++,this.requestUpdate()}changeAssignment(t){"prev"==t.target.value&&0!==this.activeAssignment?this.activeAssignment--:"next"==t.target.value&&this.database.assignments.length-1!==this.activeAssignment&&this.activeAssignment++,this.requestUpdate()}static get styles(){return[...super.styles,e`
        :host {
          display: block;
        }
        loading-indicator {
          --loading-indicator-background-color: var(
            --simple-colors-default-theme-accent-2,
            grey
          );
          --loading-indicator-color: var(
            --simple-colors-default-theme-accent-10,
            black
          );
        }
        grid-plate {
          --hax-layout-container-transition: none;
          --grid-plate-col-transition: none;
          --grid-plate-item-margin: 8px;
          --grid-plate-item-padding: 8px;
        }
        a11y-tabs {
          --a11y-tabs-border-color: var(
            --simple-colors-default-theme-accent-10,
            black
          );
        }
        a11y-collapse {
          --a11y-collapse-border-color: var(
            --simple-colors-default-theme-accent-10,
            black
          );
        }
        a11y-collapse:not([expanded]):hover {
          background-color: var(--simple-colors-default-theme-accent-1, grey);
        }
        a11y-collapse div[slot="heading"] {
          font-size: 16px;
          font-weight: normal;
          cursor: pointer;
          line-height: 34px;
          display: flex;
        }
        a11y-collapse[expanded] div[slot="heading"] {
          font-weight: bold;
        }
        .active-student-grade-history {
          display: flex;
          width: 100%;
        }
        .active-student-grade-history letter-grade {
          display: inline-flex;
          margin: 2px;
        }
        .active-student-grade-history button {
          opacity: 0.4;
          background-color: transparent;
          border: 0;
          padding: 0;
          margin: 0;
        }
        .active-student-grade-history button.activeAssignment {
          opacity: 0.9;
          background-color: yellow;
        }
        .active-student-grade-history button:focus,
        .active-student-grade-history button:active,
        .active-student-grade-history button:hover {
          opacity: 1;
          outline: 1px solid black;
          outline-offset: 2px;
        }
        simple-fields-tag-list.drag-focus {
          background-color: #dddddd;
        }
        simple-colors[accent-color] {
          display: inline-flex;
          width: 24px;
          height: 24px;
          margin: 4px 6px 0px 0px;
        }
        simple-colors[accent-color] span {
          display: inline-flex;
          width: 24px;
          height: 24px;
          background-color: var(
            --simple-colors-default-theme-accent-3,
            #eeeeee
          );
        }
        simple-fields-field[type="textarea"] {
          --simple-fields-font-size: 20px;
        }
        simple-fields-field[type="number"] {
          --simple-fields-font-size: 40px;
          line-height: 40px;
        }

        .student-feedback-score-heading {
          display: flex;
          font-size: 28px;
          font-weight: bold;
          line-height: 28px;
          padding: 8px;
        }
        .student-feedback-score-heading h3 {
          margin: 0 0 0 8px;
          padding: 0px;
        }

        #totalpts {
          width: 84px;
          margin: 0px 12px;
        }
        .mini-map {
          max-height: 150px;
          max-width: 150px;
          overflow: auto;
        }
        .mini-map div[data-pixel-row] {
          height: 5px;
        }
        .mini-map div[data-pixel-col] {
          background-color: yellow;
          float: left;
          width: 5px;
          height: 5px;
        }
        .mini-map div[data-active-assignment-student-pixel] {
          background-color: blue;
        }
        .student-feedback-wrap {
          display: flex;
        }
        .student-feedback-wrap .student-feedback-text {
          width: 80%;
          margin: 0;
        }
        .student-feedback-wrap .student-feedback-text div.heading {
          padding: 20px;
        }
        .student-feedback-wrap .student-feedback-score {
          font-size: 40px;
          line-height: 68px;
          padding: 34px 16px;
          display: flex;
          width: 50%;
        }
        simple-tag {
          margin: 2px;
        }
        simple-tag:focus,
        simple-tag:hover {
          --simple-fields-fieldset-border-color: var(
            --simple-colors-default-theme-accent-10,
            #eeeeee
          );
        }
        .active-submission {
          max-height: 400px;
          width: 60%;
          overflow: auto;
          margin: 0 auto;
        }
        .active-submission iframe {
          height: 400px;
          width: 60%;
        }
        .tag-group {
          position: sticky;
          top: 0;
        }
        .student-report-wrap {
          display: flex;
          justify-content: space-evenly;
        }
        .student-report-score {
          margin-top: -20px;
        }
        editable-table-display::part(td),
        editable-table-display::part(th) {
          text-align: center;
          vertical-align: top;
          max-width: 250px;
        }
        editable-table-display::part(simple-fields-field) {
          --simple-fields-font-size: 32px;
          --simple-fields-text-align: center;
          background-color: transparent;
          max-width: 100px;
          padding: 0 0 28px 0;
          margin: 0;
        }
      `]}renderSubmission(e){let i=t`<h3>${this.t.studentSubmission}</h3>`;return s(e)?(i=t`${i}<a
          href="${e}"
          target="_blank"
          rel="noopener noreferrer"
          ><simple-icon-button-lite
            label="${this.t.openInNewWindow}"
            icon="open-in-new"
          ></simple-icon-button-lite
        ></a>`,e!=r(e)?(import("../video-player/video-player.js"),t`${i}<video-player
            class="active-submission"
            source="${e}"
            width="60%"
          ></video-player>`):t`${i}
          <div class="active-submission">
            <iframe
              src="${e}"
              loading="lazy"
              width="100%"
              height="100%"
            ></iframe>
          </div>`):(import("../md-block/md-block.js"),t`${i}
        <div class="active-submission">
          <md-block .markdown="${e}"></md-block>
        </div>`)}studentLetterGradeHistoryClick(t){this.activeAssignment=parseInt(t.target.value),this.requestUpdate()}toggleGradeScale(t){import("../simple-popover/simple-popover.js"),this.hideGradeScale=!this.hideGradeScale}render(){return t`
      <grid-plate layout="1-1-1">
        <div slot="col-1">
          <simple-icon-button-lite
            @click="${this.changeStudent}"
            value="prev"
            ?disabled="${0===this.activeStudent}"
            icon="arrow-back"
          >
            Previous student
          </simple-icon-button-lite>
          <simple-icon-button-lite
            @click="${this.changeStudent}"
            value="next"
            icon="arrow-forward"
            ?disabled="${this.database.roster.length-1===this.activeStudent}"
          >
            Next student
          </simple-icon-button-lite>
        </div>
        <div slot="col-2">
          <simple-icon-button-lite
            @click="${this.changeAssignment}"
            value="prev"
            icon="arrow-back"
            ?disabled="${0===this.activeAssignment}"
          >
            Previous assignment
          </simple-icon-button-lite>
          <simple-icon-button-lite
            @click="${this.changeAssignment}"
            value="next"
            ?disabled="${this.database.assignments.length-1===this.activeAssignment}"
            icon="arrow-forward"
          >
            Next Assignment
          </simple-icon-button-lite>
          <simple-icon-button-lite
            icon="list"
            @click="${this.toggleGradeScale}"
            id="gradescalebtn"
          >
            ${this.t.gradingScale}
          </simple-icon-button-lite>
          <simple-popover
            ?hidden="${this.hideGradeScale}"
            for="gradescalebtn"
            auto
          >
            <editable-table-display
              accent-color="${this.accentColor}"
              bordered
              column-header
              condensed
              disable-responsive
              scroll
              striped
            >
              <table>
                <tbody>
                  <tr>
                    <td>${this.t.letterGrade}</td>
                    <td>${this.t.highRange}</td>
                    <td>${this.t.lowRange}</td>
                  </tr>
                  ${this.database.gradeScale.map((e=>t`
                      <tr>
                        <td>${e.letter}</td>
                        <td>${e.highRange}</td>
                        <td>${e.lowRange}</td>
                      </tr>
                    `))}
                </tbody>
              </table>
            </editable-table-display>
          </simple-popover>
        </div>
        <loading-indicator
          ?loading="${this.loading}"
          slot="col-3"
        ></loading-indicator>
      </grid-plate>
      <a11y-tabs full-width>
        <a11y-tab icon="social:person" label="Active student">
          <grid-plate layout="3-1">
            <div slot="col-1">
              ${this.database.roster[this.activeStudent]&&this.database.grades[this.activeStudent]?t`
                    <grade-book-student-block
                      .student="${this.database.roster[this.activeStudent]}"
                    ></grade-book-student-block>
                    <div class="active-student-grade-history">
                      ${this.activeStudentSubmissions.map((e=>t`
                          <button
                            .value="${e.assignmentIndex}"
                            @click="${this.studentLetterGradeHistoryClick}"
                            class="${this.activeAssignment===e.assignmentIndex?"activeAssignment":""}"
                          >
                            <letter-grade
                              mini
                              label="${e.assignmentName}"
                              .total="${e.assignmentPoints}"
                              .score="${e.studentScore}"
                              .value="${e.assignmentIndex}"
                            >
                            </letter-grade>
                          </button>
                        `))}
                    </div>
                  `:t`<loading-indicator></loading-indicator>`}
            </div>
            <div slot="col-2">
              ${this.database.roster.length&&this.database.assignments.length?t`
                    <h4>Active submission map</h4>
                    <div class="mini-map">
                      ${this.database.roster.map(((e,i)=>t` <div data-pixel-row>
                          ${this.database.assignments.map(((e,a)=>t`
                              <div
                                data-pixel-col
                                ?data-active-assignment-student-pixel="${this.activeStudent===i&&this.activeAssignment===a}"
                              ></div>
                            `))}
                        </div>`))}
                    </div>
                  `:t`<loading-indicator></loading-indicator>`}
            </div>
          </grid-plate>
        </a11y-tab>
        <a11y-tab icon="assignment-ind" label="Active Assessment">
          ${this.database.assignments.length&&this.database.assignments[this.activeAssignment]?t`
                <h3>
                  ${this.database.assignments[this.activeAssignment].name}
                </h3>
                <ul>
                  <li>
                    Due date:
                    <local-time
                      datetime="${this.database.assignments[this.activeAssignment]._ISODueDate}"
                      month="short"
                      day="numeric"
                      year="numeric"
                      hour="numeric"
                      minute="numeric"
                      time-zone-name="short"
                    >
                    </local-time>
                  </li>
                  <li>
                    Date submitted:
                    ${Math.floor(this.database.assignments[this.activeAssignment]._ISODueDate-new Date("2021-03-01T10:20:08"))/6e4}
                    minutes ago
                  </li>
                </ul>
                <div>
                  ${this.activeSubmission?this.renderSubmission(this.activeSubmission):t`${this.t.noSubmission}`}
                </div>
              `:t`<loading-indicator></loading-indicator>`}
        </a11y-tab>
      </a11y-tabs>
      <grid-plate layout="3-1">
        <div slot="col-1">
          <a11y-tabs
            full-width
            @a11y-tabs-active-changed="${this.updateStudentReport}"
          >
            <a11y-tab
              icon="image:style"
              label="Assessment view"
              id="assessmentview"
            >
              ${this.activeRubric[0]?t`
                    <h3>${this.activeRubric[0].name}</h3>
                    ${this.activeRubric.map((e=>t`
                        <h4>${e.criteria}</h4>
                        <p>${e.description}</p>
                        <editable-table-display
                          accent-color="${this.accentColor}"
                          bordered
                          column-header
                          condensed
                          disable-responsive
                          scroll
                          striped
                        >
                          <table>
                            <tbody>
                              <tr>
                                ${e.qualitative.map((e=>t` <td>${e}</td> `))}
                                <td>${e.percentage} %</td>
                              </tr>
                              <tr>
                                ${e.qualitative.map((i=>t`
                                    <td>
                                      <simple-fields-tag-list
                                        style="background-color:transparent;"
                                        data-criteria="${e.criteria}"
                                        label="${i}"
                                      ></simple-fields-tag-list>
                                    </td>
                                  `))}
                                <td>
                                  <simple-fields-field
                                    type="number"
                                    part="simple-fields-field"
                                    min="0"
                                    value="${"max"===this.database.settings.defaultScore?Math.round(e.percentage/100*this.database.assignments[this.activeAssignment].points):this.database.settings.defaultScore}"
                                    max="${Math.round(e.percentage/100*this.database.assignments[this.activeAssignment].points)}"
                                    maxlength="10"
                                    data-rubric-score
                                    data-criteria="${e.criteria}"
                                  ></simple-fields-field>
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </editable-table-display>
                        <h4>Additional ${e.criteria} feedback</h4>
                        <simple-fields-field
                          type="textarea"
                          data-rubric-written
                          data-criteria="${e.criteria}"
                        ></simple-fields-field>
                      `))}
                    <div class="student-feedback-wrap">
                      <div class="student-feedback-text">
                        <h3 class="heading">Overall feedback</h3>
                        <simple-fields-field
                          type="textarea"
                          data-criteria="overall"
                          data-rubric-written
                        ></simple-fields-field>
                      </div>
                      <div class="student-feedback-score">
                        <simple-icon-button-lite
                          icon="${this.scoreLock?"lock":"lock-open"}"
                          @click="${this.toggleLock}"
                        ></simple-icon-button-lite>
                        <simple-fields-field
                          ?disabled="${this.scoreLock}"
                          type="number"
                          min="0"
                          id="totalpts"
                          maxlength="10"
                          @value-changed="${this.totalScoreChangedEvent}"
                        ></simple-fields-field>
                        /
                        ${this.database.assignments[this.activeAssignment].points}
                        pts
                        <letter-grade
                          style="margin:-8px 0 0 16px;"
                          total="${this.database.assignments[this.activeAssignment].points}"
                          score="${this.totalScore}"
                        ></letter-grade>
                      </div>
                    </div>
                  `:t`<loading-indicator></loading-indicator>`}
            </a11y-tab>
            <a11y-tab icon="assignment" label="Student report">
              <div>
                ${this.loading?t`<loading-indicator></loading-indicator>`:t`
                      <h2>Student feedback report</h2>
                      <div class="student-report-wrap">
                        <a11y-collapse-group
                          heading-button
                          expanded
                          style="width:80%;"
                        >
                          ${this.database.rubrics.filter((t=>t.shortName==this.database.assignments[this.activeAssignment].rubric)).map((e=>t`
                                <a11y-collapse class="student-feedback-text">
                                  <div slot="heading" class="heading">
                                    ${e.criteria}
                                  </div>
                                  <div slot="content">
                                    <div class="student-feedback-score-heading">
                                      <div>
                                        ${this.getCriteriaScore(e.criteria)}
                                        /
                                        ${Math.round(e.percentage/100*this.database.assignments[this.activeAssignment].points)}
                                      </div>
                                      <h3>Criteria details</h3>
                                    </div>
                                    <p>${e.description}</p>
                                    <h3>Your feedback</h3>
                                    <ul>
                                      ${e.qualitative.map((i=>t`
                                          <h4>${i}</h4>
                                          <ul>
                                            ${this.activeGrading[e.criteria]?t`${this.activeGrading[e.criteria][i].map((e=>t` <li>
                                                    <span>${e.term}</span
                                                    >${e.description?t` -
                                                        ${e.description}`:""}
                                                    ${e.associatedMaterial?t`
                                                          <ul>
                                                            ${e.associatedMaterial.map((e=>t`
                                                                <li>
                                                                  <a
                                                                    href="${e}"
                                                                    target="_blank"
                                                                    rel="noopener noreferrer"
                                                                    >${e}</a
                                                                  >
                                                                </li>
                                                              `))}
                                                          </ul>
                                                        `:""}
                                                  </li>`))}`:""}
                                          </ul>
                                        `))}
                                    </ul>
                                    <h3>Additional Criteria feedback</h3>
                                    <p>
                                      ${this.getCriteriaFeedback(e.criteria)}
                                    </p>
                                  </div>
                                </a11y-collapse>
                              `))}
                          <a11y-collapse class="student-feedback-text">
                            <div slot="heading" class="heading">
                              ${this.t.overallFeedback}
                            </div>
                            <div slot="content">
                              <p>${this.getCriteriaFeedback("overall")}</p>
                              <h3>Your total Score</h3>
                              <div class="score-display">
                                ${this.totalScore} /
                                ${this.database.assignments[this.activeAssignment].points}
                                pts
                              </div>
                            </div>
                          </a11y-collapse>
                        </a11y-collapse-group>
                        <letter-grade
                          class="student-report-score"
                          show-scale
                          total="${this.database.assignments[this.activeAssignment].points}"
                          score="${this.totalScore}"
                        ></letter-grade>
                      </div>
                    `}
              </div>
            </a11y-tab>
          </a11y-tabs>
        </div>
        <div slot="col-2" class="tag-group">
          ${this.database.tags.categories.length>0?t`
                <h4>Qualitative Rubric Tags</h4>
                <a11y-collapse-group heading-button>
                  ${this.database.tags.categories.map(((e,i)=>t`
                      <a11y-collapse>
                        <div slot="heading">
                          <simple-colors accent-color="${this.pickColor(i)}"
                            ><span></span></simple-colors
                          >${e}
                        </div>
                        <div slot="content">
                          ${this.database.tags.data.filter((t=>t.category.includes(e))).map((e=>t`<simple-tag
                                  draggable="true"
                                  tabindex="0"
                                  @keypress="${this.keyDown}"
                                  @dragstart="${this.setDragTransfer}"
                                  accent-color="${this.pickColor(i)}"
                                  value="${e.term}"
                                  .data="${e}"
                                ></simple-tag>`))}
                        </div>
                      </a11y-collapse>
                    `))}
                </a11y-collapse-group>
              `:t`<loading-indicator></loading-indicator>`}
        </div>
      </grid-plate>
    `}rubricCriteriaPointsChange(t){null!=t.detail.getAttribute("data-rubric-score")&&(clearTimeout(this.__debouce),this.__debouce=setTimeout((()=>{this.loading||(this.updateTotalScore(),this.totalScore=this.getCurrentScore(this.activeStudent,this.activeAssignment),this.shadowRoot.querySelector("#totalpts").value=this.totalScore),this.scoreLock=!0}),10))}updateTotalScore(){let t=0,e=this.shadowRoot.querySelectorAll("#assessmentview editable-table-display");for(var i in Array.from(e))e[i].shadowRoot.querySelector("[data-rubric-score]").value&&(t+=parseInt(e[i].shadowRoot.querySelector("simple-fields-field").value));this.totalScore=t,this.requestUpdate()}totalScoreChangedEvent(t){this.totalScore=t.detail.value,this.database.grades[this.activeStudent][this.database.assignments[this.activeAssignment].shortName]=this.totalScore,this.activeStudentSubmissions=[],this.activeStudentSubmissions=[...this.getStudentSubmissions(this.activeStudent)],this.requestUpdate()}toggleLock(t){this.scoreLock=!this.scoreLock}updateStudentReport(){this.requestUpdate()}getCriteriaScore(t){let e=this.shadowRoot.querySelectorAll("#assessmentview editable-table-display");for(var i in Array.from(e))if(e[i].shadowRoot.querySelector(`[data-rubric-score][data-criteria="${t}"]`))return e[i].shadowRoot.querySelector(`[data-rubric-score][data-criteria="${t}"]`).value;return 0}getCriteriaFeedback(t){return this.shadowRoot.querySelector(`#assessmentview [data-rubric-written][data-criteria="${t}"]`)?this.shadowRoot.querySelector(`#assessmentview [data-rubric-written][data-criteria="${t}"]`).value:""}qualitativeFeedbackUpdate(t){this.activeGrading[t.detail.getAttribute("data-criteria")]||(this.activeGrading[t.detail.getAttribute("data-criteria")]={}),this.activeGrading[t.detail.getAttribute("data-criteria")][t.detail.label]=t.detail.tagList,this.requestUpdate()}keyDown(t){t.key}pickColor(t){let e=Object.keys(this.colors);for(;t>e.length;)t-=e.length;return e[t]}_handleDragDrop(t){window.dispatchEvent(new CustomEvent("simple-tag-drop",{detail:{value:"drop"}}))}setDragTransfer(t){window.dispatchEvent(new CustomEvent("simple-tag-dragstart",{detail:{value:t.target}}));let e=t.target.data;e.color=t.target.accentColor,t.dataTransfer.setData("text",JSON.stringify(e))}static get tag(){return"grade-book"}}customElements.define(GradeBook.tag,GradeBook);export{GradeBook};