/**
 * @license
 * Copyright (c) 2017 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
import"../../input-container/src/vaadin-input-container.js";import{html as e,PolymerElement as t}from"../../../@polymer/polymer/polymer-element.js";import{ElementMixin as i}from"../../component-base/src/element-mixin.js";import{InputController as r}from"../../field-base/src/input-controller.js";import{InputFieldMixin as s}from"../../field-base/src/input-field-mixin.js";import{LabelledInputController as n}from"../../field-base/src/labelled-input-controller.js";import{PatternMixin as a}from"../../field-base/src/pattern-mixin.js";import{inputFieldShared as l}from"../../field-base/src/styles/input-field-shared-styles.js";import{registerStyles as o,ThemableMixin as d}from"../../vaadin-themable-mixin/vaadin-themable-mixin.js";o("vaadin-text-field",l,{moduleId:"vaadin-text-field-styles"});export class TextField extends(a(s(d(i(t))))){static get is(){return"vaadin-text-field"}static get template(){return e`
      <style>
        [part='input-field'] {
          flex-grow: 0;
        }
      </style>

      <div class="vaadin-field-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
        </div>

        <vaadin-input-container
          part="input-field"
          readonly="[[readonly]]"
          disabled="[[disabled]]"
          invalid="[[invalid]]"
          theme$="[[theme]]"
        >
          <slot name="prefix" slot="prefix"></slot>
          <slot name="input"></slot>
          <slot name="suffix" slot="suffix"></slot>
          <div id="clearButton" part="clear-button" slot="suffix" aria-hidden="true"></div>
        </vaadin-input-container>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>
    `}static get properties(){return{maxlength:{type:Number},minlength:{type:Number}}}static get delegateAttrs(){return[...super.delegateAttrs,"maxlength","minlength"]}static get constraints(){return[...super.constraints,"maxlength","minlength"]}constructor(){super(),this._setType("text")}get clearElement(){return this.$.clearButton}ready(){super.ready(),this.addController(new r(this,(e=>{this._setInputElement(e),this._setFocusElement(e),this.stateTarget=e,this.ariaTarget=e}))),this.addController(new n(this.inputElement,this._labelController))}}customElements.define(TextField.is,TextField);