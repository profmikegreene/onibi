/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
let e=0,n=0,t=[],o=0,c=!1,a=document.createTextNode("");new window.MutationObserver((function microtaskFlush(){c=!1;const e=t.length;for(let n=0;n<e;n++){let e=t[n];if(e)try{e()}catch(e){setTimeout((()=>{throw e}))}}t.splice(0,e),n+=e})).observe(a,{characterData:!0});const i={after:e=>({run:n=>window.setTimeout(n,e),cancel(e){window.clearTimeout(e)}}),run:(e,n)=>window.setTimeout(e,n),cancel(e){window.clearTimeout(e)}};export{i as timeOut};const l={run:e=>window.requestAnimationFrame(e),cancel(e){window.cancelAnimationFrame(e)}};export{l as animationFrame};const r={run:e=>window.requestIdleCallback?window.requestIdleCallback(e):window.setTimeout(e,16),cancel(e){window.cancelIdleCallback?window.cancelIdleCallback(e):window.clearTimeout(e)}};export{r as idlePeriod};const w={run:n=>(c||(c=!0,a.textContent=o++),t.push(n),e++),cancel(e){const o=e-n;if(o>=0){if(!t[o])throw new Error("invalid async handle: "+e);t[o]=null}}};export{w as microTask};