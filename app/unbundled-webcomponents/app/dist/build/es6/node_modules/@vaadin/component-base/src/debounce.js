/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
export class Debouncer{constructor(){this._asyncModule=null,this._callback=null,this._timer=null}setConfig(t,c){this._asyncModule=t,this._callback=c,this._timer=this._asyncModule.run((()=>{this._timer=null,e.delete(this),this._callback()}))}cancel(){this.isActive()&&(this._cancelAsync(),e.delete(this))}_cancelAsync(){this.isActive()&&(this._asyncModule.cancel(this._timer),this._timer=null)}flush(){this.isActive()&&(this.cancel(),this._callback())}isActive(){return null!=this._timer}static debounce(e,t,c){return e instanceof Debouncer?e._cancelAsync():e=new Debouncer,e.setConfig(t,c),e}}let e=new Set;export const enqueueDebouncer=function(t){e.add(t)};export const flushDebouncers=function(){const t=Boolean(e.size);return e.forEach((e=>{try{e.flush()}catch(e){setTimeout((()=>{throw e}))}})),t};export const flush=()=>{let e;do{e=flushDebouncers()}while(e)};