define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DelegateStateMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to delegate properties and attributes to a target element.
   *
   * @polymerMixin
   */
  var DelegateStateMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_superclass) {
      babelHelpers.inherits(DelegateStateMixinClass, _superclass);

      var _super = _createSuper(DelegateStateMixinClass);

      function DelegateStateMixinClass() {
        babelHelpers.classCallCheck(this, DelegateStateMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(DelegateStateMixinClass, [{
        key: "ready",
        value:
        /** @protected */
        function ready() {
          babelHelpers.get(babelHelpers.getPrototypeOf(DelegateStateMixinClass.prototype), "ready", this).call(this);

          this._createDelegateAttrsObserver();

          this._createDelegatePropsObserver();
        }
        /** @protected */

      }, {
        key: "_stateTargetChanged",
        value: function _stateTargetChanged(target) {
          if (target) {
            this._ensureAttrsDelegated();

            this._ensurePropsDelegated();
          }
        }
        /** @protected */

      }, {
        key: "_createDelegateAttrsObserver",
        value: function _createDelegateAttrsObserver() {
          this._createMethodObserver("_delegateAttrsChanged(".concat(this.constructor.delegateAttrs.join(', '), ")"));
        }
        /** @protected */

      }, {
        key: "_createDelegatePropsObserver",
        value: function _createDelegatePropsObserver() {
          this._createMethodObserver("_delegatePropsChanged(".concat(this.constructor.delegateProps.join(', '), ")"));
        }
        /** @protected */

      }, {
        key: "_ensureAttrsDelegated",
        value: function _ensureAttrsDelegated() {
          var _this = this;

          this.constructor.delegateAttrs.forEach(function (name) {
            _this._delegateAttribute(name, _this[name]);
          });
        }
        /** @protected */

      }, {
        key: "_ensurePropsDelegated",
        value: function _ensurePropsDelegated() {
          var _this2 = this;

          this.constructor.delegateProps.forEach(function (name) {
            _this2._delegateProperty(name, _this2[name]);
          });
        }
        /** @protected */

      }, {
        key: "_delegateAttrsChanged",
        value: function _delegateAttrsChanged() {
          var _this3 = this;

          for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
          }

          this.constructor.delegateAttrs.forEach(function (name, index) {
            _this3._delegateAttribute(name, values[index]);
          });
        }
        /** @protected */

      }, {
        key: "_delegatePropsChanged",
        value: function _delegatePropsChanged() {
          var _this4 = this;

          for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          this.constructor.delegateProps.forEach(function (name, index) {
            _this4._delegateProperty(name, values[index]);
          });
        }
        /** @protected */

      }, {
        key: "_delegateAttribute",
        value: function _delegateAttribute(name, value) {
          if (!this.stateTarget) {
            return;
          }

          if (name === 'invalid') {
            this._delegateAttribute('aria-invalid', value ? 'true' : false);
          }

          if (typeof value === 'boolean') {
            this.stateTarget.toggleAttribute(name, value);
          } else if (value) {
            this.stateTarget.setAttribute(name, value);
          } else {
            this.stateTarget.removeAttribute(name);
          }
        }
        /** @protected */

      }, {
        key: "_delegateProperty",
        value: function _delegateProperty(name, value) {
          if (!this.stateTarget) {
            return;
          }

          this.stateTarget[name] = value;
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * A target element to which attributes and properties are delegated.
             * @protected
             */
            stateTarget: {
              type: Object,
              observer: '_stateTargetChanged'
            }
          };
        }
        /**
         * An array of the host attributes to delegate to the target element.
         */

      }, {
        key: "delegateAttrs",
        get: function get() {
          return [];
        }
        /**
         * An array of the host properties to delegate to the target element.
         */

      }, {
        key: "delegateProps",
        get: function get() {
          return [];
        }
      }]);
      return DelegateStateMixinClass;
    }(superclass);
  });
  _exports.DelegateStateMixin = DelegateStateMixin;
});