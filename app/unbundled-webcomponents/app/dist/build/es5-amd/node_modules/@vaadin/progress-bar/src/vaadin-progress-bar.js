define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../component-base/src/element-mixin.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js", "./vaadin-progress-mixin.js"], function (_exports, _polymerElement, _elementMixin, _vaadinThemableMixin, _vaadinProgressMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProgressBar = void 0;

  var _templateObject_2c4aac60941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-progress-bar>` is a Web Component for progress bars.
   *
   * ```html
   * <vaadin-progress-bar min="0" max="1" value="0.5">
   * </vaadin-progress-bar>
   * ```
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ----------------|----------------
   * `bar` | Progress-bar's background
   * `value` | Progress-bar's foreground
   *
   * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.
   *
   * The following custom properties are available:
   *
   * Custom property | Description | Default
   * ----------------|-------------|-------------
   * `--vaadin-progress-value` | current progress value (between 0 and 1) | 0
   *
   * The following state attributes are available for styling:
   *
   * Attribute       | Description | Part name
   * ----------------|-------------|------------
   * `indeterminate` | Set to an indeterminate progress bar | :host
   *
   * @extends HTMLElement
   * @mixes ProgressMixin
   * @mixes ThemableMixin
   * @mixes ElementMixin
   */
  var ProgressBar = /*#__PURE__*/function (_ElementMixin) {
    babelHelpers.inherits(ProgressBar, _ElementMixin);

    var _super = _createSuper(ProgressBar);

    function ProgressBar() {
      babelHelpers.classCallCheck(this, ProgressBar);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(ProgressBar, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2c4aac60941811ec8d52c707f928eca0 || (_templateObject_2c4aac60941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          width: 100%; /* prevent collapsing inside non-stretching column flex */\n          height: 8px;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        [part='bar'] {\n          height: 100%;\n        }\n\n        [part='value'] {\n          height: 100%;\n          transform-origin: 0 50%;\n          transform: scaleX(var(--vaadin-progress-value));\n        }\n\n        /* RTL specific styles */\n\n        :host([dir='rtl']) [part='value'] {\n          transform-origin: 100% 50%;\n        }\n      </style>\n\n      <div part=\"bar\">\n        <div part=\"value\"></div>\n      </div>\n    "])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-progress-bar';
      }
    }]);
    return ProgressBar;
  }((0, _elementMixin.ElementMixin)((0, _vaadinThemableMixin.ThemableMixin)((0, _vaadinProgressMixin.ProgressMixin)(_polymerElement.PolymerElement))));

  _exports.ProgressBar = ProgressBar;
  customElements.define(ProgressBar.is, ProgressBar);
});