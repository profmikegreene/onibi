define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../component-base/src/active-mixin.js", "../../component-base/src/element-mixin.js", "../../component-base/src/focus-mixin.js", "../../component-base/src/tabindex-mixin.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js"], function (_exports, _polymerElement, _activeMixin, _elementMixin, _focusMixin, _tabindexMixin, _vaadinThemableMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Button = void 0;

  var _templateObject_2a4d7cd0941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-button>` is an accessible and customizable button that allows users to perform actions.
   *
   * ```html
   * <vaadin-button>Press me</vaadin-button>
   * ```
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ----------|-------------
   * `label`   | The label (text) inside the button.
   * `prefix`  | A slot for content before the label (e.g. an icon).
   * `suffix`  | A slot for content after the label (e.g. an icon).
   *
   * The following attributes are available for styling:
   *
   * Attribute    | Description
   * -------------|-------------
   * `active`     | Set when the button is pressed down, either with mouse, touch or the keyboard.
   * `disabled`   | Set when the button is disabled.
   * `focus-ring` | Set when the button is focused using the keyboard.
   * `focused`    | Set when the button is focused.
   *
   * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.
   *
   * @extends HTMLElement
   * @mixes ActiveMixin
   * @mixes TabindexMixin
   * @mixes FocusMixin
   * @mixes ElementMixin
   * @mixes ThemableMixin
   */
  var Button = /*#__PURE__*/function (_ActiveMixin) {
    babelHelpers.inherits(Button, _ActiveMixin);

    var _super = _createSuper(Button);

    function Button() {
      babelHelpers.classCallCheck(this, Button);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(Button, [{
      key: "_activeKeys",
      get:
      /**
       * By default, `Space` is the only possible activation key for a focusable HTML element.
       * Nonetheless, the button is an exception as it can be also activated by pressing `Enter`.
       * See the "Keyboard Support" section in https://www.w3.org/TR/wai-aria-practices/examples/button/button.html.
       *
       * @protected
       * @override
       */
      function get() {
        return ['Enter', ' '];
      }
      /** @protected */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(Button.prototype), "ready", this).call(this); // By default, if the user hasn't provided a custom role,
        // the role attribute is set to "button".

        if (!this.hasAttribute('role')) {
          this.setAttribute('role', 'button');
        }
      }
      /**
       * Since the button component is designed on the base of the `[role=button]` attribute,
       * and doesn't have a native <button> inside, in order to be fully accessible from the keyboard,
       * it should manually fire the `click` event once an activation key is pressed,
       * as it follows from the WAI-ARIA specifications:
       * https://www.w3.org/TR/wai-aria-practices-1.1/#button
       *
       * According to the UI Events specifications,
       * the `click` event should be fired exactly on `keydown`:
       * https://www.w3.org/TR/uievents/#event-type-keydown
       *
       * @param {KeyboardEvent} event
       * @protected
       * @override
       */

    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(event) {
        babelHelpers.get(babelHelpers.getPrototypeOf(Button.prototype), "_onKeyDown", this).call(this, event);

        if (this._activeKeys.includes(event.key)) {
          event.preventDefault(); // `DisabledMixin` overrides the standard `click()` method
          // so that it doesn't fire the `click` event when the element is disabled.

          this.click();
        }
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-button';
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2a4d7cd0941811ec8d52c707f928eca0 || (_templateObject_2a4d7cd0941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          white-space: nowrap;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Aligns the button with form fields when placed on the same line.\n          Note, to make it work, the form fields should have the same \"::before\" pseudo-element. */\n        .vaadin-button-container::before {\n          content: '\\2003';\n          display: inline-block;\n          width: 0;\n        }\n\n        .vaadin-button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n          min-height: inherit;\n          text-shadow: inherit;\n          background: transparent;\n          padding: 0;\n          border: none;\n          box-shadow: none;\n        }\n\n        [part='prefix'],\n        [part='suffix'] {\n          flex: none;\n        }\n\n        [part='label'] {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      </style>\n      <div class=\"vaadin-button-container\">\n        <span part=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </span>\n        <span part=\"label\">\n          <slot></slot>\n        </span>\n        <span part=\"suffix\">\n          <slot name=\"suffix\"></slot>\n        </span>\n      </div>\n    "], ["\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          white-space: nowrap;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Aligns the button with form fields when placed on the same line.\n          Note, to make it work, the form fields should have the same \"::before\" pseudo-element. */\n        .vaadin-button-container::before {\n          content: '\\\\2003';\n          display: inline-block;\n          width: 0;\n        }\n\n        .vaadin-button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n          min-height: inherit;\n          text-shadow: inherit;\n          background: transparent;\n          padding: 0;\n          border: none;\n          box-shadow: none;\n        }\n\n        [part='prefix'],\n        [part='suffix'] {\n          flex: none;\n        }\n\n        [part='label'] {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      </style>\n      <div class=\"vaadin-button-container\">\n        <span part=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </span>\n        <span part=\"label\">\n          <slot></slot>\n        </span>\n        <span part=\"suffix\">\n          <slot name=\"suffix\"></slot>\n        </span>\n      </div>\n    "])));
      }
    }]);
    return Button;
  }((0, _activeMixin.ActiveMixin)((0, _tabindexMixin.TabindexMixin)((0, _focusMixin.FocusMixin)((0, _elementMixin.ElementMixin)((0, _vaadinThemableMixin.ThemableMixin)(_polymerElement.PolymerElement))))));

  _exports.Button = Button;
  customElements.define(Button.is, Button);
});