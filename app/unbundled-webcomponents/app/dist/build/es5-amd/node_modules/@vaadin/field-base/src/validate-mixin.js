define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ValidateMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to provide required state and validation logic.
   *
   * @polymerMixin
   */
  var ValidateMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_superclass) {
      babelHelpers.inherits(ValidateMixinClass, _superclass);

      var _super = _createSuper(ValidateMixinClass);

      function ValidateMixinClass() {
        babelHelpers.classCallCheck(this, ValidateMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(ValidateMixinClass, [{
        key: "validate",
        value:
        /**
         * Returns true if field is valid, and sets `invalid` based on the field validity.
         *
         * @return {boolean} True if the value is valid.
         */
        function validate() {
          return !(this.invalid = !this.checkValidity());
        }
        /**
         * Returns true if the field value satisfies all constraints (if any).
         *
         * @return {boolean}
         */

      }, {
        key: "checkValidity",
        value: function checkValidity() {
          return !this.required || !!this.value;
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * Set to true when the field is invalid.
             */
            invalid: {
              type: Boolean,
              reflectToAttribute: true,
              notify: true,
              value: false
            },

            /**
             * Specifies that the user must fill in a value.
             */
            required: {
              type: Boolean,
              reflectToAttribute: true
            }
          };
        }
      }]);
      return ValidateMixinClass;
    }(superclass);
  });
  _exports.ValidateMixin = ValidateMixin;
});