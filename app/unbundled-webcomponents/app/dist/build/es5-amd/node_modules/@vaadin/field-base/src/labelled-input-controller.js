define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LabelledInputController = void 0;

  /**
   * @license
   * Copyright (c) 2021 - 2022 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   */

  /**
   * A controller for linking a `<label>` element with an `<input>` element.
   */
  var LabelledInputController = /*#__PURE__*/function () {
    function LabelledInputController(input, labelController) {
      var _this = this;

      babelHelpers.classCallCheck(this, LabelledInputController);
      this.input = input;
      this.__preventDuplicateLabelClick = this.__preventDuplicateLabelClick.bind(this);
      labelController.addEventListener('label-changed', function (event) {
        _this.__initLabel(event.detail.node);
      }); // Initialize the default label element

      this.__initLabel(labelController.node);
    }
    /**
     * @param {HTMLElement} label
     * @private
     */


    babelHelpers.createClass(LabelledInputController, [{
      key: "__initLabel",
      value: function __initLabel(label) {
        if (label) {
          label.addEventListener('click', this.__preventDuplicateLabelClick);

          if (this.input) {
            label.setAttribute('for', this.input.id);
          }
        }
      }
      /**
       * The native platform fires an event for both the click on the label, and also
       * the subsequent click on the native input element caused by label click.
       * This results in two click events arriving at the host, but we only want one.
       * This method prevents the duplicate click and ensures the correct isTrusted event
       * with the correct event.target arrives at the host.
       * @private
       */

    }, {
      key: "__preventDuplicateLabelClick",
      value: function __preventDuplicateLabelClick() {
        var _this2 = this;

        var inputClickHandler = function inputClickHandler(e) {
          e.stopImmediatePropagation();

          _this2.input.removeEventListener('click', inputClickHandler);
        };

        this.input.addEventListener('click', inputClickHandler);
      }
    }]);
    return LabelledInputController;
  }();

  _exports.LabelledInputController = LabelledInputController;
});