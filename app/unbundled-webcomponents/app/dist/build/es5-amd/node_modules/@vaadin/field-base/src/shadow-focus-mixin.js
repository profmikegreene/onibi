define(["exports", "../../component-base/src/keyboard-mixin.js", "./delegate-focus-mixin.js"], function (_exports, _keyboardMixin, _delegateFocusMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ShadowFocusMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to forward focus to an element in the shadow DOM.
   *
   * @polymerMixin
   * @mixes DelegateFocusMixin
   * @mixes KeyboardMixin
   */
  var ShadowFocusMixin = function ShadowFocusMixin(superClass) {
    return /*#__PURE__*/function (_DelegateFocusMixin) {
      babelHelpers.inherits(ShadowFocusMixinClass, _DelegateFocusMixin);

      var _super = _createSuper(ShadowFocusMixinClass);

      function ShadowFocusMixinClass() {
        babelHelpers.classCallCheck(this, ShadowFocusMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(ShadowFocusMixinClass, [{
        key: "_onKeyDown",
        value:
        /**
         * Override an event listener from `KeyboardMixin`
         * to prevent setting `focused` on Shift Tab.
         * @param {KeyboardEvent} event
         * @protected
         * @override
         */
        function _onKeyDown(event) {
          var _this = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(ShadowFocusMixinClass.prototype), "_onKeyDown", this).call(this, event); // When focus moves with Shift + Tab, do not mark host as focused.
          // The flag set here will be later used in focusin event listener.

          if (!event.defaultPrevented && event.keyCode === 9 && event.shiftKey) {
            this._isShiftTabbing = true;
            HTMLElement.prototype.focus.apply(this);

            this._setFocused(false);

            setTimeout(function () {
              return _this._isShiftTabbing = false;
            }, 0);
          }
        }
        /**
         * Override method inherited from `FocusMixin`
         * to support focusElement in Shadow DOM.
         * @param {Event} event
         * @return {boolean}
         * @protected
         * @override
         */

      }, {
        key: "_shouldSetFocus",
        value: function _shouldSetFocus(event) {
          if (!this.disabled && this.focusElement) {
            var path = event.composedPath(); // When focus moves from outside and not with Shift + Tab, delegate it to focusElement.

            if (path[0] === this && !this.contains(event.relatedTarget) && !this._isShiftTabbing) {
              this.focusElement.focus();
              return true;
            }

            if (path.includes(this.focusElement)) {
              return true;
            }
          }

          return false;
        }
        /**
         * Override an observer from `TabindexMixin`.
         * Do not call super to remove tabindex attribute
         * from host when disabled by setting undefined.
         * @param {string} tabindex
         * @protected
         * @override
         */

      }, {
        key: "_tabindexChanged",
        value: function _tabindexChanged(tabindex) {
          if (tabindex !== undefined) {
            this.focusElement.tabIndex = tabindex;
          }

          if (this.disabled && tabindex) {
            // If tabindex attribute was changed while component was disabled
            if (tabindex !== -1) {
              this.__lastTabIndex = tabindex;
            }

            this.tabindex = undefined;
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.
             *
             * @protected
             */
            tabindex: {
              type: Number,
              value: 0
            }
          };
        }
      }]);
      return ShadowFocusMixinClass;
    }((0, _delegateFocusMixin.DelegateFocusMixin)((0, _keyboardMixin.KeyboardMixin)(superClass)));
  };

  _exports.ShadowFocusMixin = ShadowFocusMixin;
});