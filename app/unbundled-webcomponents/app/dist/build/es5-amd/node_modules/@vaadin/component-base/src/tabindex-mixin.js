define(["exports", "./disabled-mixin.js"], function (_exports, _disabledMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TabindexMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to toggle the `tabindex` attribute.
   *
   * By default, the attribute is set to 0 that makes the element focusable.
   *
   * The attribute is set to -1 whenever the user disables the element
   * and restored with the last known value once the element is enabled.
   *
   * @polymerMixin
   * @mixes DisabledMixin
   */
  var TabindexMixin = function TabindexMixin(superclass) {
    return /*#__PURE__*/function (_DisabledMixin) {
      babelHelpers.inherits(TabindexMixinClass, _DisabledMixin);

      var _super = _createSuper(TabindexMixinClass);

      function TabindexMixinClass() {
        babelHelpers.classCallCheck(this, TabindexMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(TabindexMixinClass, [{
        key: "_disabledChanged",
        value:
        /**
         * When the element gets disabled, the observer saves the last known tabindex
         * and makes the element not focusable by setting tabindex to -1.
         * As soon as the element gets enabled, the observer restores the last known tabindex
         * so that the element can be focusable again.
         *
         * @protected
         * @override
         */
        function _disabledChanged(disabled, oldDisabled) {
          babelHelpers.get(babelHelpers.getPrototypeOf(TabindexMixinClass.prototype), "_disabledChanged", this).call(this, disabled, oldDisabled);

          if (disabled) {
            if (this.tabindex !== undefined) {
              this.__lastTabIndex = this.tabindex;
            }

            this.tabindex = -1;
          } else if (oldDisabled) {
            this.tabindex = this.__lastTabIndex;
          }
        }
        /**
         * When the user has changed tabindex while the element is disabled,
         * the observer reverts tabindex to -1 and rather saves the new tabindex value to apply it later.
         * The new value will be applied as soon as the element becomes enabled.
         *
         * @protected
         */

      }, {
        key: "_tabindexChanged",
        value: function _tabindexChanged(tabindex) {
          if (this.disabled && tabindex !== -1) {
            this.__lastTabIndex = tabindex;
            this.tabindex = -1;
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.
             * @protected
             */
            tabindex: {
              type: Number,
              value: 0,
              reflectToAttribute: true,
              observer: '_tabindexChanged'
            },

            /**
             * Stores the last known tabindex since the element has been disabled.
             *
             * @private
             */
            __lastTabIndex: {
              type: Number,
              value: 0
            }
          };
        }
      }]);
      return TabindexMixinClass;
    }((0, _disabledMixin.DisabledMixin)(superclass));
  };

  _exports.TabindexMixin = TabindexMixin;
});