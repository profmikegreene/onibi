define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ControllerMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin for connecting controllers to the element.
   *
   * @polymerMixin
   */
  var ControllerMixin = (0, _mixin.dedupingMixin)(function (superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(ControllerMixinClass, _superClass);

      var _super = _createSuper(ControllerMixinClass);

      function ControllerMixinClass() {
        var _this;

        babelHelpers.classCallCheck(this, ControllerMixinClass);
        _this = _super.call(this);
        /**
         * @type {Set<import('lit').ReactiveController>}
         */

        _this.__controllers = new Set();
        return _this;
      }
      /** @protected */


      babelHelpers.createClass(ControllerMixinClass, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(ControllerMixinClass.prototype), "connectedCallback", this).call(this);

          this.__controllers.forEach(function (c) {
            c.hostConnected && c.hostConnected();
          });
        }
        /** @protected */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(ControllerMixinClass.prototype), "disconnectedCallback", this).call(this);

          this.__controllers.forEach(function (c) {
            c.hostDisconnected && c.hostDisconnected();
          });
        }
        /**
         * Registers a controller to participate in the element update cycle.
         *
         * @param {import('lit').ReactiveController} controller
         * @protected
         */

      }, {
        key: "addController",
        value: function addController(controller) {
          this.__controllers.add(controller); // Call hostConnected if a controller is added after the element is attached.


          if (this.$ !== undefined && this.isConnected && controller.hostConnected) {
            controller.hostConnected();
          }
        }
        /**
         * Removes a controller from the element.
         *
         * @param {import('lit').ReactiveController} controller
         * @protected
         */

      }, {
        key: "removeController",
        value: function removeController(controller) {
          this.__controllers.delete(controller);
        }
      }]);
      return ControllerMixinClass;
    }(superClass);
  });
  _exports.ControllerMixin = ControllerMixin;
});