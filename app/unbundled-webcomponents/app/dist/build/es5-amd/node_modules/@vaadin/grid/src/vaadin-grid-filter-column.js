define(["exports", "./vaadin-grid-filter.js", "./vaadin-grid-column.js"], function (_exports, _vaadinGridFilter, _vaadinGridColumn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridFilterColumn = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-filter-column>` is a helper element for the `<vaadin-grid>`
   * that provides default header renderer and functionality for filtering.
   *
   * #### Example:
   * ```html
   * <vaadin-grid items="[[items]]">
   *  <vaadin-grid-filter-column path="name.first"></vaadin-grid-filter-column>
   *
   *  <vaadin-grid-column>
   *    ...
   * ```
   */
  var GridFilterColumn = /*#__PURE__*/function (_GridColumn) {
    babelHelpers.inherits(GridFilterColumn, _GridColumn);

    var _super = _createSuper(GridFilterColumn);

    function GridFilterColumn() {
      var _this;

      babelHelpers.classCallCheck(this, GridFilterColumn);
      _this = _super.call(this);
      _this.__boundOnFilterValueChanged = _this.__onFilterValueChanged.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /**
     * Renders the grid filter with the custom text field to the header cell.
     *
     * @override
     */


    babelHelpers.createClass(GridFilterColumn, [{
      key: "_defaultHeaderRenderer",
      value: function _defaultHeaderRenderer(root, _column) {
        var filter = root.firstElementChild;
        var textField = filter ? filter.firstElementChild : undefined;

        if (!filter) {
          filter = document.createElement('vaadin-grid-filter');
          textField = document.createElement('vaadin-text-field');
          textField.setAttribute('slot', 'filter');
          textField.setAttribute('theme', 'small');
          textField.setAttribute('style', 'max-width: 100%;');
          textField.setAttribute('focus-target', '');
          textField.addEventListener('value-changed', this.__boundOnFilterValueChanged);
          filter.appendChild(textField);
          root.appendChild(filter);
        }

        filter.path = this.path;
        filter.value = this._filterValue;
        textField.__rendererValue = this._filterValue;
        textField.value = this._filterValue;
        textField.label = this.__getHeader(this.header, this.path);
      }
      /**
       * The filter column doesn't allow to use a custom header renderer
       * to override the header cell content.
       * It always renders the grid filter to the header cell.
       *
       * @override
       */

    }, {
      key: "_computeHeaderRenderer",
      value: function _computeHeaderRenderer() {
        return this._defaultHeaderRenderer;
      }
      /**
       * Updates the internal filter value once the filter text field is changed.
       * The listener handles only user-fired events.
       *
       * @private
       */

    }, {
      key: "__onFilterValueChanged",
      value: function __onFilterValueChanged(e) {
        // Skip if the value is changed by the renderer.
        if (e.detail.value === e.target.__rendererValue) {
          return;
        }

        this._filterValue = e.detail.value;
      }
      /** @private */

    }, {
      key: "__getHeader",
      value: function __getHeader(header, path) {
        if (header) {
          return header;
        }

        if (path) {
          return this._generateHeader(path);
        }
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-grid-filter-column';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * JS Path of the property in the item used for filtering the data.
           */
          path: String,

          /**
           * Text to display as the label of the column filter text-field.
           */
          header: String
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header, _filterValue)'];
      }
    }]);
    return GridFilterColumn;
  }(_vaadinGridColumn.GridColumn);

  _exports.GridFilterColumn = GridFilterColumn;
  customElements.define(GridFilterColumn.is, GridFilterColumn);
});