define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js", "../../component-base/src/controller-mixin.js", "./label-controller.js"], function (_exports, _mixin, _controllerMixin, _labelController) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LabelMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to provide label via corresponding property or named slot.
   *
   * @polymerMixin
   * @mixes SlotMixin
   */
  var LabelMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_ControllerMixin) {
      babelHelpers.inherits(LabelMixinClass, _ControllerMixin);

      var _super = _createSuper(LabelMixinClass);

      function LabelMixinClass() {
        var _this;

        babelHelpers.classCallCheck(this, LabelMixinClass);
        _this = _super.call(this);
        _this._labelController = new _labelController.LabelController(babelHelpers.assertThisInitialized(_this));

        _this.addController(_this._labelController);

        return _this;
      }
      /** @protected */


      babelHelpers.createClass(LabelMixinClass, [{
        key: "_labelId",
        get:
        /** @protected */
        function get() {
          return this._labelController.labelId;
        }
        /** @protected */

      }, {
        key: "_labelNode",
        get: function get() {
          return this._labelController.node;
        }
      }, {
        key: "_labelChanged",
        value: function _labelChanged(label) {
          this._labelController.setLabel(label);
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * The label text for the input node.
             * When no light dom defined via [slot=label], this value will be used.
             */
            label: {
              type: String,
              observer: '_labelChanged'
            }
          };
        }
      }]);
      return LabelMixinClass;
    }((0, _controllerMixin.ControllerMixin)(superclass));
  });
  _exports.LabelMixin = LabelMixin;
});