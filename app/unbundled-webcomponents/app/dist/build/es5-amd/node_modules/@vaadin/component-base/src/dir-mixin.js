define(["exports", "./dir-helper.js"], function (_exports, _dirHelper) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DirMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Array of Vaadin custom element classes that have been subscribed to the dir changes.
   */
  var directionSubscribers = [];

  var directionUpdater = function directionUpdater() {
    var documentDir = getDocumentDir();
    directionSubscribers.forEach(function (element) {
      alignDirs(element, documentDir);
    });
  };

  var scrollType;
  var directionObserver = new MutationObserver(directionUpdater);
  directionObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['dir']
  });

  var alignDirs = function alignDirs(element, documentDir) {
    var elementDir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.getAttribute('dir');

    if (documentDir) {
      element.setAttribute('dir', documentDir);
    } else if (elementDir != null) {
      element.removeAttribute('dir');
    }
  };

  var getDocumentDir = function getDocumentDir() {
    return document.documentElement.getAttribute('dir');
  };
  /**
   * A mixin to handle `dir` attribute based on the one set on the `<html>` element.
   *
   * @polymerMixin
   */


  var DirMixin = function DirMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(VaadinDirMixin, _superClass);

      var _super = _createSuper(VaadinDirMixin);

      function VaadinDirMixin() {
        babelHelpers.classCallCheck(this, VaadinDirMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(VaadinDirMixin, [{
        key: "connectedCallback",
        value:
        /** @protected */
        function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "connectedCallback", this).call(this);

          if (!this.hasAttribute('dir')) {
            this.__subscribe();

            alignDirs(this, getDocumentDir(), null);
          }
        }
        /** @protected */

      }, {
        key: "attributeChangedCallback",
        value: function attributeChangedCallback(name, oldValue, newValue) {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "attributeChangedCallback", this).call(this, name, oldValue, newValue);

          if (name !== 'dir') {
            return;
          }

          var documentDir = getDocumentDir(); // New value equals to the document direction and the element is not subscribed to the changes

          var newValueEqlDocDir = newValue === documentDir && directionSubscribers.indexOf(this) === -1; // Value was emptied and the element is not subscribed to the changes

          var newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1; // New value is different and the old equals to document direction and the element is not subscribed to the changes

          var newDiffValue = newValue !== documentDir && oldValue === documentDir;

          if (newValueEqlDocDir || newValueEmptied) {
            this.__subscribe();

            alignDirs(this, documentDir, newValue);
          } else if (newDiffValue) {
            this.__subscribe(false);
          }
        }
        /** @protected */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "disconnectedCallback", this).call(this);

          this.__subscribe(false);

          this.removeAttribute('dir');
        }
        /** @protected */

      }, {
        key: "_valueToNodeAttribute",
        value: function _valueToNodeAttribute(node, value, attribute) {
          // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property
          // If the property contains an empty string then it should not create an empty attribute
          if (attribute === 'dir' && value === '' && !node.hasAttribute('dir')) {
            return;
          }

          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "_valueToNodeAttribute", this).call(this, node, value, attribute);
        }
        /** @protected */

      }, {
        key: "_attributeToProperty",
        value: function _attributeToProperty(attribute, value, type) {
          // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property
          // If the attribute is removed, then the dir property should contain an empty string instead of null
          if (attribute === 'dir' && !value) {
            this.dir = '';
          } else {
            babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "_attributeToProperty", this).call(this, attribute, value, type);
          }
        }
        /** @private */

      }, {
        key: "__subscribe",
        value: function __subscribe() {
          var push = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          if (push) {
            directionSubscribers.indexOf(this) === -1 && directionSubscribers.push(this);
          } else {
            directionSubscribers.indexOf(this) > -1 && directionSubscribers.splice(directionSubscribers.indexOf(this), 1);
          }
        }
        /**
         * @param {Element} element
         * @return {number}
         * @protected
         */

      }, {
        key: "__getNormalizedScrollLeft",
        value: function __getNormalizedScrollLeft(element) {
          return _dirHelper.DirHelper.getNormalizedScrollLeft(scrollType, this.getAttribute('dir') || 'ltr', element);
        }
        /**
         * @param {Element} element
         * @param {number} scrollLeft
         * @protected
         */

      }, {
        key: "__setNormalizedScrollLeft",
        value: function __setNormalizedScrollLeft(element, scrollLeft) {
          return _dirHelper.DirHelper.setNormalizedScrollLeft(scrollType, this.getAttribute('dir') || 'ltr', element, scrollLeft);
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * @protected
             */
            dir: {
              type: String,
              value: '',
              reflectToAttribute: true
            }
          };
        }
        /** @protected */

      }, {
        key: "finalize",
        value: function finalize() {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin), "finalize", this).call(this);

          if (!scrollType) {
            scrollType = _dirHelper.DirHelper.detectScrollType();
          }
        }
      }]);
      return VaadinDirMixin;
    }(superClass);
  };

  _exports.DirMixin = DirMixin;
});