define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../component-base/src/active-mixin.js", "../../component-base/src/controller-mixin.js", "../../component-base/src/element-mixin.js", "../../field-base/src/checked-mixin.js", "../../field-base/src/delegate-focus-mixin.js", "../../field-base/src/input-controller.js", "../../field-base/src/label-mixin.js", "../../field-base/src/labelled-input-controller.js", "../../field-base/src/slot-target-controller.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js"], function (_exports, _polymerElement, _activeMixin, _controllerMixin, _elementMixin, _checkedMixin, _delegateFocusMixin, _inputController, _labelMixin, _labelledInputController, _slotTargetController, _vaadinThemableMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Checkbox = void 0;

  var _templateObject_2a508a10941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-checkbox>` is an input field representing a binary choice.
   *
   * ```html
   * <vaadin-checkbox label="I accept the terms and conditions"></vaadin-checkbox>
   * ```
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name   | Description
   * ------------|----------------
   * `checkbox`  | The wrapper element that contains slotted <input type="checkbox">.
   *
   * The following state attributes are available for styling:
   *
   * Attribute       | Description | Part name
   * ----------------|-------------|--------------
   * `active`        | Set when the checkbox is pressed down, either with mouse, touch or the keyboard. | `:host`
   * `disabled`      | Set when the checkbox is disabled. | `:host`
   * `focus-ring`    | Set when the checkbox is focused using the keyboard. | `:host`
   * `focused`       | Set when the checkbox is focused. | `:host`
   * `indeterminate` | Set when the checkbox is in the indeterminate state. | `:host`
   * `checked`       | Set when the checkbox is checked. | `:host`
   * `has-label`     | Set when the checkbox has a label. | `:host`
   *
   * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.
   *
   * @fires {CustomEvent} checked-changed - Fired when the `checked` property changes.
   * @fires {CustomEvent} indeterminate-changed - Fired when the `indeterminate` property changes.
   *
   * @extends HTMLElement
   * @mixes ControllerMixin
   * @mixes ThemableMixin
   * @mixes ElementMixin
   * @mixes ActiveMixin
   * @mixes DelegateFocusMixin
   * @mixes CheckedMixin
   * @mixes LabelMixin
   */
  var Checkbox = /*#__PURE__*/function (_LabelMixin) {
    babelHelpers.inherits(Checkbox, _LabelMixin);

    var _super = _createSuper(Checkbox);

    function Checkbox() {
      var _this;

      babelHelpers.classCallCheck(this, Checkbox);
      _this = _super.call(this);

      _this._setType('checkbox'); // Set the string "on" as the default value for the checkbox following the HTML specification:
      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on


      _this.value = 'on';
      return _this;
    }
    /** @protected */


    babelHelpers.createClass(Checkbox, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(Checkbox.prototype), "connectedCallback", this).call(this);

        if (!this._inputController) {
          this._inputController = new _inputController.InputController(this, function (input) {
            _this2._setInputElement(input);

            _this2._setFocusElement(input);

            _this2.stateTarget = input;
            _this2.ariaTarget = input;
          });
          this.addController(this._inputController);
          this.addController(new _labelledInputController.LabelledInputController(this.inputElement, this._labelController));
          this.addController(new _slotTargetController.SlotTargetController(this.$.noop, function () {
            return _this2._labelController.node;
          }, function () {
            return _this2.__warnDeprecated();
          }));
        }
      }
      /** @private */

    }, {
      key: "__warnDeprecated",
      value: function __warnDeprecated() {
        console.warn("WARNING: Since Vaadin 22, placing the label as a direct child of a <vaadin-checkbox> is deprecated.\nPlease use <label slot=\"label\"> wrapper or the label property instead.");
      }
      /**
       * Extends the method from `ActiveMixin` in order to
       * prevent setting the `active` attribute when interacting with a link inside the label.
       *
       * @param {Event} event
       * @return {boolean}
       * @protected
       * @override
       */

    }, {
      key: "_shouldSetActive",
      value: function _shouldSetActive(event) {
        if (event.target.localName === 'a') {
          return false;
        }

        return babelHelpers.get(babelHelpers.getPrototypeOf(Checkbox.prototype), "_shouldSetActive", this).call(this, event);
      }
      /**
       * Extends the method from `CheckedMixin` in order to
       * reset the indeterminate state once the user switches the checkbox.
       *
       * @param {boolean} checked
       * @protected
       * @override
       */

    }, {
      key: "_toggleChecked",
      value: function _toggleChecked(checked) {
        if (this.indeterminate) {
          this.indeterminate = false;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(Checkbox.prototype), "_toggleChecked", this).call(this, checked);
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-checkbox';
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2a508a10941811ec8d52c707f928eca0 || (_templateObject_2a508a10941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        :host([disabled]) {\n          -webkit-tap-highlight-color: transparent;\n        }\n\n        .vaadin-checkbox-container {\n          display: grid;\n          grid-template-columns: auto 1fr;\n          align-items: baseline;\n        }\n\n        .vaadin-checkbox-wrapper {\n          position: relative;\n          height: 100%;\n        }\n\n        /* visually hidden */\n        ::slotted(input) {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n          cursor: inherit;\n          margin: 0;\n        }\n      </style>\n      <div class=\"vaadin-checkbox-container\">\n        <div class=\"vaadin-checkbox-wrapper\">\n          <div part=\"checkbox\"></div>\n          <slot name=\"input\"></slot>\n        </div>\n\n        <slot name=\"label\"></slot>\n\n        <div style=\"display: none !important\">\n          <slot id=\"noop\"></slot>\n        </div>\n      </div>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * True if the checkbox is in the indeterminate state which means
           * it is not possible to say whether it is checked or unchecked.
           * The state is reset once the user switches the checkbox by hand.
           *
           * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes
           *
           * @type {boolean}
           */
          indeterminate: {
            type: Boolean,
            notify: true,
            value: false,
            reflectToAttribute: true
          },

          /**
           * The name of the checkbox.
           *
           * @type {string}
           */
          name: {
            type: String,
            value: ''
          }
        };
      }
      /** @override */

    }, {
      key: "delegateProps",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(Checkbox), "delegateProps", this)), ['indeterminate']);
      }
      /** @override */

    }, {
      key: "delegateAttrs",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(Checkbox), "delegateAttrs", this)), ['name']);
      }
    }]);
    return Checkbox;
  }((0, _labelMixin.LabelMixin)((0, _checkedMixin.CheckedMixin)((0, _delegateFocusMixin.DelegateFocusMixin)((0, _activeMixin.ActiveMixin)((0, _elementMixin.ElementMixin)((0, _vaadinThemableMixin.ThemableMixin)((0, _controllerMixin.ControllerMixin)(_polymerElement.PolymerElement))))))));

  _exports.Checkbox = Checkbox;
  customElements.define(Checkbox.is, Checkbox);
});