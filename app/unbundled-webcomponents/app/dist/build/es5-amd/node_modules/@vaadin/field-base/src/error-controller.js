define(["exports", "../../component-base/src/slot-controller.js"], function (_exports, _slotController) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ErrorController = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A controller that manages the error message node content.
   */
  var ErrorController = /*#__PURE__*/function (_SlotController) {
    babelHelpers.inherits(ErrorController, _SlotController);

    var _super = _createSuper(ErrorController);

    function ErrorController(host) {
      var _this;

      babelHelpers.classCallCheck(this, ErrorController);
      return _this = _super.call(this, host, 'error-message', function () {
        return document.createElement('div');
      }, function (_host, node) {
        _this.__updateErrorId(node);

        _this.__updateHasError();
      });
    }
    /**
     * ID attribute value set on the error message element.
     *
     * @return {string}
     */


    babelHelpers.createClass(ErrorController, [{
      key: "errorId",
      get: function get() {
        return this.node && this.node.id;
      }
      /**
       * Set the error message element text content.
       *
       * @param {string} errorMessage
       */

    }, {
      key: "setErrorMessage",
      value: function setErrorMessage(errorMessage) {
        this.errorMessage = errorMessage;

        this.__updateHasError();
      }
      /**
       * Set invalid state for detecting whether to show error message.
       *
       * @param {boolean} invalid
       */

    }, {
      key: "setInvalid",
      value: function setInvalid(invalid) {
        this.invalid = invalid;

        this.__updateHasError();
      }
      /**
       * Override to initialize the newly added custom label.
       *
       * @param {Node} errorNode
       * @protected
       * @override
       */

    }, {
      key: "initCustomNode",
      value: function initCustomNode(errorNode) {
        this.__updateErrorId(errorNode); // Save the custom error message content on the host.


        if (errorNode.textContent && !this.errorMessage) {
          this.errorMessage = errorNode.textContent.trim();
        }

        this.__updateHasError();
      }
      /**
       * Override to cleanup label node when it's removed.
       *
       * @param {Node} node
       * @protected
       * @override
       */

    }, {
      key: "teardownNode",
      value: function teardownNode(node) {
        var errorNode = this.getSlotChild(); // If custom error was removed, restore the default one.

        if (!errorNode && node !== this.defaultNode) {
          errorNode = this.attachDefaultNode(); // Run initializer to update default label and ID.

          this.initNode(errorNode);
        }

        this.__updateHasError();
      }
      /**
       * @param {string} error
       * @private
       */

    }, {
      key: "__isNotEmpty",
      value: function __isNotEmpty(error) {
        return Boolean(error && error.trim() !== '');
      }
      /** @private */

    }, {
      key: "__updateHasError",
      value: function __updateHasError() {
        var errorNode = this.node;
        var hasError = Boolean(this.invalid && this.__isNotEmpty(this.errorMessage)); // Update both default and custom error message node.

        if (errorNode) {
          errorNode.textContent = hasError ? this.errorMessage : '';
          errorNode.hidden = !hasError; // Role alert will make the error message announce immediately
          // as the field becomes invalid

          if (hasError) {
            errorNode.setAttribute('role', 'alert');
          } else {
            errorNode.removeAttribute('role');
          }
        }

        this.host.toggleAttribute('has-error-message', hasError);
      }
      /**
       * @param {HTMLElement} errorNode
       * @private
       */

    }, {
      key: "__updateErrorId",
      value: function __updateErrorId(errorNode) {
        if (!errorNode.id) {
          errorNode.id = this.defaultId;
        }
      }
    }]);
    return ErrorController;
  }(_slotController.SlotController);

  _exports.ErrorController = ErrorController;
});