define(["exports", "../../progress-bar/src/vaadin-progress-bar.js", "./vaadin-upload-icons.js", "../../../@polymer/polymer/polymer-element.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js"], function (_exports, _vaadinProgressBar, _vaadinUploadIcons, _polymerElement, _vaadinThemableMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UploadFile = void 0;

  var _templateObject_2ce62910941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-upload-file>` element represents a file in the file list of `<vaadin-upload>`.
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ---|---
   * `row` | File container
   * `info` | Container for file status icon, file name, status and error messages
   * `done-icon` | File done status icon
   * `warning-icon` | File warning status icon
   * `meta` | Container for file name, status and error messages
   * `name` | File name
   * `error` | Error message, shown when error happens
   * `status` | Status message
   * `commands` | Container for file command icons
   * `start-button` | Start file upload button
   * `retry-button` | Retry file upload button
   * `remove-button` | Remove file button
   * `progress`| Progress bar
   *
   * The following state attributes are available for styling:
   *
   * Attribute | Description | Part name
   * ---|---|---
   * `error` | An error has happened during uploading | `:host`
   * `indeterminate` | Uploading is in progress, but the progress value is unknown | `:host`
   * `uploading` | Uploading is in progress | `:host`
   * `complete` | Uploading has finished successfully | `:host`
   *
   * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.
   *
   * @mixes ThemableMixin
   */
  var UploadFile = /*#__PURE__*/function (_ThemableMixin) {
    babelHelpers.inherits(UploadFile, _ThemableMixin);

    var _super = _createSuper(UploadFile);

    function UploadFile() {
      babelHelpers.classCallCheck(this, UploadFile);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(UploadFile, [{
      key: "_fileAborted",
      value:
      /** @private */
      function _fileAborted(abort) {
        if (abort) {
          this._remove();
        }
      }
      /** @private */

    }, {
      key: "_remove",
      value: function _remove() {
        this.dispatchEvent(new CustomEvent('file-remove', {
          detail: {
            file: this.file
          },
          bubbles: true,
          composed: true
        }));
      }
      /** @private */

    }, {
      key: "_formatProgressValue",
      value: function _formatProgressValue(progress) {
        return progress / 100;
      }
      /** @private */

    }, {
      key: "_fireFileEvent",
      value: function _fireFileEvent(e) {
        e.preventDefault();
        return this.dispatchEvent(new CustomEvent(e.target.getAttribute('file-event'), {
          detail: {
            file: this.file
          },
          bubbles: true,
          composed: true
        }));
      }
      /** @private */

    }, {
      key: "_toggleHostAttribute",
      value: function _toggleHostAttribute(value, attributeName) {
        var shouldHave = Boolean(value);
        var has = this.hasAttribute(attributeName);

        if (has !== shouldHave) {
          if (shouldHave) {
            this.setAttribute(attributeName, '');
          } else {
            this.removeAttribute(attributeName);
          }
        }
      }
      /**
       * Fired when the retry button is pressed. It is listened by `vaadin-upload`
       * which will start a new upload process of this file.
       *
       * @event file-retry
       * @param {Object} detail
       * @param {Object} detail.file file to retry upload of
       */

      /**
       * Fired when the start button is pressed. It is listened by `vaadin-upload`
       * which will start a new upload process of this file.
       *
       * @event file-start
       * @param {Object} detail
       * @param {Object} detail.file file to start upload of
       */

      /**
       * Fired when abort button is pressed. It is listened by `vaadin-upload` which
       * will abort the upload in progress, but will not remove the file from the list
       * to allow the animation to hide the element to be run.
       *
       * @event file-abort
       * @param {Object} detail
       * @param {Object} detail.file file to abort upload of
       */

      /**
       * Fired after the animation to hide the element has finished. It is listened
       * by `vaadin-upload` which will actually remove the file from the upload
       * file list.
       *
       * @event file-remove
       * @param {Object} detail
       * @param {Object} detail.file file to remove from the  upload of
       */

    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2ce62910941811ec8d52c707f928eca0 || (_templateObject_2ce62910941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        [hidden] {\n          display: none;\n        }\n\n        [part='row'] {\n          list-style-type: none;\n        }\n\n        button {\n          background: transparent;\n          padding: 0;\n          border: none;\n          box-shadow: none;\n        }\n      </style>\n\n      <div part=\"row\">\n        <div part=\"info\">\n          <div part=\"done-icon\" hidden$=\"[[!file.complete]]\" aria-hidden=\"true\"></div>\n          <div part=\"warning-icon\" hidden$=\"[[!file.error]]\" aria-hidden=\"true\"></div>\n\n          <div part=\"meta\">\n            <div part=\"name\" id=\"name\">[[file.name]]</div>\n            <div part=\"status\" hidden$=\"[[!file.status]]\" id=\"status\">[[file.status]]</div>\n            <div part=\"error\" id=\"error\" hidden$=\"[[!file.error]]\">[[file.error]]</div>\n          </div>\n        </div>\n        <div part=\"commands\">\n          <button\n            type=\"button\"\n            part=\"start-button\"\n            file-event=\"file-start\"\n            on-click=\"_fireFileEvent\"\n            hidden$=\"[[!file.held]]\"\n            aria-label$=\"[[i18n.file.start]]\"\n            aria-describedby=\"name\"\n          ></button>\n          <button\n            type=\"button\"\n            part=\"retry-button\"\n            file-event=\"file-retry\"\n            on-click=\"_fireFileEvent\"\n            hidden$=\"[[!file.error]]\"\n            aria-label$=\"[[i18n.file.retry]]\"\n            aria-describedby=\"name\"\n          ></button>\n          <button\n            type=\"button\"\n            part=\"remove-button\"\n            file-event=\"file-abort\"\n            on-click=\"_fireFileEvent\"\n            aria-label$=\"[[i18n.file.remove]]\"\n            aria-describedby=\"name\"\n          ></button>\n        </div>\n      </div>\n\n      <vaadin-progress-bar\n        part=\"progress\"\n        id=\"progress\"\n        value$=\"[[_formatProgressValue(file.progress)]]\"\n        error$=\"[[file.error]]\"\n        indeterminate$=\"[[file.indeterminate]]\"\n        uploading$=\"[[file.uploading]]\"\n        complete$=\"[[file.complete]]\"\n      ></vaadin-progress-bar>\n    "])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-upload-file';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          file: Object,
          i18n: Object
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_fileAborted(file.abort)', '_toggleHostAttribute(file.error, "error")', '_toggleHostAttribute(file.indeterminate, "indeterminate")', '_toggleHostAttribute(file.uploading, "uploading")', '_toggleHostAttribute(file.complete, "complete")'];
      }
    }]);
    return UploadFile;
  }((0, _vaadinThemableMixin.ThemableMixin)(_polymerElement.PolymerElement));

  _exports.UploadFile = UploadFile;
  customElements.define(UploadFile.is, UploadFile);
});