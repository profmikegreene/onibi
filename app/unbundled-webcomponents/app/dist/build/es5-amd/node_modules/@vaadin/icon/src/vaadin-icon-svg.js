define(["exports", "../../../lit/index.js", "../../../lit/directive-helpers.js", "../../../lit/directives/unsafe-svg.js"], function (_exports, _index, _directiveHelpers, _unsafeSvg) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cloneSvgNode = cloneSvgNode;
  _exports.ensureSvgLiteral = ensureSvgLiteral;
  _exports.isValidSvg = isValidSvg;
  _exports.renderSvg = renderSvg;
  _exports.unsafeSvgLiteral = unsafeSvgLiteral;

  var _templateObject_2c413680941811ec8d52c707f928eca0, _templateObject2_2c413680941811ec8d52c707f928eca0;

  /**
   * Clone given node and return its content as SVG literal.
   *
   * @param {Element} source
   */
  function cloneSvgNode(source) {
    var result = _index.nothing;

    if (source) {
      var content = source.cloneNode(true);
      content.removeAttribute('id');
      result = (0, _index.svg)(_templateObject_2c413680941811ec8d52c707f928eca0 || (_templateObject_2c413680941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["", ""])), (0, _unsafeSvg.unsafeSVG)(content.innerHTML));
    }

    return result;
  }
  /**
   * Test if the given argument is a valid SVG literal.
   *
   * @param {unknown} source
   */


  function isValidSvg(source) {
    return (0, _directiveHelpers.isTemplateResult)(source, _directiveHelpers.TemplateResultType.SVG) || source === _index.nothing;
  }
  /**
   * Create a valid SVG literal based on the argument.
   *
   * @param {unknown} svg
   */


  function ensureSvgLiteral(source) {
    var result = source == null || source === '' ? _index.nothing : source;

    if (!isValidSvg(result)) {
      console.error('[vaadin-icon] Invalid svg passed, please use Lit svg literal.');
      result = _index.nothing;
    }

    return result;
  }
  /**
   * Render a given SVG literal to the container.
   *
   * @param {unknown} source
   * @param {SVGElement} container
   */


  function renderSvg(source, container) {
    var result = ensureSvgLiteral(source);
    (0, _index.render)(result, container);
  }
  /**
   * Create an SVG literal from source string.
   *
   * @param {string} source
   */


  function unsafeSvgLiteral(source) {
    return (0, _index.svg)(_templateObject2_2c413680941811ec8d52c707f928eca0 || (_templateObject2_2c413680941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["", ""])), (0, _unsafeSvg.unsafeSVG)(source));
  }
});