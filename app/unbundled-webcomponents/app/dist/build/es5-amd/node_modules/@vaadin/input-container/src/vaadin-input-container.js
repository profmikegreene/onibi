define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../component-base/src/dir-mixin.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js"], function (_exports, _polymerElement, _dirMixin, _vaadinThemableMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InputContainer = void 0;

  var _templateObject_2c48d7a0941811ec8d52c707f928eca0, _templateObject2_2c48d7a0941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var InputContainer = /*#__PURE__*/function (_ThemableMixin) {
    babelHelpers.inherits(InputContainer, _ThemableMixin);

    var _super = _createSuper(InputContainer);

    function InputContainer() {
      babelHelpers.classCallCheck(this, InputContainer);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(InputContainer, [{
      key: "ready",
      value:
      /** @protected */
      function ready() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(InputContainer.prototype), "ready", this).call(this);
        this.addEventListener('pointerdown', function (event) {
          if (event.target === _this) {
            // Prevent direct clicks to the input container from blurring the input
            event.preventDefault();
          }
        });
        this.addEventListener('click', function (event) {
          if (event.target === _this) {
            // The vaadin-input-container element was directly clicked,
            // focus any focusable child element from the default slot
            _this.shadowRoot.querySelector('slot:not([name])').assignedNodes({
              flatten: true
            }).forEach(function (node) {
              return node.focus && node.focus();
            });
          }
        });
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-input-container';
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2c48d7a0941811ec8d52c707f928eca0 || (_templateObject_2c48d7a0941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          align-items: center;\n          flex: 0 1 auto;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Reset the native input styles */\n        ::slotted(input) {\n          -webkit-appearance: none;\n          -moz-appearance: none;\n          flex: auto;\n          white-space: nowrap;\n          overflow: hidden;\n          width: 100%;\n          height: 100%;\n          outline: none;\n          margin: 0;\n          padding: 0;\n          border: 0;\n          border-radius: 0;\n          min-width: 0;\n          font: inherit;\n          line-height: normal;\n          color: inherit;\n          background-color: transparent;\n          /* Disable default invalid style in Firefox */\n          box-shadow: none;\n        }\n\n        ::slotted(*) {\n          flex: none;\n        }\n\n        ::slotted(:is(input, textarea))::placeholder {\n          /* Use ::slotted(input:placeholder-shown) in themes to style the placeholder. */\n          /* because ::slotted(...)::placeholder does not work in Safari. */\n          /* See the workaround at the end of this file. */\n          font: inherit;\n          color: inherit;\n          /* Override default opacity in Firefox */\n          opacity: 1;\n        }\n      </style>\n      <slot name=\"prefix\"></slot>\n      <slot></slot>\n      <slot name=\"suffix\"></slot>\n    "])));
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * If true, the user cannot interact with this element.
           */
          disabled: {
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * Set to true to make this element read-only.
           */
          readonly: {
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * Set to true when the element is invalid.
           */
          invalid: {
            type: Boolean,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return InputContainer;
  }((0, _vaadinThemableMixin.ThemableMixin)((0, _dirMixin.DirMixin)(_polymerElement.PolymerElement)));

  _exports.InputContainer = InputContainer;
  customElements.define(InputContainer.is, InputContainer);
  var placeholderStyleWorkaround = (0, _vaadinThemableMixin.css)(_templateObject2_2c48d7a0941811ec8d52c707f928eca0 || (_templateObject2_2c48d7a0941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n  /* Needed for Safari, where ::slotted(...)::placeholder does not work */\n  :is(input[slot='input'], textarea[slot='textarea'])::placeholder {\n    font: inherit;\n    color: inherit;\n  }\n"])));
  var $tpl = document.createElement('template');
  $tpl.innerHTML = "<style>".concat(placeholderStyleWorkaround.toString(), "</style>");
  document.head.appendChild($tpl.content);
});