define(["exports", "../color.js", "../font-icons.js", "../typography.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js", "./field-button.js", "./helper.js", "./required-field.js"], function (_exports, _color, _fontIcons, _typography, _vaadinThemableMixin, _fieldButton, _helper, _requiredField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.inputFieldShared = _exports.inputField = void 0;

  var _templateObject_2d06d070941811ec8d52c707f928eca0;

  var inputField = (0, _vaadinThemableMixin.css)(_templateObject_2d06d070941811ec8d52c707f928eca0 || (_templateObject_2d06d070941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n  :host {\n    display: inline-flex;\n    position: relative;\n    padding-top: 8px;\n    margin-bottom: 8px;\n    outline: none;\n    color: var(--material-body-text-color);\n    font-size: var(--material-body-font-size);\n    line-height: 24px;\n    font-family: var(--material-font-family);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  :host::before {\n    line-height: 32px;\n  }\n\n  /* Strange gymnastics to make fields vertically align nicely in most cases\n     (no label, with label, without prefix, with prefix, etc.) */\n\n  :host([has-label]) {\n    padding-top: 24px;\n  }\n\n  [part='input-field'] {\n    position: relative;\n    top: -0.2px; /* NOTE(platosha): Adjusts for wrong flex baseline in Chrome & Safari */\n    height: 32px;\n    padding-left: 0;\n    padding-right: 0;\n    background-color: transparent;\n    margin: 0;\n  }\n\n  [part='input-field']::before,\n  [part='input-field']::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    transform-origin: 50% 0%;\n    background-color: var(--_material-text-field-input-line-background-color, #000);\n    opacity: var(--_material-text-field-input-line-opacity, 0.42);\n  }\n\n  [part='input-field']::after {\n    background-color: var(--material-primary-color);\n    opacity: 0;\n    height: 2px;\n    bottom: 0;\n    transform: scaleX(0);\n    transition: opacity 0.175s;\n  }\n\n  :host([disabled]) [part='label'],\n  :host([disabled]) [part='input-field'] ::slotted(:is(input, textarea)) {\n    color: var(--material-disabled-text-color);\n    -webkit-text-fill-color: var(--material-disabled-text-color);\n  }\n\n  [part='input-field'] ::slotted(:is(input, textarea)) {\n    outline: none;\n    margin: 0;\n    border: 0;\n    border-radius: 0;\n    padding: 8px 0;\n    width: 100%;\n    height: 100%;\n    font-family: inherit;\n    font-size: 1em;\n    line-height: inherit;\n    color: inherit;\n    background-color: transparent;\n    /* Disable default invalid style in Firefox */\n    box-shadow: none;\n  }\n\n  /* TODO: the text opacity should be 42%, but the disabled style is 38%.\n  Would need to introduce another property for it if we want to be 100% accurate. */\n  ::slotted(:is(input, textarea):placeholder-shown) {\n    color: var(--material-disabled-text-color);\n    transition: opacity 0.175s 0.1s;\n  }\n\n  /* prettier-ignore */\n  :host([has-label]:not([focused]):not([invalid]):not([theme='always-float-label'])) ::slotted(:is(input, textarea):placeholder-shown) {\n    opacity: 0;\n    transition-delay: 0;\n  }\n\n  [part='label'] {\n    width: 133%;\n    transition: transform 0.175s, color 0.175s, width 0.175s;\n    transition-timing-function: ease, ease, step-end;\n  }\n\n  :host(:hover:not([readonly]):not([invalid])) [part='input-field']::before {\n    opacity: var(--_material-text-field-input-line-hover-opacity, 0.87);\n  }\n\n  :host([focused]:not([invalid])) [part='label'] {\n    color: var(--material-primary-text-color);\n  }\n\n  :host([focused]) [part='input-field']::after,\n  :host([invalid]) [part='input-field']::after {\n    opacity: 1;\n    transform: none;\n    transition: transform 0.175s, opacity 0.175s;\n  }\n\n  :host([invalid]) [part='input-field']::after {\n    background-color: var(--material-error-color);\n  }\n\n  :host([input-prevented]) [part='input-field'] {\n    color: var(--material-error-text-color);\n  }\n\n  :host([disabled]) {\n    pointer-events: none;\n  }\n\n  :host([disabled]) [part='input-field'] {\n    color: var(--material-disabled-text-color);\n  }\n\n  :host([disabled]) [part='input-field']::before {\n    background-color: transparent;\n    background-image: linear-gradient(\n      90deg,\n      var(--_material-text-field-input-line-background-color, #000) 0,\n      var(--_material-text-field-input-line-background-color, #000) 2px,\n      transparent 2px\n    );\n    background-size: 4px 1px;\n    background-repeat: repeat-x;\n  }\n\n  /* Only target the visible floating label */\n  :host([has-label]:not([has-value]):not([focused]):not([invalid]):not([theme~='always-float-label'])) [part='label'] {\n    width: 100%;\n    transform: scale(1) translateY(24px);\n    transition-timing-function: ease, ease, step-start;\n    pointer-events: none;\n    left: auto;\n    right: auto;\n    transition-delay: 0.1s;\n  }\n\n  /* Slotted content */\n  [part='input-field'] ::slotted(*:not([part$='-button']):not(input):not(textarea)) {\n    color: var(--material-secondary-text-color);\n  }\n\n  [part='clear-button']::before {\n    content: var(--material-icons-clear);\n  }\n\n  /* RTL specific styles */\n\n  :host([disabled][dir='rtl']) [part='input-field']::before {\n    background-image: linear-gradient(\n      -90deg,\n      var(--_material-text-field-input-line-background-color, #000) 0,\n      var(--_material-text-field-input-line-background-color, #000) 2px,\n      transparent 2px\n    );\n  }\n"])));
  _exports.inputField = inputField;
  var inputFieldShared = [_requiredField.requiredField, _fieldButton.fieldButton, _helper.helper, inputField];
  _exports.inputFieldShared = inputFieldShared;
  (0, _vaadinThemableMixin.registerStyles)('', inputFieldShared, {
    moduleId: 'material-input-field-shared-styles'
  });
});