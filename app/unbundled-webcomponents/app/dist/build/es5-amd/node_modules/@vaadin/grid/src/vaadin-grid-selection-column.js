define(["exports", "../../checkbox/src/vaadin-checkbox.js", "./vaadin-grid-column.js"], function (_exports, _vaadinCheckbox, _vaadinGridColumn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridSelectionColumn = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-selection-column>` is a helper element for the `<vaadin-grid>`
   * that provides default renderers and functionality for item selection.
   *
   * #### Example:
   * ```html
   * <vaadin-grid items="[[items]]">
   *  <vaadin-grid-selection-column frozen auto-select></vaadin-grid-selection-column>
   *
   *  <vaadin-grid-column>
   *    ...
   * ```
   *
   * By default the selection column displays `<vaadin-checkbox>` elements in the
   * column cells. The checkboxes in the body rows toggle selection of the corresponding row items.
   *
   * When the grid data is provided as an array of [`items`](#/elements/vaadin-grid#property-items),
   * the column header gets an additional checkbox that can be used for toggling
   * selection for all the items at once.
   *
   * __The default content can also be overridden__
   *
   * @fires {CustomEvent} select-all-changed - Fired when the `selectAll` property changes.
   */
  var GridSelectionColumn = /*#__PURE__*/function (_GridColumn) {
    babelHelpers.inherits(GridSelectionColumn, _GridColumn);

    var _super = _createSuper(GridSelectionColumn);

    function GridSelectionColumn() {
      var _this;

      babelHelpers.classCallCheck(this, GridSelectionColumn);
      _this = _super.call(this);
      _this.__boundOnActiveItemChanged = _this.__onActiveItemChanged.bind(babelHelpers.assertThisInitialized(_this));
      _this.__boundOnDataProviderChanged = _this.__onDataProviderChanged.bind(babelHelpers.assertThisInitialized(_this));
      _this.__boundOnSelectedItemsChanged = _this.__onSelectedItemsChanged.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /** @protected */


    babelHelpers.createClass(GridSelectionColumn, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this._grid.removeEventListener('active-item-changed', this.__boundOnActiveItemChanged);

        this._grid.removeEventListener('data-provider-changed', this.__boundOnDataProviderChanged);

        this._grid.removeEventListener('filter-changed', this.__boundOnSelectedItemsChanged);

        this._grid.removeEventListener('selected-items-changed', this.__boundOnSelectedItemsChanged);

        babelHelpers.get(babelHelpers.getPrototypeOf(GridSelectionColumn.prototype), "disconnectedCallback", this).call(this);
      }
      /** @protected */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(GridSelectionColumn.prototype), "connectedCallback", this).call(this);

        if (this._grid) {
          this._grid.addEventListener('active-item-changed', this.__boundOnActiveItemChanged);

          this._grid.addEventListener('data-provider-changed', this.__boundOnDataProviderChanged);

          this._grid.addEventListener('filter-changed', this.__boundOnSelectedItemsChanged);

          this._grid.addEventListener('selected-items-changed', this.__boundOnSelectedItemsChanged);
        }
      }
      /**
       * Renders the Select All checkbox to the header cell.
       *
       * @override
       */

    }, {
      key: "_defaultHeaderRenderer",
      value: function _defaultHeaderRenderer(root, _column) {
        var checkbox = root.firstElementChild;

        if (!checkbox) {
          checkbox = document.createElement('vaadin-checkbox');
          checkbox.setAttribute('aria-label', 'Select All');
          checkbox.classList.add('vaadin-grid-select-all-checkbox');
          checkbox.addEventListener('checked-changed', this.__onSelectAllCheckedChanged.bind(this));
          root.appendChild(checkbox);
        }

        var checked = this.__isChecked(this.selectAll, this.__indeterminate);

        checkbox.__rendererChecked = checked;
        checkbox.checked = checked;
        checkbox.hidden = this.__selectAllHidden;
        checkbox.indeterminate = this.__indeterminate;
      }
      /**
       * Renders the Select Row checkbox to the body cell.
       *
       * @override
       */

    }, {
      key: "_defaultRenderer",
      value: function _defaultRenderer(root, _column, _ref) {
        var item = _ref.item,
            selected = _ref.selected;
        var checkbox = root.firstElementChild;

        if (!checkbox) {
          checkbox = document.createElement('vaadin-checkbox');
          checkbox.setAttribute('aria-label', 'Select Row');
          checkbox.addEventListener('checked-changed', this.__onSelectRowCheckedChanged.bind(this));
          root.appendChild(checkbox);
        }

        checkbox.__item = item;
        checkbox.__rendererChecked = selected;
        checkbox.checked = selected;
      }
      /** @private */

    }, {
      key: "__onSelectAllChanged",
      value: function __onSelectAllChanged(selectAll) {
        var _this2 = this;

        if (selectAll === undefined || !this._grid) {
          return;
        }

        if (!this.__selectAllInitialized) {
          // The initial value for selectAll property was applied, avoid clearing pre-selected items
          this.__selectAllInitialized = true;
          return;
        }

        if (this._selectAllChangeLock) {
          return;
        }

        if (selectAll && Array.isArray(this._grid.items)) {
          this.__withFilteredItemsArray(function (items) {
            return _this2._grid.selectedItems = items;
          });
        } else {
          this._grid.selectedItems = [];
        }
      }
      /**
       * Return true if array `a` contains all the items in `b`
       * We need this when sorting or to preserve selection after filtering.
       * @private
       */

    }, {
      key: "__arrayContains",
      value: function __arrayContains(a, b) {
        return Array.isArray(a) && Array.isArray(b) && b.every(function (i) {
          return a.includes(i);
        });
      }
      /**
       * Enables or disables the Select All mode once the Select All checkbox is switched.
       * The listener handles only user-fired events.
       *
       * @private
       */

    }, {
      key: "__onSelectAllCheckedChanged",
      value: function __onSelectAllCheckedChanged(e) {
        // Skip if the state is changed by the renderer.
        if (e.target.checked === e.target.__rendererChecked) {
          return;
        }

        this.selectAll = this.__indeterminate || e.target.checked;
      }
      /**
       * Selects or deselects the row once the Select Row checkbox is switched.
       * The listener handles only user-fired events.
       *
       * @private
       */

    }, {
      key: "__onSelectRowCheckedChanged",
      value: function __onSelectRowCheckedChanged(e) {
        // Skip if the state is changed by the renderer.
        if (e.target.checked === e.target.__rendererChecked) {
          return;
        }

        if (e.target.checked) {
          this._grid.selectItem(e.target.__item);
        } else {
          this._grid.deselectItem(e.target.__item);
        }
      }
      /**
       * iOS needs indeterminated + checked at the same time
       * @private
       */

    }, {
      key: "__isChecked",
      value: function __isChecked(selectAll, indeterminate) {
        return indeterminate || selectAll;
      }
      /** @private */

    }, {
      key: "__onActiveItemChanged",
      value: function __onActiveItemChanged(e) {
        var activeItem = e.detail.value;

        if (this.autoSelect) {
          var item = activeItem || this.__previousActiveItem;

          if (item) {
            this._grid._toggleItem(item);
          }
        }

        this.__previousActiveItem = activeItem;
      }
      /** @private */

    }, {
      key: "__onSelectedItemsChanged",
      value: function __onSelectedItemsChanged() {
        var _this3 = this;

        this._selectAllChangeLock = true;

        if (Array.isArray(this._grid.items)) {
          this.__withFilteredItemsArray(function (items) {
            if (!_this3._grid.selectedItems.length) {
              _this3.selectAll = false;
              _this3.__indeterminate = false;
            } else if (_this3.__arrayContains(_this3._grid.selectedItems, items)) {
              _this3.selectAll = true;
              _this3.__indeterminate = false;
            } else {
              _this3.selectAll = false;
              _this3.__indeterminate = true;
            }
          });
        }

        this._selectAllChangeLock = false;
      }
      /** @private */

    }, {
      key: "__onDataProviderChanged",
      value: function __onDataProviderChanged() {
        this.__selectAllHidden = !Array.isArray(this._grid.items);
      }
      /**
       * Assuming the grid uses an items array data provider, fetches all the filtered items
       * from the data provider and invokes the callback with the resulting array.
       *
       * @private
       */

    }, {
      key: "__withFilteredItemsArray",
      value: function __withFilteredItemsArray(callback) {
        var params = {
          page: 0,
          pageSize: Infinity,
          sortOrders: [],
          filters: this._grid._mapFilters()
        };

        this._grid.dataProvider(params, function (items) {
          return callback(items);
        });
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-grid-selection-column';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Width of the cells for this column.
           */
          width: {
            type: String,
            value: '58px'
          },

          /**
           * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.
           * @attr {number} flex-grow
           * @type {number}
           */
          flexGrow: {
            type: Number,
            value: 0
          },

          /**
           * When true, all the items are selected.
           * @attr {boolean} select-all
           * @type {boolean}
           */
          selectAll: {
            type: Boolean,
            value: false,
            notify: true
          },

          /**
           * When true, the active gets automatically selected.
           * @attr {boolean} auto-select
           * @type {boolean}
           */
          autoSelect: {
            type: Boolean,
            value: false
          },

          /** @private */
          __indeterminate: Boolean,

          /**
           * The previous state of activeItem. When activeItem turns to `null`,
           * previousActiveItem will have an Object with just unselected activeItem
           * @private
           */
          __previousActiveItem: Object,

          /** @private */
          __selectAllHidden: Boolean
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['__onSelectAllChanged(selectAll)', '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header, selectAll, __indeterminate, __selectAllHidden)'];
      }
    }]);
    return GridSelectionColumn;
  }(_vaadinGridColumn.GridColumn);

  _exports.GridSelectionColumn = GridSelectionColumn;
  customElements.define(GridSelectionColumn.is, GridSelectionColumn);
});