define(["exports", "./array-data-provider.js"], function (_exports, _arrayDataProvider) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ArrayDataProviderMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @polymerMixin
   */
  var ArrayDataProviderMixin = function ArrayDataProviderMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(ArrayDataProviderMixin, _superClass);

      var _super = _createSuper(ArrayDataProviderMixin);

      function ArrayDataProviderMixin() {
        babelHelpers.classCallCheck(this, ArrayDataProviderMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(ArrayDataProviderMixin, [{
        key: "__setArrayDataProvider",
        value:
        /** @private */
        function __setArrayDataProvider(items) {
          var arrayDataProvider = (0, _arrayDataProvider.createArrayDataProvider)(this.items, {});
          arrayDataProvider.__items = items;
          this.setProperties({
            _arrayDataProvider: arrayDataProvider,
            size: items.length,
            dataProvider: arrayDataProvider
          });
        }
        /** @private */

      }, {
        key: "__dataProviderOrItemsChanged",
        value: function __dataProviderOrItemsChanged(dataProvider, items, isAttached) {
          if (!isAttached) {
            return;
          }

          if (this._arrayDataProvider) {
            // Has an items array data provider beforehand
            if (dataProvider !== this._arrayDataProvider) {
              // A custom data provider was set externally
              this.setProperties({
                _arrayDataProvider: undefined,
                items: undefined
              });
            } else if (!items) {
              // The items array was unset
              this.setProperties({
                _arrayDataProvider: undefined,
                dataProvider: undefined,
                size: 0
              });
              this.clearCache();
            } else if (this._arrayDataProvider.__items === items) {
              // The items array was modified
              this.clearCache();
              this.size = this._effectiveSize;
            } else {
              // The items array was replaced
              this.__setArrayDataProvider(items);
            }
          } else if (items) {
            // There was no array data provider before items was set
            this.__setArrayDataProvider(items);
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * An array containing the items which will be passed to renderer functions.
             *
             * @type {Array<!GridItem> | undefined}
             */
            items: Array
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['__dataProviderOrItemsChanged(dataProvider, items, isAttached, items.*, _filters, _sorters)'];
        }
      }]);
      return ArrayDataProviderMixin;
    }(superClass);
  };

  _exports.ArrayDataProviderMixin = ArrayDataProviderMixin;
});