define(["exports", "./virtualizer-iron-list-adapter.js"], function (_exports, _virtualizerIronListAdapter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Virtualizer = void 0;

  var Virtualizer = /*#__PURE__*/function () {
    /**
     * @typedef {Object} VirtualizerConfig
     * @property {Function} createElements Function that returns the given number of new elements
     * @property {Function} updateElement Function that updates the element at a specific index
     * @property {HTMLElement} scrollTarget Reference to the scrolling element
     * @property {HTMLElement} scrollContainer Reference to a wrapper for the item elements (or a slot) inside the scrollTarget
     * @property {HTMLElement | undefined} elementsContainer Reference to the container in which the item elements are placed, defaults to scrollContainer
     * @property {boolean | undefined} reorderElements Determines whether the physical item elements should be kept in order in the DOM
     * @param {VirtualizerConfig} config Configuration for the virtualizer
     */
    function Virtualizer(config) {
      babelHelpers.classCallCheck(this, Virtualizer);
      this.__adapter = new _virtualizerIronListAdapter.IronListAdapter(config);
    }
    /**
     * The size of the virtualizer
     * @param {number} size The size of the virtualizer
     */


    babelHelpers.createClass(Virtualizer, [{
      key: "size",
      get:
      /**
       * The size of the virtualizer
       * @return {number | undefined} The size of the virtualizer
       */
      function get() {
        return this.__adapter.size;
      }
      /**
       * Scroll to a specific index in the virtual list
       *
       * @method scrollToIndex
       * @param {number} index The index of the item
       */
      ,
      set: function set(size) {
        this.__adapter.size = size;
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(index) {
        this.__adapter.scrollToIndex(index);
      }
      /**
       * Requests the virtualizer to re-render the item elements on an index range, if currently in the DOM
       *
       * @method update
       * @param {number | undefined} startIndex The start index of the range
       * @param {number | undefined} endIndex The end index of the range
       */

    }, {
      key: "update",
      value: function update() {
        var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size - 1;

        this.__adapter.update(startIndex, endIndex);
      }
      /**
       * Flushes active asynchronous tasks so that the component and the DOM end up in a stable state
       *
       * @method update
       * @param {number | undefined} startIndex The start index of the range
       * @param {number | undefined} endIndex The end index of the range
       */

    }, {
      key: "flush",
      value: function flush() {
        this.__adapter.flush();
      }
      /**
       * Gets the index of the first visible item in the viewport.
       *
       * @return {number}
       */

    }, {
      key: "firstVisibleIndex",
      get: function get() {
        return this.__adapter.adjustedFirstVisibleIndex;
      }
      /**
       * Gets the index of the last visible item in the viewport.
       *
       * @return {number}
       */

    }, {
      key: "lastVisibleIndex",
      get: function get() {
        return this.__adapter.adjustedLastVisibleIndex;
      }
    }]);
    return Virtualizer;
  }();

  _exports.Virtualizer = Virtualizer;
});