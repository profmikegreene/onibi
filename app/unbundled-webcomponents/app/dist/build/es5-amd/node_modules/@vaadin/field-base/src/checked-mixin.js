define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js", "../../component-base/src/disabled-mixin.js", "./delegate-state-mixin.js", "./input-mixin.js"], function (_exports, _mixin, _disabledMixin, _delegateStateMixin, _inputMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CheckedMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to manage the checked state.
   *
   * @polymerMixin
   * @mixes DelegateStateMixin
   * @mixes DisabledMixin
   * @mixes InputMixin
   */
  var CheckedMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_DelegateStateMixin) {
      babelHelpers.inherits(CheckedMixinClass, _DelegateStateMixin);

      var _super = _createSuper(CheckedMixinClass);

      function CheckedMixinClass() {
        babelHelpers.classCallCheck(this, CheckedMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(CheckedMixinClass, [{
        key: "_onChange",
        value:
        /**
         * @protected
         * @override
         */
        function _onChange(event) {
          this._toggleChecked(event.target.checked);
        }
        /** @protected */

      }, {
        key: "_toggleChecked",
        value: function _toggleChecked(checked) {
          this.checked = checked;
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * True if the element is checked.
             * @type {boolean}
             */
            checked: {
              type: Boolean,
              value: false,
              notify: true,
              reflectToAttribute: true
            }
          };
        }
      }, {
        key: "delegateProps",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(CheckedMixinClass), "delegateProps", this)), ['checked']);
        }
      }]);
      return CheckedMixinClass;
    }((0, _delegateStateMixin.DelegateStateMixin)((0, _disabledMixin.DisabledMixin)((0, _inputMixin.InputMixin)(superclass))));
  });
  _exports.CheckedMixin = CheckedMixin;
});