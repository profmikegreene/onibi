define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../component-base/src/element-mixin.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js", "./vaadin-icon-svg.js", "./vaadin-iconset.js"], function (_exports, _polymerElement, _elementMixin, _vaadinThemableMixin, _vaadinIconSvg, _vaadinIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Icon = void 0;

  var _templateObject_2c4443c0941811ec8d52c707f928eca0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var DEFAULT_ICONSET = 'vaadin';
  /**
   * `<vaadin-icon>` is a Web Component for displaying SVG icons.
   *
   * ### Icon property
   *
   * The `<vaadin-icon>` component is designed to be used as a drop-in replacement for `<iron-icon>`.
   * For example, you can use it with `vaadin-icons` like this:
   *
   * ```html
   * <vaadin-icon icon="vaadin:angle-down"></vaadin-icon>
   * ```
   *
   * Alternatively, you can also pick one of the Lumo icons:
   *
   * ```html
   * <vaadin-icon icon="lumo:user"></vaadin-icon>
   * ```
   *
   * ### Custom SVG icon
   *
   * Alternatively, instead of selecting an icon from an iconset by name, you can pass any custom `svg`
   * literal using the [`svg`](#/elements/vaadin-icon#property-svg) property. In this case you can also
   * define the size of the SVG `viewBox` using the [`size`](#/elements/vaadin-icon#property-size) property:
   *
   * ```js
   * import { html, svg } from 'lit';
   *
   * // in your component
   * render() {
   *   const svgIcon = svg`<path d="M13 4v2l-5 5-5-5v-2l5 5z"></path>`;
   *   return html`
   *     <vaadin-icon
   *       .svg="${svgIcon}"
   *       size="16"
   *     ></vaadin-icon>
   *   `;
   * }
   * ```
   *
   * @extends HTMLElement
   * @mixes ThemableMixin
   * @mixes ElementMixin
   */

  var Icon = /*#__PURE__*/function (_ThemableMixin) {
    babelHelpers.inherits(Icon, _ThemableMixin);

    var _super = _createSuper(Icon);

    function Icon() {
      var _this;

      babelHelpers.classCallCheck(this, Icon);
      _this = _super.call(this);
      _this.__onIconsetRegistered = _this.__onIconsetRegistered.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /** @protected */


    babelHelpers.createClass(Icon, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(Icon.prototype), "ready", this).call(this);
        this.__svgElement = this.shadowRoot.querySelector('svg');
      }
      /** @private */

    }, {
      key: "__getIconsetName",
      value: function __getIconsetName(icon) {
        if (!icon) {
          return;
        }

        var parts = icon.split(':');
        return parts[0] || DEFAULT_ICONSET;
      }
      /** @private */

    }, {
      key: "__onIconsetRegistered",
      value: function __onIconsetRegistered(e) {
        if (e.detail === this.__getIconsetName(this.icon)) {
          this.__iconChanged(this.icon);
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(Icon.prototype), "connectedCallback", this).call(this);
        document.addEventListener('vaadin-iconset-registered', this.__onIconsetRegistered);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(Icon.prototype), "disconnectedCallback", this).call(this);
        document.removeEventListener('vaadin-iconset-registered', this.__onIconsetRegistered);
      }
      /** @private */

    }, {
      key: "__iconChanged",
      value: function __iconChanged(icon) {
        if (icon) {
          this.__checkDeprecatedIcon(icon);

          var iconsetName = this.__getIconsetName(icon);

          var iconset = _vaadinIconset.Iconset.getIconset(iconsetName);

          var _iconset$applyIcon = iconset.applyIcon(icon),
              svg = _iconset$applyIcon.svg,
              size = _iconset$applyIcon.size;

          if (size !== this.size) {
            this.size = size;
          }

          this.svg = svg;
        } else {
          this.svg = (0, _vaadinIconSvg.ensureSvgLiteral)(null);
        }
      }
      /** @private */

    }, {
      key: "__checkDeprecatedIcon",
      value: function __checkDeprecatedIcon(icon) {
        var deprecatedIcons = {
          'vaadin:buss': 'vaadin:bus',
          'vaadin:funcion': 'vaadin:function',
          'vaadin:megafone': 'vaadin:megaphone',
          'vaadin:palete': 'vaadin:palette',
          'vaadin:trendind-down': 'vaadin:trending-down'
        };

        if (icon in deprecatedIcons) {
          console.warn("WARNING: The icon \"".concat(icon, "\" is deprecated. Use \"").concat(deprecatedIcons[icon], "\" instead"));
        }
      }
      /** @private */

    }, {
      key: "__svgChanged",
      value: function __svgChanged(svg, svgElement) {
        if (!svgElement) {
          return;
        }

        (0, _vaadinIconSvg.renderSvg)(svg, svgElement);
      }
      /** @private */

    }, {
      key: "__computeViewBox",
      value: function __computeViewBox(size) {
        return "0 0 ".concat(size, " ").concat(size);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2c4443c0941811ec8d52c707f928eca0 || (_templateObject_2c4443c0941811ec8d52c707f928eca0 = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          box-sizing: border-box;\n          vertical-align: middle;\n          width: 24px;\n          height: 24px;\n          fill: currentColor;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        svg {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n      </style>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"[[__computeViewBox(size)]]\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        aria-hidden=\"true\"\n      ></svg>\n    "])));
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-icon';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The name of the icon to use. The name should be of the form:
           * `iconset_name:icon_name`. When using `vaadin-icons` it is possible
           * to omit the first part and only use `icon_name` as a value.
           *
           * Setting the `icon` property updates the `svg` and `size` based on the
           * values provided by the corresponding `vaadin-iconset` element.
           *
           * See also [`name`](#/elements/vaadin-iconset#property-name) property of `vaadin-iconset`.
           */
          icon: {
            type: String,
            observer: '__iconChanged'
          },

          /**
           * The SVG icon wrapped in a Lit template literal.
           */
          svg: {
            type: Object
          },

          /**
           * The size of an icon, used to set the `viewBox` attribute.
           */
          size: {
            type: Number,
            value: 24
          },

          /** @private */
          __svgElement: Object
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['__svgChanged(svg, __svgElement)'];
      }
    }]);
    return Icon;
  }((0, _vaadinThemableMixin.ThemableMixin)((0, _elementMixin.ElementMixin)(_polymerElement.PolymerElement)));

  _exports.Icon = Icon;
  customElements.define(Icon.is, Icon);
});