define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FieldAriaController = void 0;

  /**
   * @license
   * Copyright (c) 2021 - 2022 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   */

  /**
   * A controller for managing ARIA attributes for a field element:
   * either the component itself or slotted `<input>` element.
   */
  var FieldAriaController = /*#__PURE__*/function () {
    function FieldAriaController(host) {
      babelHelpers.classCallCheck(this, FieldAriaController);
      this.host = host;
      this.__required = false;
    }
    /**
     * Sets a target element to which ARIA attributes are added.
     *
     * @param {HTMLElement} target
     */


    babelHelpers.createClass(FieldAriaController, [{
      key: "setTarget",
      value: function setTarget(target) {
        this.__target = target;

        this.__setAriaRequiredAttribute(this.__required);

        this.__setLabelIdToAriaAttribute(this.__labelId);

        this.__setErrorIdToAriaAttribute(this.__errorId);

        this.__setHelperIdToAriaAttribute(this.__helperId);
      }
      /**
       * Toggles the `aria-required` attribute on the target element
       * if the target is the host component (e.g. a field group).
       * Otherwise, it does nothing.
       *
       * @param {boolean} required
       */

    }, {
      key: "setRequired",
      value: function setRequired(required) {
        this.__setAriaRequiredAttribute(required);

        this.__required = required;
      }
      /**
       * Links the target element with a slotted label element
       * via the target's attribute `aria-labelledby`.
       *
       * To unlink the previous slotted label element, pass `null` as `labelId`.
       *
       * @param {string | null} labelId
       */

    }, {
      key: "setLabelId",
      value: function setLabelId(labelId) {
        this.__setLabelIdToAriaAttribute(labelId, this.__labelId);

        this.__labelId = labelId;
      }
      /**
       * Links the target element with a slotted error element via the target's attribute:
       * - `aria-labelledby` if the target is the host component (e.g a field group).
       * - `aria-describedby` otherwise.
       *
       * To unlink the previous slotted error element, pass `null` as `errorId`.
       *
       * @param {string | null} errorId
       */

    }, {
      key: "setErrorId",
      value: function setErrorId(errorId) {
        this.__setErrorIdToAriaAttribute(errorId, this.__errorId);

        this.__errorId = errorId;
      }
      /**
       * Links the target element with a slotted helper element via the target's attribute:
       * - `aria-labelledby` if the target is the host component (e.g a field group).
       * - `aria-describedby` otherwise.
       *
       * To unlink the previous slotted helper element, pass `null` as `helperId`.
       *
       * @param {string | null} helperId
       */

    }, {
      key: "setHelperId",
      value: function setHelperId(helperId) {
        this.__setHelperIdToAriaAttribute(helperId, this.__helperId);

        this.__helperId = helperId;
      }
      /**
       * `true` if the target element is the host component itself, `false` otherwise.
       *
       * @return {boolean}
       * @private
       */

    }, {
      key: "__isGroupField",
      get: function get() {
        return this.__target === this.host;
      }
      /**
       * @param {string | null | undefined} labelId
       * @param {string | null | undefined} oldLabelId
       * @private
       */

    }, {
      key: "__setLabelIdToAriaAttribute",
      value: function __setLabelIdToAriaAttribute(labelId, oldLabelId) {
        this.__setAriaAttributeId('aria-labelledby', labelId, oldLabelId);
      }
      /**
       * @param {string | null | undefined} errorId
       * @param {string | null | undefined} oldErrorId
       * @private
       */

    }, {
      key: "__setErrorIdToAriaAttribute",
      value: function __setErrorIdToAriaAttribute(errorId, oldErrorId) {
        // For groups, add all IDs to aria-labelledby rather than aria-describedby -
        // that should guarantee that it's announced when the group is entered.
        if (this.__isGroupField) {
          this.__setAriaAttributeId('aria-labelledby', errorId, oldErrorId);
        } else {
          this.__setAriaAttributeId('aria-describedby', errorId, oldErrorId);
        }
      }
      /**
       * @param {string | null | undefined} helperId
       * @param {string | null | undefined} oldHelperId
       * @private
       */

    }, {
      key: "__setHelperIdToAriaAttribute",
      value: function __setHelperIdToAriaAttribute(helperId, oldHelperId) {
        // For groups, add all IDs to aria-labelledby rather than aria-describedby -
        // that should guarantee that it's announced when the group is entered.
        if (this.__isGroupField) {
          this.__setAriaAttributeId('aria-labelledby', helperId, oldHelperId);
        } else {
          this.__setAriaAttributeId('aria-describedby', helperId, oldHelperId);
        }
      }
      /**
       * @param {boolean} required
       * @private
       */

    }, {
      key: "__setAriaRequiredAttribute",
      value: function __setAriaRequiredAttribute(required) {
        if (!this.__target) {
          return;
        }

        if (!this.__isGroupField) {
          // native <input> or <textarea>, required is enough
          return;
        }

        if (required) {
          this.__target.setAttribute('aria-required', 'true');
        } else {
          this.__target.removeAttribute('aria-required');
        }
      }
      /**
       * @param {string | null | undefined} newId
       * @param {string | null | undefined} oldId
       * @private
       */

    }, {
      key: "__setAriaAttributeId",
      value: function __setAriaAttributeId(attr, newId, oldId) {
        if (!this.__target) {
          return;
        }

        var value = this.__target.getAttribute(attr);

        var ids = value ? new Set(value.split(' ')) : new Set();

        if (oldId) {
          ids.delete(oldId);
        }

        if (newId) {
          ids.add(newId);
        }

        this.__target.setAttribute(attr, babelHelpers.toConsumableArray(ids).join(' '));
      }
    }]);
    return FieldAriaController;
  }();

  _exports.FieldAriaController = FieldAriaController;
});