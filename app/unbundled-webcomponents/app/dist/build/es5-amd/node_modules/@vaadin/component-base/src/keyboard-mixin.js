define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.KeyboardMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin that manages keyboard handling.
   * The mixin subscribes to the keyboard events while an actual implementation
   * for the event handlers is left to the client (a component or another mixin).
   *
   * @polymerMixin
   */
  var KeyboardMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_superclass) {
      babelHelpers.inherits(KeyboardMixinClass, _superclass);

      var _super = _createSuper(KeyboardMixinClass);

      function KeyboardMixinClass() {
        babelHelpers.classCallCheck(this, KeyboardMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(KeyboardMixinClass, [{
        key: "ready",
        value:
        /** @protected */
        function ready() {
          var _this = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(KeyboardMixinClass.prototype), "ready", this).call(this);
          this.addEventListener('keydown', function (event) {
            _this._onKeyDown(event);
          });
          this.addEventListener('keyup', function (event) {
            _this._onKeyUp(event);
          });
        }
        /**
         * A handler for the `keydown` event. By default, it does nothing.
         * Override the method to implement your own behavior.
         *
         * @param {KeyboardEvent} _event
         * @protected
         */

      }, {
        key: "_onKeyDown",
        value: function _onKeyDown(_event) {} // To be implemented.

        /**
         * A handler for the `keyup` event. By default, it does nothing.
         * Override the method to implement your own behavior.
         *
         * @param {KeyboardEvent} _event
         * @protected
         */

      }, {
        key: "_onKeyUp",
        value: function _onKeyUp(_event) {// To be implemented.
        }
      }]);
      return KeyboardMixinClass;
    }(superclass);
  });
  _exports.KeyboardMixin = KeyboardMixin;
});