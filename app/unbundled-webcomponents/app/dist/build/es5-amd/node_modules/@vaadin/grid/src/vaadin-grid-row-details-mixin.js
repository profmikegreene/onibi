define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RowDetailsMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @license
   * Copyright (c) 2016 - 2022 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   */

  /**
   * @polymerMixin
   */
  var RowDetailsMixin = function RowDetailsMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(RowDetailsMixin, _superClass);

      var _super = _createSuper(RowDetailsMixin);

      function RowDetailsMixin() {
        babelHelpers.classCallCheck(this, RowDetailsMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(RowDetailsMixin, [{
        key: "ready",
        value:
        /** @protected */
        function ready() {
          var _this = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(RowDetailsMixin.prototype), "ready", this).call(this);
          this._detailsCellResizeObserver = new ResizeObserver(function (entries) {
            entries.forEach(function (_ref) {
              var cell = _ref.target;

              _this._updateDetailsCellHeight(cell.parentElement);
            }); // This workaround is needed until Safari also supports
            // ResizeObserver.observe with {box: 'border-box'}

            _this.__virtualizer.__adapter._resizeHandler();
          });
        }
        /** @private */

      }, {
        key: "_rowDetailsRendererChanged",
        value: function _rowDetailsRendererChanged(rowDetailsRenderer) {
          var _this2 = this;

          if (!rowDetailsRenderer) {
            return;
          }

          if (this._columnTree) {
            // Only update the rows if the column tree has already been initialized
            Array.from(this.$.items.children).forEach(function (row) {
              if (!row.querySelector('[part~=details-cell]')) {
                _this2._updateRow(row, _this2._columnTree[_this2._columnTree.length - 1]);

                var isDetailsOpened = _this2._isDetailsOpened(row._item);

                _this2._toggleDetailsCell(row, isDetailsOpened);
              }
            });
          }
        }
        /** @private */

      }, {
        key: "_detailsOpenedItemsChanged",
        value: function _detailsOpenedItemsChanged(changeRecord, rowDetailsRenderer) {
          var _this3 = this;

          // Skip to avoid duplicate work of both “.splices” and “.length” updates.
          if (changeRecord.path === 'detailsOpenedItems.length' || !changeRecord.value) {
            return;
          }

          babelHelpers.toConsumableArray(this.$.items.children).forEach(function (row) {
            // Re-renders the row to possibly close the previously opened details.
            if (row.hasAttribute('details-opened')) {
              _this3._updateItem(row, row._item);

              return;
            } // Re-renders the row to open the details when a row details renderer is provided.


            if (rowDetailsRenderer && _this3._isDetailsOpened(row._item)) {
              _this3._updateItem(row, row._item);

              return;
            }
          });
        }
        /**
         * @param {!HTMLElement} cell
         * @protected
         */

      }, {
        key: "_configureDetailsCell",
        value: function _configureDetailsCell(cell) {
          cell.setAttribute('part', 'cell details-cell'); // Freeze the details cell, so that it does not scroll horizontally
          // with the normal cells. This way it looks less weird.

          cell.toggleAttribute('frozen', true);

          this._detailsCellResizeObserver.observe(cell);
        }
        /**
         * @param {!HTMLElement} row
         * @param {!GridItem} item
         * @protected
         */

      }, {
        key: "_toggleDetailsCell",
        value: function _toggleDetailsCell(row, detailsOpened) {
          var cell = row.querySelector('[part~="details-cell"]');

          if (!cell) {
            return;
          }

          cell.hidden = !detailsOpened;

          if (cell.hidden) {
            return;
          } // Assigns a renderer when the details cell is opened.
          // The details cell content is rendered later in the `_updateItem` method.


          if (this.rowDetailsRenderer) {
            cell._renderer = this.rowDetailsRenderer;
          }
        }
        /** @protected */

      }, {
        key: "_updateDetailsCellHeight",
        value: function _updateDetailsCellHeight(row) {
          var cell = row.querySelector('[part~="details-cell"]');

          if (!cell) {
            return;
          }

          if (cell.hidden) {
            row.style.removeProperty('padding-bottom');
          } else {
            row.style.setProperty('padding-bottom', "".concat(cell.offsetHeight, "px"));
          }
        }
        /** @protected */

      }, {
        key: "_updateDetailsCellHeights",
        value: function _updateDetailsCellHeights() {
          var _this4 = this;

          babelHelpers.toConsumableArray(this.$.items.children).forEach(function (row) {
            _this4._updateDetailsCellHeight(row);
          });
        }
        /**
         * @param {!GridItem} item
         * @return {boolean}
         * @protected
         */

      }, {
        key: "_isDetailsOpened",
        value: function _isDetailsOpened(item) {
          return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;
        }
        /**
         * Open the details row of a given item.
         * @param {!GridItem} item
         */

      }, {
        key: "openItemDetails",
        value: function openItemDetails(item) {
          if (!this._isDetailsOpened(item)) {
            this.detailsOpenedItems = [].concat(babelHelpers.toConsumableArray(this.detailsOpenedItems), [item]);
          }
        }
        /**
         * Close the details row of a given item.
         * @param {!GridItem} item
         */

      }, {
        key: "closeItemDetails",
        value: function closeItemDetails(item) {
          var _this5 = this;

          if (this._isDetailsOpened(item)) {
            this.detailsOpenedItems = this.detailsOpenedItems.filter(function (i) {
              return !_this5._itemsEqual(i, item);
            });
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * An array containing references to items with open row details.
             * @type {!Array<!GridItem>}
             */
            detailsOpenedItems: {
              type: Array,
              value: function value() {
                return [];
              }
            },

            /**
             * Custom function for rendering the content of the row details.
             * Receives three arguments:
             *
             * - `root` The row details content DOM element. Append your content to it.
             * - `grid` The `<vaadin-grid>` element.
             * - `model` The object with the properties related with
             *   the rendered item, contains:
             *   - `model.index` The index of the item.
             *   - `model.item` The item.
             *   - `model.level` The number of the item's tree sublevel, starts from 0.
             *   - `model.expanded` True if the item's tree sublevel is expanded.
             *   - `model.selected` True if the item is selected.
             *
             * @type {GridRowDetailsRenderer | null | undefined}
             */
            rowDetailsRenderer: Function,

            /**
             * @type {!Array<!HTMLElement> | undefined}
             * @protected
             */
            _detailsCells: {
              type: Array
            }
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['_detailsOpenedItemsChanged(detailsOpenedItems.*, rowDetailsRenderer)', '_rowDetailsRendererChanged(rowDetailsRenderer)'];
        }
      }]);
      return RowDetailsMixin;
    }(superClass);
  };

  _exports.RowDetailsMixin = RowDetailsMixin;
});