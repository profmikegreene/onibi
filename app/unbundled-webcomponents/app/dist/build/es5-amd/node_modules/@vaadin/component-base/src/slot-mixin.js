define(["exports", "../../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SlotMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * A mixin to provide content for named slots defined by component.
   *
   * @polymerMixin
   */
  var SlotMixin = (0, _mixin.dedupingMixin)(function (superclass) {
    return /*#__PURE__*/function (_superclass) {
      babelHelpers.inherits(SlotMixinClass, _superclass);

      var _super = _createSuper(SlotMixinClass);

      function SlotMixinClass() {
        babelHelpers.classCallCheck(this, SlotMixinClass);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(SlotMixinClass, [{
        key: "slots",
        get:
        /**
         * List of named slots to initialize.
         * @protected
         */
        function get() {
          return {};
        }
        /** @protected */

      }, {
        key: "ready",
        value: function ready() {
          babelHelpers.get(babelHelpers.getPrototypeOf(SlotMixinClass.prototype), "ready", this).call(this);

          this._connectSlotMixin();
        }
        /** @private */

      }, {
        key: "_connectSlotMixin",
        value: function _connectSlotMixin() {
          var _this = this;

          Object.keys(this.slots).forEach(function (slotName) {
            // Ignore labels of nested components, if any
            var hasContent = _this._getDirectSlotChild(slotName) !== undefined;

            if (!hasContent) {
              var slotFactory = _this.slots[slotName];
              var slotContent = slotFactory();

              if (babelHelpers.instanceof(slotContent, Element)) {
                slotContent.setAttribute('slot', slotName);

                _this.appendChild(slotContent);
              }
            }
          });
        }
        /** @protected */

      }, {
        key: "_getDirectSlotChild",
        value: function _getDirectSlotChild(slotName) {
          return Array.from(this.children).find(function (el) {
            return el.slot === slotName;
          });
        }
      }]);
      return SlotMixinClass;
    }(superclass);
  });
  _exports.SlotMixin = SlotMixin;
});