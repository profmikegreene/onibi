/* eslint-env node */
'use strict';

var gulp = require('gulp');

var iconfont = require('gulp-iconfont');

var fs = require('fs');

var svgmin = require('gulp-svgmin');

var sort = require('gulp-sort');
/**
 * Normalize file sort order across platforms (OS X vs Linux, maybe others).
 *
 * Before: `[..., 'eye-disabled', 'eye', ...]`
 * After:  `[..., 'eye', 'eye-disabled', ...]`
 *
 * Order of appearance impacts assigned Unicode codepoints, and sometimes build diffs.
 *
 * @see https://github.com/nfroidure/svgicons2svgfont/pull/82
 * @see https://github.com/nfroidure/svgicons2svgfont/blob/master/src/filesorter.js
 * @see http://support.ecisolutions.com/doc-ddms/help/reportsmenu/ascii_sort_order_chart.htm
 */


function sortIconFilesNormalized(file1, file2) {
  return file1.replace(/-/g, '~').localeCompare(file2.replace(/-/g, '~'), 'en-US');
}

gulp.task('icons', /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var folder, glyphs;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          folder = 'icons/svg/';
          // Optimize the source files
          gulp.src(folder + '*.svg').pipe(svgmin({
            plugins: [{
              removeTitle: true
            }, {
              removeViewBox: false
            }, {
              cleanupNumericValues: {
                floatPrecision: 6
              }
            }, {
              convertPathData: {
                floatPrecision: 6
              }
            }]
          })).pipe(gulp.dest(folder)).on('finish', function () {
            // icon font
            gulp.src(folder + '*.svg').pipe(sort({
              comparator: function comparator(file1, file2) {
                return sortIconFilesNormalized(file1.relative, file2.relative);
              }
            })).pipe(iconfont({
              fontName: 'material-icons',
              formats: ['woff'],
              fontHeight: 2400,
              descent: 400,
              normalize: true,
              timestamp: 1 // Truthy!

            })).on('glyphs', function (glyphData) {
              // Store for later use
              glyphs = glyphData;
            }).pipe(gulp.dest('.')).on('finish', function () {
              // Generate base64 version of the font
              var materialIconsWoff = fs.readFileSync('material-icons.woff'); // Write the output to font-icons.js

              var output = "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './version.js';\n\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `\n  <style>\n    @font-face {\n      font-family: 'material-icons';\n      src: url(data:application/font-woff;charset=utf-8;base64,".concat(materialIconsWoff.toString('base64'), ") format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n\n    html {\n");
              glyphs.forEach(function (g) {
                var name = g.name.replace(/\s/g, '-').toLowerCase();
                var unicode = '\\\\' + g.unicode[0].charCodeAt(0).toString(16);
                output += "      --material-icons-".concat(name, ": \"").concat(unicode, "\";\n");
              });
              output += "    }\n  </style>\n`;\n\ndocument.head.appendChild($_documentContainer.content);\n";
              fs.writeFile('font-icons.js', output, function (err) {
                if (err) {
                  return console.error(err);
                }
              });
              var list = glyphs.map(function (g) {
                return g.name;
              });
              fs.writeFile('test/glyphs.json', JSON.stringify(list, null, 2), function (err) {
                if (err) {
                  return console.error(err);
                }
              }); // Cleanup

              fs.unlink('material-icons.woff', function (err) {
                if (err) {
                  return console.error(err);
                }
              });
            });
          });

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));