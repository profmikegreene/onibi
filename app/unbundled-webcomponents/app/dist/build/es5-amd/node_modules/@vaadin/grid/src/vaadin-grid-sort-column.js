define(["exports", "./vaadin-grid-sorter.js", "./vaadin-grid-column.js"], function (_exports, _vaadinGridSorter, _vaadinGridColumn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridSortColumn = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-sort-column>` is a helper element for the `<vaadin-grid>`
   * that provides default header renderer and functionality for sorting.
   *
   * #### Example:
   * ```html
   * <vaadin-grid items="[[items]]">
   *  <vaadin-grid-sort-column path="name.first" direction="asc"></vaadin-grid-sort-column>
   *
   *  <vaadin-grid-column>
   *    ...
   * ```
   *
   * @fires {CustomEvent} direction-changed - Fired when the `direction` property changes.
   */
  var GridSortColumn = /*#__PURE__*/function (_GridColumn) {
    babelHelpers.inherits(GridSortColumn, _GridColumn);

    var _super = _createSuper(GridSortColumn);

    function GridSortColumn() {
      var _this;

      babelHelpers.classCallCheck(this, GridSortColumn);
      _this = _super.call(this);
      _this.__boundOnDirectionChanged = _this.__onDirectionChanged.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /**
     * Renders the grid sorter to the header cell.
     *
     * @override
     */


    babelHelpers.createClass(GridSortColumn, [{
      key: "_defaultHeaderRenderer",
      value: function _defaultHeaderRenderer(root, _column) {
        var sorter = root.firstElementChild;

        if (!sorter) {
          sorter = document.createElement('vaadin-grid-sorter');
          sorter.addEventListener('direction-changed', this.__boundOnDirectionChanged);
          root.appendChild(sorter);
        }

        sorter.path = this.path;
        sorter.__rendererDirection = this.direction;
        sorter.direction = this.direction;
        sorter.textContent = this.__getHeader(this.header, this.path);
      }
      /**
       * The sort column doesn't allow to use a custom header renderer
       * to override the header cell content.
       * It always renders the grid sorter to the header cell.
       *
       * @override
       */

    }, {
      key: "_computeHeaderRenderer",
      value: function _computeHeaderRenderer() {
        return this._defaultHeaderRenderer;
      }
      /**
       * Updates the sorting direction once the grid sorter's direction is changed.
       * The listener handles only user-fired events.
       *
       * @private
       */

    }, {
      key: "__onDirectionChanged",
      value: function __onDirectionChanged(e) {
        // Skip if the direction is changed by the renderer.
        if (e.detail.value === e.target.__rendererDirection) {
          return;
        }

        this.direction = e.detail.value;
      }
      /** @private */

    }, {
      key: "__getHeader",
      value: function __getHeader(header, path) {
        if (header) {
          return header;
        }

        if (path) {
          return this._generateHeader(path);
        }
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-grid-sort-column';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * JS Path of the property in the item used for sorting the data.
           */
          path: String,

          /**
           * How to sort the data.
           * Possible values are `asc` to use an ascending algorithm, `desc` to sort the data in
           * descending direction, or `null` for not sorting the data.
           * @type {GridSorterDirection | undefined}
           */
          direction: {
            type: String,
            notify: true
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header, direction)'];
      }
    }]);
    return GridSortColumn;
  }(_vaadinGridColumn.GridColumn);

  _exports.GridSortColumn = GridSortColumn;
  customElements.define(GridSortColumn.is, GridSortColumn);
});