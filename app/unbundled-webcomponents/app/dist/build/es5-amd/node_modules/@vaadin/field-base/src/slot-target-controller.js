define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SlotTargetController = void 0;

  /**
   * @license
   * Copyright (c) 2021 - 2022 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   */

  /**
   * A controller to copy the content from a source slot to a target element.
   */
  var SlotTargetController = /*#__PURE__*/function () {
    function SlotTargetController(sourceSlot, targetFactory, callback) {
      var _this = this;

      babelHelpers.classCallCheck(this, SlotTargetController);

      /**
       * The source `<slot>` element to copy nodes from.
       */
      this.sourceSlot = sourceSlot;
      /**
       * Function used to get a reference to slot target.
       */

      this.targetFactory = targetFactory;
      /**
       * Function called after copying nodes to target.
       */

      this.copyCallback = callback;

      if (sourceSlot) {
        sourceSlot.addEventListener('slotchange', function () {
          // Copy in progress, ignore this event.
          if (_this.__copying) {
            _this.__copying = false;
          } else {
            _this.__checkAndCopyNodesToSlotTarget();
          }
        });
      }
    }

    babelHelpers.createClass(SlotTargetController, [{
      key: "hostConnected",
      value: function hostConnected() {
        var _this2 = this;

        this.__sourceSlotObserver = new MutationObserver(function () {
          return _this2.__checkAndCopyNodesToSlotTarget();
        }); // Ensure the content is up to date when host is connected
        // to handle e.g. mutating text content while disconnected.

        this.__checkAndCopyNodesToSlotTarget();
      }
      /**
       * Copies every node from the source slot to the target element
       * once the source slot' content is changed.
       *
       * @private
       */

    }, {
      key: "__checkAndCopyNodesToSlotTarget",
      value: function __checkAndCopyNodesToSlotTarget() {
        this.__sourceSlotObserver.disconnect(); // Ensure slot target element is up to date.


        var slotTarget = this.targetFactory();

        if (!slotTarget) {
          return;
        } // Remove any existing clones from the slot target


        if (this.__slotTargetClones) {
          this.__slotTargetClones.forEach(function (node) {
            if (node.parentElement === slotTarget) {
              slotTarget.removeChild(node);
            }
          });

          delete this.__slotTargetClones;
        } // Exclude whitespace text nodes


        var nodes = this.sourceSlot.assignedNodes({
          flatten: true
        }).filter(function (node) {
          return !(node.nodeType == Node.TEXT_NODE && node.textContent.trim() === '');
        });

        if (nodes.length > 0) {
          slotTarget.innerHTML = ''; // Ignore next slotchange

          this.__copying = true;

          this.__copyNodesToSlotTarget(nodes, slotTarget);
        }
      }
      /**
       * Copies the nodes to the target element.
       *
       * @param {!Array<!Node>} nodes
       * @param {HTMLElement} slotTarget
       * @private
       */

    }, {
      key: "__copyNodesToSlotTarget",
      value: function __copyNodesToSlotTarget(nodes, slotTarget) {
        var _this3 = this;

        this.__slotTargetClones = this.__slotTargetClones || [];
        nodes.forEach(function (node) {
          // Clone the nodes and append the clones to the target
          var clone = node.cloneNode(true);

          _this3.__slotTargetClones.push(clone);

          slotTarget.appendChild(clone); // Observe all changes to the source node to have the clones updated

          _this3.__sourceSlotObserver.observe(node, {
            attributes: true,
            childList: true,
            subtree: true,
            characterData: true
          });
        }); // Run callback e.g. to show a deprecation warning

        if (typeof this.copyCallback === 'function') {
          this.copyCallback(nodes);
        }
      }
    }]);
    return SlotTargetController;
  }();

  _exports.SlotTargetController = SlotTargetController;
});