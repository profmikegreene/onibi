define(["exports", "./vaadin-grid-tree-toggle.js", "./vaadin-grid-column.js"], function (_exports, _vaadinGridTreeToggle, _vaadinGridColumn) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridTreeColumn = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `<vaadin-grid-tree-column>` is a helper element for the `<vaadin-grid>`
   * that provides default renderer and functionality for toggling tree/hierarchical items.
   *
   * #### Example:
   * ```html
   * <vaadin-grid items="[[items]]">
   *  <vaadin-grid-tree-column path="name.first"></vaadin-grid-tree-column>
   *
   *  <vaadin-grid-column>
   *    ...
   * ```
   */
  var GridTreeColumn = /*#__PURE__*/function (_GridColumn) {
    babelHelpers.inherits(GridTreeColumn, _GridColumn);

    var _super = _createSuper(GridTreeColumn);

    function GridTreeColumn() {
      var _this;

      babelHelpers.classCallCheck(this, GridTreeColumn);
      _this = _super.call(this);
      _this.__boundOnExpandedChanged = _this.__onExpandedChanged.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    }
    /**
     * Renders the grid tree toggle to the body cell
     *
     * @private
     */


    babelHelpers.createClass(GridTreeColumn, [{
      key: "__defaultRenderer",
      value: function __defaultRenderer(root, _column, _ref) {
        var item = _ref.item,
            expanded = _ref.expanded,
            level = _ref.level;
        var toggle = root.firstElementChild;

        if (!toggle) {
          toggle = document.createElement('vaadin-grid-tree-toggle');
          toggle.addEventListener('expanded-changed', this.__boundOnExpandedChanged);
          root.appendChild(toggle);
        }

        toggle.__item = item;
        toggle.__rendererExpanded = expanded;
        toggle.expanded = expanded;
        toggle.leaf = this.__isLeafItem(item, this.itemHasChildrenPath);
        toggle.textContent = this.__getToggleContent(this.path, item);
        toggle.level = level;
      }
      /**
       * The tree column doesn't allow to use a custom renderer
       * to override the content of body cells.
       * It always renders the grid tree toggle to body cells.
       *
       * @override
       */

    }, {
      key: "_computeRenderer",
      value: function _computeRenderer() {
        return this.__defaultRenderer;
      }
      /**
       * Expands or collapses the row once the tree toggle is switched.
       * The listener handles only user-fired events.
       *
       * @private
       */

    }, {
      key: "__onExpandedChanged",
      value: function __onExpandedChanged(e) {
        // Skip if the state is changed by the renderer.
        if (e.detail.value === e.target.__rendererExpanded) {
          return;
        }

        if (e.detail.value) {
          this._grid.expandItem(e.target.__item);
        } else {
          this._grid.collapseItem(e.target.__item);
        }
      }
      /** @private */

    }, {
      key: "__isLeafItem",
      value: function __isLeafItem(item, itemHasChildrenPath) {
        return !item || !item[itemHasChildrenPath];
      }
      /** @private */

    }, {
      key: "__getToggleContent",
      value: function __getToggleContent(path, item) {
        return path && this.get(path, item);
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-grid-tree-column';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * JS Path of the property in the item used as text content for the tree toggle.
           */
          path: String,

          /**
           * JS Path of the property in the item that indicates whether the item has child items.
           * @attr {string} item-has-children-path
           */
          itemHasChildrenPath: {
            type: String,
            value: 'children'
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_onRendererOrBindingChanged(_renderer, _cells, _cells.*, path, itemHasChildrenPath)'];
      }
    }]);
    return GridTreeColumn;
  }(_vaadinGridColumn.GridColumn);

  _exports.GridTreeColumn = GridTreeColumn;
  customElements.define(GridTreeColumn.is, GridTreeColumn);
});