define(["exports", "../../../lit-element/lit-element.js", "./hax-toolbar.js", "../../simple-toolbar/lib/simple-toolbar-menu-item.js", "./hax-store.js", "./hax-toolbar-menu.js", "./hax-context-item.js", "../../../mobx/dist/mobx.esm.js", "./hax-context-behaviors.js", "../../utils/utils.js", "../../i18n-manager/lib/I18NMixin.js"], function (_exports, _litElement, _haxToolbar, _simpleToolbarMenuItem, _haxStore, _haxToolbarMenu, _haxContextItem, _mobxEsm, _haxContextBehaviors, _utils, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;

  var _templateObject_b099e1b0af6311ebbe560fe9c4727db1, _templateObject2_b099e1b0af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxPlateContext, _I18NMixin);

    var _super = _createSuper(HaxPlateContext);

    /**
     * LitElement constructable styles enhancement
     */
    function HaxPlateContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = _super.call(this);
      _this.hasActiveEditingElement = false;
      _this.haxUIElement = true;
      _this.tourName = "hax";
      _this.t = {
        dragHandle: "Drag handle",
        moveUp: "Move up",
        moveDown: "Move down",
        addColumn: "Add column",
        removeColumn: "Remove column",
        remove: "Remove",
        duplicate: "Duplicate",
        confirmDelete: "Confirm delete"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      });

      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_b099e1b0af6311ebbe560fe9c4727db1 || (_templateObject_b099e1b0af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"toolbar\" class=\"area\">\n        <hax-toolbar always-expanded>\n          <div class=\"group\">\n            <hax-toolbar-menu\n              ?disabled=\"", "\"\n              id=\"drag\"\n              action\n              icon=\"hax:arrow-all\"\n              label=\"", "\"\n              draggable=\"true\"\n              reset-on-select\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <simple-toolbar-menu-item slot=\"menuitem\">\n                <hax-context-item\n                  action\n                  align-horizontal=\"left\"\n                  ?disabled=\"", "\"\n                  show-text-label\n                  role=\"menuitem\"\n                  icon=\"hax:keyboard-arrow-up\"\n                  label=\"", "\"\n                  event-name=\"hax-plate-up\"\n                ></hax-context-item>\n              </simple-toolbar-menu-item>\n              <simple-toolbar-menu-item slot=\"menuitem\">\n                <hax-context-item\n                  action\n                  align-horizontal=\"left\"\n                  ?disabled=\"", "\"\n                  role=\"menuitem\"\n                  show-text-label\n                  icon=\"hax:keyboard-arrow-down\"\n                  label=\"", "\"\n                  event-name=\"hax-plate-down\"\n                ></hax-context-item>\n              </simple-toolbar-menu-item>\n              <div slot=\"tour\" data-stop-content>\n                Click the drag handle once to show a menu to just move up or\n                down one item in the content OR click and drag to place the item\n                exactly where you want it to go.\n              </div>\n            </hax-toolbar-menu>\n          </div>\n          <div class=\"group\">\n            <hax-context-item\n              action\n              id=\"right\"\n              class=\"paddle\"\n              icon=\"hax:table-column-remove\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              event-name=\"hax-plate-create-right\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div slot=\"tour\" data-stop-content>\n                Add a column to split the current column into two pieces. This\n                can be done up to six pieces columns. For differnet layouts see\n                Grid settings panel.\n              </div>\n            </hax-context-item>\n            <hax-context-item\n              action\n              class=\"paddle\"\n              icon=\"hax:table-column-plus-after\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              event-name=\"hax-plate-remove-right\"\n              id=\"rightremove\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div slot=\"tour\" data-stop-content>\n                Remove a column from the split column layout. If at two columns\n                and removing it will remove the layout split and make it 100%\n                width.\n              </div>\n            </hax-context-item>\n            <hax-context-item\n              action\n              ?disabled=\"", "\"\n              label=\"", "\"\n              icon=\"icons:content-copy\"\n              event-name=\"hax-plate-duplicate\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div slot=\"tour\" data-stop-content>\n                Duplicate the active piece of content and place it below the\n                current item.\n              </div>\n            </hax-context-item>\n          </div>\n          <div class=\"group\">\n            <hax-toolbar-menu\n              id=\"remove\"\n              action\n              ?disabled=\"", "\"\n              icon=\"delete\"\n              label=\"", "\"\n              reset-on-select\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n              @dblclick=", "\n            >\n              <simple-toolbar-menu-item slot=\"menuitem\">\n                <hax-context-item\n                  action\n                  danger\n                  align-horizontal=\"left\"\n                  ?disabled=\"", "\"\n                  show-text-label\n                  role=\"menuitem\"\n                  icon=\"delete\"\n                  label=\"", "\"\n                  event-name=\"hax-plate-delete\"\n                ></hax-context-item>\n              </simple-toolbar-menu-item>\n              <div slot=\"tour\" data-stop-content>\n                Delete the current item. You can always use the undo arrow to\n                bring this back.\n              </div>\n            </hax-toolbar-menu>\n          </div>\n        </hax-toolbar>\n      </div>\n    "])), this.hasActiveEditingElement, this.t.dragHandle, this.hasActiveEditingElement, this.t.moveUp, this.hasActiveEditingElement, this.t.moveDown, this.t.addColumn, this.hasActiveEditingElement, this.t.removeColumn, this.hasActiveEditingElement, this.hasActiveEditingElement, this.t.duplicate, this.hasActiveEditingElement, this.t.remove, this.__dblClickFire, this.hasActiveEditingElement, this.t.confirmDelete);
      }
    }, {
      key: "__updatePlatePosition",
      value: function __updatePlatePosition(active) {
        var right = this.shadowRoot.querySelector("#right");
        var rightremove = this.shadowRoot.querySelector("#rightremove"); // support for enabling or disabling

        right.disabled = false;
        rightremove.disabled = false;

        if (active && active.tagName == "GRID-PLATE") {
          if (active.layout == "1-1-1-1-1-1") {
            right.disabled = true;
          }
        } else {
          rightremove.disabled = true;
        }
      }
    }, {
      key: "__dblClickFire",
      value: function __dblClickFire(event) {
        if (event.target.id === "remove") {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: event.target,
              eventName: "hax-plate-delete",
              value: event.target.value
            }
          }));
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "firstUpdated", this).call(this, changedProperties);
        (0, _mobxEsm.autorun)(function () {
          var activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

          if (activeNode && _this2.getAttribute("on-screen")) {
            _this2.__updatePlatePosition(activeNode);
          }
        });
        (0, _mobxEsm.autorun)(function () {
          if ((0, _mobxEsm.toJS)(_haxStore.HAXStore.activeEditingElement)) {
            _this2.hasActiveEditingElement = true;
          } else {
            _this2.hasActiveEditingElement = false;
          }
        });
        this.shadowRoot.querySelector("#drag").addEventListener("dragstart", this._dragStart);
        this.shadowRoot.querySelector("#drag").addEventListener("dragend", this._dragEnd);
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        var menu = (0, _utils.normalizeEventPath)(e) ? (0, _utils.normalizeEventPath)(e)[0] : undefined;
        if (menu) menu.close(true);
        _haxStore.HAXStore._lockContextPosition = false;
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragStart",
      value: function _dragStart(e) {
        var target = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode),
            menu = (0, _utils.normalizeEventPath)(e) ? (0, _utils.normalizeEventPath)(e)[0] : undefined;
        if (menu) menu.close(true);
        _haxStore.HAXStore.__dragTarget = target;
        _haxStore.HAXStore._lockContextPosition = true; // wipe the add context menu for motion

        _haxStore.HAXStore.activeHaxBody.__activeHover = null;

        _haxStore.HAXStore.activeHaxBody._hideContextMenu(_haxStore.HAXStore.activeHaxBody.contextMenus.add);

        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.dropEffect = "move";
          e.dataTransfer.setDragImage(target, -20, -20);
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      /**
       * LitElement / popular convention
       */

    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext), "styles", this)), [(0, _litElement.css)(_templateObject2_b099e1b0af6311ebbe560fe9c4727db1 || (_templateObject2_b099e1b0af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          width: 176px;\n        }\n        hax-toolbar {\n          flex: 0 0 auto;\n        }\n        #remove {\n          max-width: 44px;\n          overflow: visible;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext), "properties", this)), {}, {
          hasActiveEditingElement: {
            type: Boolean
          }
        });
      }
    }]);
    return HaxPlateContext;
  }((0, _I18NMixin2.I18NMixin)((0, _haxContextBehaviors.HaxContextBehaviors)(_litElement.LitElement)));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});