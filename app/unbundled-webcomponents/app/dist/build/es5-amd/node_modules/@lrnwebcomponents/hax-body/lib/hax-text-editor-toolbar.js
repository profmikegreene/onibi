define(["exports", "../../../lit-element/lit-element.js", "../../rich-text-editor/lib/toolbars/rich-text-editor-toolbar.js", "./hax-text-editor-button.js", "./hax-store.js"], function (_exports, _litElement, _richTextEditorToolbar, _haxTextEditorButton, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTextEditorToolbar = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-text-editor-toolbar`
   * a customized toolbar (with buttons) for HAX
   *
   * @extends RichTextEditorToolbarBehaviors
   * @extends LitElement
   * @customElement
   * @demo demo/index.html
   */
  var HaxTextEditorToolbar = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(HaxTextEditorToolbar, _RichTextEditorToolba);

    var _super = _createSuper(HaxTextEditorToolbar);

    // life cycle
    function HaxTextEditorToolbar() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTextEditorToolbar);
      _this = _super.call(this);
      _this.tag = HaxTextEditorToolbar.tag;
      _this.sticky = false;
      _this.config = _this.defaultConfig;
      _this.__registeredElements = [];
      _this.__updated = false;
      return _this;
    }

    babelHelpers.createClass(HaxTextEditorToolbar, [{
      key: "render",
      value: // render function
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar.prototype), "miniTemplate", this);
      } // properties available to the custom element for data binding

    }, {
      key: "tag",
      value:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function tag() {
        return "hax-text-editor-toolbar";
      }
    }, {
      key: "defaultConfig",
      get: function get() {
        return [this.basicInlineButtonGroup, this.linkButtonGroup, this.scriptButtonGroup, this.listIndentButtonGroup];
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar.prototype), "firstUpdated", this).call(this, changedProperties);
        this.config = this.updateToolbarElements();
        window.addEventListener("hax-store-ready", this._handleHaxStoreReady.bind(this));
        window.addEventListener("hax-register-properties", this._handleElementRegister.bind(this));
      }
      /**
       * when an element is registered,
       * check its properties
       *
       * @param {event} e
       * @memberof HaxTextEditorToolbar
       */

    }, {
      key: "_handleElementRegister",
      value: function _handleElementRegister(e) {
        var detail = e.detail || {},
            tag = detail.tag || {},
            props = detail.properties || {};

        this._setInlineElement(tag, props);
      }
      /**
       * when hax-store is ready,
       * check its registered elements
       *
       * @param {event} e
       * @memberof HaxTextEditorToolbar
       */

    }, {
      key: "_handleHaxStoreReady",
      value: function _handleHaxStoreReady(e) {
        var _this2 = this;

        var elements = _haxStore.HAXStore.elementList || {},
            keys = Object.keys(elements);
        keys.forEach(function (key) {
          return _this2._setInlineElement(key, elemets[key]);
        });
      }
      /**
       * if an an element is inline,
       * adds it to list of inline elements
       *
       * @param {*} tag
       * @param {*} props
       * @returns
       * @memberof HaxTextEditorToolbar
       */

    }, {
      key: "_setInlineElement",
      value: function _setInlineElement(tag, props) {
        if (!tag || !props || !!this.__registeredElements[tag] || tag.indexOf("-") < 0) return;
        var gizmo = props.gizmo || {},
            handles = gizmo.handles || [],
            inline = handles.filter(function (handle) {
          return handle.type === "inline";
        });

        if (inline.length > 0) {
          this.__registeredElements[tag] = {
            element: props,
            type: "hax-text-editor-button"
          };
          this.__updated = false;
          setTimeout(this.updateToolbarElements.bind(this), 500);
        }
      }
      /**
       * updates the toolbar buttons
       * to include custom inline element buttons
       *
       * @returns
       * @memberof HaxTextEditorToolbar
       */

    }, {
      key: "updateToolbarElements",
      value: function updateToolbarElements() {
        var _this3 = this;

        if (this.__updated) return;
        this.__updated = true;
        var buttons = Object.keys(this.__registeredElements || {}).map(function (key) {
          return _this3.__registeredElements[key];
        });
        this.config = [].concat(babelHelpers.toConsumableArray(this.defaultConfig), [{
          type: "button-group",
          buttons: buttons
        }, this.sourceButtonGroup]);
        this.updateToolbar();
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar), "baseStyles", this), babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar), "miniStyles", this)];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorToolbar), "properties", this)), {}, {
          __registeredElements: {
            type: Object
          },
          __updated: {
            type: Boolean
          }
        });
      }
    }]);
    return HaxTextEditorToolbar;
  }((0, _richTextEditorToolbar.RichTextEditorToolbarBehaviors)(_litElement.LitElement));

  _exports.HaxTextEditorToolbar = HaxTextEditorToolbar;
  customElements.define("hax-text-editor-toolbar", HaxTextEditorToolbar);
});