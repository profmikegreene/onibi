define(["exports", "require", "../../lit-element/lit-element.js", "../../shadow-selection-polyfill/shadow.js", "./lib/buttons/rich-text-editor-button.js", "./lib/toolbars/rich-text-editor-toolbar.js", "./lib/toolbars/rich-text-editor-toolbar-mini.js", "./lib/toolbars/rich-text-editor-toolbar-full.js", "./lib/singletons/rich-text-editor-selection.js"], function (_exports, _require, _litElement, shadow, _richTextEditorButton, _richTextEditorToolbar, _richTextEditorToolbarMini, _richTextEditorToolbarFull, _richTextEditorSelection) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorBehaviors = _exports.RichTextEditor = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);
  shadow = babelHelpers.interopRequireWildcard(shadow);

  var _templateObject_6f67d170af6311ebbe560fe9c4727db1, _templateObject2_6f67d170af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * RichTextEditorBehaviors
   * @extends RichTextStyles
   *
   * @customElement
   * @class
   * @lit-html
   * @lit-element
   */
  var RichTextEditorBehaviors = function RichTextEditorBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.placeholder = "Click to edit";
        _this.toolbar = "";
        _this.type = "rich-text-editor-toolbar";
        _this.id = "";
        _this.range = undefined;
        _this.disabled = false;
        _this.__focused = false;
        _this.__hovered = false;
        _this.editing = false;
        _this.__selection = window.RichTextEditorSelection.requestAvailability();
        var root = babelHelpers.assertThisInitialized(_this);
        new Promise(function (res, rej) {
          return _require.default(["../code-editor/code-editor.js"], res, rej);
        });

        _this.setAttribute("tabindex", 1);

        document.addEventListener(shadow.eventName, _this._getRange.bind(root));
        return _this;
      }
      /**
       * mutation observer
       *
       * @readonly
       * @memberof RichTextEditor
       */


      babelHelpers.createClass(_class, [{
        key: "render",
        value: // render function
        function render() {
          var _this2 = this;

          return (0, _litElement.html)(_templateObject_6f67d170af6311ebbe560fe9c4727db1 || (_templateObject_6f67d170af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" <div\n        id=\"container\"\n        @focus=\"", "\"\n        @blur=\"", "\"\n        @mouseover=\"", "\"\n        @mouseout=\"", "\"\n      >\n        <div id=\"wysiwyg\" aria-placeholder=\"", "\">\n          <slot></slot>\n        </div>\n        <code-editor\n          id=\"source\"\n          font-size=\"13\"\n          ?hidden=\"", "\"\n          language=\"html\"\n          @value-changed=\"", "\"\n          word-wrap\n        >\n        </code-editor>\n      </div>"])), function (e) {
            return _this2.__focused = true;
          }, function (e) {
            return _this2.__focused = false;
          }, function (e) {
            return _this2.__hovered = true;
          }, function (e) {
            return _this2.__hovered = false;
          }, this.placeholder, !(this.viewSource && this.editing), this._handleSourceChange);
        }
      }, {
        key: "observer",
        get: function get() {
          return new MutationObserver(this._getRange);
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          var _this3 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          setTimeout(function () {
            _this3.register();
          }, 500);
        }
        /**
         * life cycle, element is disconnected
         * @returns {void}
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          this.register(true);
        }
      }, {
        key: "firstUpdated",
        value: function firstUpdated() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this);

          if (this.isEmpty() && !!this.rawhtml) {
            this.setHTML(this.rawhtml);
          } else {
            if (this.isEmpty()) this.innerHTML = "";

            this._editableChange();
          }
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this4 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "editing") _this4._editableChange();

            if (propName === "disabled") {
              _this4.disableEditing();

              _this4.setAttribute("tabindex", _this4.disabled ? -1 : 0);
            }

            if (propName === "range") _this4._rangeChange();
            if (propName === "rawhtml" && !!_this4.rawhtml) _this4.setHTML(_this4.rawhtml);
            if (propName === "viewSource") _this4._handleViewSourceChange();

            if (["viewSource", "editing"].includes(propName)) {
              if (_this4.editing && !_this4.viewSource) {
                _this4.setAttribute("contenteditable", true);
              } else {
                _this4.removeAttribute("contentEditable");
              }
            }
          });
          if (!this.innerHTML) this.innerHTML = "";
        }
        /**
         * removes contenteditable and cleans HTML
         *
         * @event editing-disabled
         * @memberof RichTextEditor
         */

      }, {
        key: "disableEditing",
        value: function disableEditing() {
          this.editing = false;
          this.dispatchEvent(new CustomEvent("editing-disabled", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: (this.innerHTML || "").replace(/<!--[^(-->)]*-->/g, "").trim()
          }));
        }
        /**
         * adds contenteditable and cleans HTML
         *
         * @event editing-endabled
         * @memberof RichTextEditor
         *
         */

      }, {
        key: "enableEditing",
        value: function enableEditing() {
          this.editing = true;
          this.dispatchEvent(new CustomEvent("editing-enabled", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: (this.innerHTML || "").replace(/<!--[^(-->)]*-->/g, "").trim()
          }));
        }
        /**
         * focuses on the contenteditable region
         * @memberof RichTextEditor
         */

      }, {
        key: "focus",
        value: function focus() {
          if (!this.disabled) this.__focused = true;
          this.dispatchEvent(new CustomEvent("focus", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: this.querySelector("*")
          }));
        }
        /**
         * gets cleaned HTML from the editor
         *
         * @returns {string}
         * @memberof RichTextEditor
         */

      }, {
        key: "getHTML",
        value: function getHTML() {
          return this.isEmpty() ? "" : (this.innerHTML || "").replace(/<!--[^(-->)]*-->/g, "").trim();
        }
        /**
         * determines if editor is empty
         *
         * @returns {string}
         * @memberof RichTextEditor
         */

      }, {
        key: "isEmpty",
        value: function isEmpty() {
          return !this.innerHTML || this.trimHTML(this) == "";
        }
        /**
         * allows editor to fit within a stick toolbar
         *
         * @param {boolean} sticky
         * @memberof RichTextEditor
         */

      }, {
        key: "makeSticky",
        value: function makeSticky() {
          var sticky = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          if (!sticky) {
            this.classList.add("heightmax");
          } else {
            this.classList.remove("heightmax");
          }
        }
        /**
         * set observer on or off
         *
         * @param {boolean} [on=true]
         * @memberof RichTextEditor
         */

      }, {
        key: "observeChanges",
        value: function observeChanges() {
          var on = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

          if (on) {
            this.observer.observe(this, {
              attributes: false,
              childList: true,
              subtree: true,
              characterData: false
            });
          } else {
            if (this.observer) this.observer.disconnect;
          }
        }
        /**
         *
         *
         * @memberof RichTextEditor
         */

      }, {
        key: "paste",
        value: function paste(pasteContent) {
          var sanitized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

          this._handlePaste(pasteContent);
        }
        /**
         * handles registration to selection singleton's toolbars list
         * @param {boolean} remove whether to remove
         * @event register
         */

      }, {
        key: "register",
        value: function register() {
          var remove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          window.dispatchEvent(new CustomEvent("register", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              remove: remove,
              editor: this
            }
          }));
        }
        /**
         * revert content to before editing=true
         *
         * @memberof RichTextEditor
         */

      }, {
        key: "revert",
        value: function revert() {
          this.innerHTML = this.__canceledEdits;
        }
        /**
         * gets closet document oor shadowRoot
         *
         * @returns node
         * @memberof RichTextEditor
         */

      }, {
        key: "rootNode",
        value: function rootNode() {
          return !this.__selection ? document : this.__selection.getRoot(this);
        }
        /**
         * sanitizesHTML
         * override this function to make your own filters
         *
         * @param {string} html html to be pasted
         * @returns {string} filtered html as string
         */

      }, {
        key: "sanitizeHTML",
        value: function sanitizeHTML(html) {
          if (!html) return;
          var regex = "<body(.*\n)*>(.*\n)*</body>";
          if (html.match(regex) && html.match(regex).length > 0) html = html.match(regex)[0].replace(/<\?body(.*\n)*\>/i);
          return html;
        }
        /**
         * sets editor HTML
         *
         * @param {string} [rawhtml=""]
         * @memberof RichTextEditor
         */

      }, {
        key: "setHTML",
        value: function setHTML() {
          var rawhtml = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          var html = this.sanitizeHTML(rawhtml).trim();
          this.innerHTML = html;
          this.setCancelHTML(html);
          if (this.isEmpty()) this.innerHTML = "";

          this._editableChange();
        }
        /**
         * holds on to edits so cancel willwork
         *
         * @param {string} [html=this.innerHTML]
         * @memberof RichTextEditor
         */

      }, {
        key: "setCancelHTML",
        value: function setCancelHTML() {
          var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.innerHTML;
          this.__canceledEdits = html || "";
        }
        /**
         * gets trimmed version of innerHTML
         *
         * @param {obj} node
         * @returns {string}
         * @memberof RichTextEditor
         */

      }, {
        key: "trimHTML",
        value: function trimHTML(node) {
          var str = node ? node.innerHTML : undefined;
          return this.trimString(str);
        }
        /**
         * cleans and trims a string of HTML so that it has no extra spaces
         *
         * @param {string} str
         * @returns {string}
         */

      }, {
        key: "trimString",
        value: function trimString(str) {
          return (str || "").replace(/<!--[^(-->)]*-->/g, "").replace(/[\s\t\r\n]/gim, "");
        }
      }, {
        key: "updateRange",
        value: function updateRange() {
          this.dispatchEvent(new CustomEvent("getrange", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
        /**
         * watches for range changes
         *
         * @memberof RichTextEditor
         */

      }, {
        key: "_editableChange",
        value: function _editableChange() {
          var _this5 = this;

          var keyPress = function keyPress(e) {
            if (_this5.isEmpty() && e.key) {
              _this5.innerHTML = e.key.replace(">", "&gt;").replace("<", "&lt;").replace("&", "&amp;");

              var range = _this5._getRange();

              _this5.range.selectNodeContents(_this5);

              _this5.range.collapse();
            }
          };

          if (this.editing) {
            this.addEventListener("keypress", keyPress);
            this.setCancelHTML();
          } else {
            this.removeEventListener("keypress", keyPress);
          }
        }
        /**
         * gets range from shadowDOM
         *
         * @returns {range}
         */

      }, {
        key: "_getRange",
        value: function _getRange() {
          var shadowRoot = function shadowRoot(el) {
            var parent = el.parentNode;
            return parent ? shadowRoot(parent) : el;
          };

          try {
            this.range = shadowRoot(this) ? shadow.getRange(shadowRoot(this)) : undefined;
          } catch (e) {
            this.range = undefined;
          }

          if (this.updateRange) this.updateRange();
          return this.range;
        }
        /**
         * Handles paste.
         *
         * @param {event} e paste event
         * @returns {void}
         */

      }, {
        key: "_handlePaste",
        value: function _handlePaste(e) {
          var pasteContent = ""; // intercept paste event

          if (e && (e.clipboardData || e.originalEvent.clipboardData)) {
            pasteContent = (e.originalEvent || e).clipboardData.getData("text/html");
          } else if (window.clipboardData) {
            pasteContent = window.clipboardData.getData("Text");
          }

          this.dispatchEvent(new CustomEvent("pastefromclipboard", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
          e.preventDefault();
        }
        /**
         * updates editor content to code-editor value
         *
         * @param {event} e code-editor's value change event
         * @memberof RichTextEditor
         */

      }, {
        key: "_handleSourceChange",
        value: function _handleSourceChange(e) {
          var _this6 = this;

          if (!this.__needsUpdate) {
            var _html = "".concat(this.innerHTML),
                code = !!e.detail.value ? "".concat(e.detail.value) : _html,
                cleanCode = this._outdentHTML(code).replace(/\s+/gm, ""),
                cleanHTML = this._outdentHTML(_html).replace(/\s+/gm, "");

            this.__needsUpdate = cleanCode.localeCompare(cleanHTML);

            var update = function update() {
              _this6.__needsUpdate = false;
              _this6.innerHTML = e.detail.value;
            };

            if (this.__needsUpdate) setTimeout(update.bind(this), 300);
          }
        }
        /**
         * cleans up indents and extra spaces in HTML string for source code editor
         *
         * @param {string} [str=""]
         * @returns {string}
         */

      }, {
        key: "_outdentHTML",
        value: function _outdentHTML() {
          var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          str = this.sanitizeHTML(str).replace(/[\s]*$/, "").replace(/^[\n\r]*/, "").replace(/[\n\r]+/gm, "\n");
          var match = str.match(/^\s+/),
              find = match ? match[0] : false,
              regex = !find ? false : new RegExp("\\n".concat(find), "gm");
          str = str.replace(/^\s+/, "");
          str = regex ? str.replace(regex, "\n ") : str;
          return str;
        }
        /**
         * hangles show/hide view source
         *
         * @param {event} e
         */

      }, {
        key: "_handleViewSourceChange",
        value: function _handleViewSourceChange(e) {
          var code = this.shadowRoot ? this.shadowRoot.querySelector("#source") : undefined;

          if (code && this.viewSource) {
            code.editorValue = this._outdentHTML(this.innerHTML);
            code.addEventListener("value-changed", this._handleSourceChange.bind(this));
          } else if (code) {
            code.removeEventListener("value-changed", this._handleSourceChange.bind(this));
          }
        }
        /**
         * handles range changes (can be overridden)
         *
         * @param {event} e
         */

      }, {
        key: "_rangeChange",
        value: function _rangeChange(e) {}
      }], [{
        key: "styles",
        get: //styles function
        function get() {
          return [].concat(babelHelpers.toConsumableArray(_richTextEditorButton.RichTextStyles), [(0, _litElement.css)(_templateObject2_6f67d170af6311ebbe560fe9c4727db1 || (_templateObject2_6f67d170af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: block;\n          }\n          :host([hidden]) {\n            display: none;\n          }\n          :host([disabled]) {\n            cursor: not-allowed;\n          }\n          :host(:empty) {\n            opacity: 0.7;\n          }\n          :host(:focus) {\n            outline: none;\n          }\n\n          :host(.heightmax[editing]) {\n            max-height: calc(100vh - 200px);\n            overflow-y: scroll;\n          }\n\n          #container,\n          #wysiwyg {\n            display: block;\n            width: 100%;\n          }\n          #source,\n          #wysiwyg {\n            margin: 0;\n            padding: 0;\n            min-height: var(--rich-text-editor-min-height, 20px);\n            cursor: pointer;\n            outline: none;\n            flex: 1 1 100%;\n            width: 100%;\n          }\n          :host(:empty) #wysiwyg::after {\n            display: block;\n            content: attr(aria-placeholder);\n          }\n\n          :host(:hover),\n          :host(:focus-within) {\n            opacity: 1;\n            outline: var(--rich-text-editor-border-width, 1px) solid\n              var(--rich-text-editor-focus-color, blue);\n          }\n          :host([disabled]),\n          :host([view-source]) {\n            outline: none !important;\n          }\n\n          #source:hover,\n          #source:focus-within {\n            outline: var(--rich-text-editor-border-width, 1px) solid\n              var(--rich-text-editor-focus-color, blue);\n          }\n          :host([editing][view-source]) #container {\n            display: flex;\n            align-items: stretch;\n            justify-content: space-between;\n            width: 100%;\n          }\n          :host([editing][view-source]) #source,\n          :host([editing][view-source]) #wysiwyg {\n            resize: horizontal;\n            overflow: auto;\n            flex: 1 1 auto;\n            width: 50%;\n          }\n          :host([editing][view-source]) #source {\n            min-width: 300px;\n          }\n          :host([editing][view-source]) #wysiwyg {\n            cursor: not-allowed;\n            margin-right: 10px;\n            width: calc(50% - 10px);\n          }\n        "])))]);
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * editor's unique id
             */
            id: {
              name: "id",
              type: String,
              reflect: true,
              attribute: "id"
            },

            /**
             * Maps to editing attribute
             */
            editing: {
              name: "editing",
              type: Boolean,
              reflect: true,
              attribute: "editing"
            },

            /**
             * don't reveal toolbar on mouseover
             */
            disabled: {
              name: "disabled",
              type: Boolean,
              attribute: "disabled",
              reflect: true
            },

            /**
             * don't reveal toolbar on mouseover
             */
            disableHover: {
              name: "disableHover",
              type: Boolean,
              attribute: "disable-hover"
            },

            /**
             * Placeholder text for empty editable regions
             */
            placeholder: {
              name: "placeholder",
              type: String,
              reflect: true,
              attribute: "placeholder"
            },

            /**
             * id for toolbar
             */
            toolbar: {
              name: "toolbar",
              type: String,
              reflect: true,
              attribute: "toolbar"
            },

            /**
             * current range
             */
            range: {
              name: "range",
              type: Object,
              attribute: "range"
            },

            /**
             * raw html
             */
            rawhtml: {
              type: String,
              attribute: "rawhtml"
            },

            /**
             * type of editor toolbar, i.e.
             * full - full for full toolbar with breadcrumb,
             * mini - mini for mini floating toolbar, or
             * default toolbar if neither.
             */
            type: {
              name: "type",
              type: String,
              reflect: true,
              attribute: "type"
            },

            /**
             * whether to update range
             */
            updateRange: {
              type: Boolean
            },

            /**
             * whether editor is view source code mode
             */
            viewSource: {
              type: Boolean,
              attribute: "view-source",
              reflect: true
            },

            /**
             * contains cancelled edits
             */
            __canceledEdits: {
              type: Object
            },

            /**
             * connected toolbar
             */
            __connectedToolbar: {
              type: Object
            },

            /**
             * code-editor for view source
             */
            __codeEditorValue: {
              type: String
            },

            /**
             * has focus
             */
            __needsUpdate: {
              type: Boolean
            },

            /**
             * has focus
             */
            __focused: {
              type: Boolean
            },

            /**
             * is hovered
             */
            __hovered: {
              type: Boolean
            },

            /**
             * selection management
             */
            __selection: {
              type: Object
            }
          });
        }
        /**
         * Store the tag name to make it easier to obtain directly.
         * @notice function name must be here for tooling to operate correctly
         */

      }, {
        key: "tag",
        get: function get() {
          return "rich-text-editor";
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `rich-text-editor`
   * a standalone rich text editor
   * (can customize by extending RichTextEditorBehaviors)
  ### Styling
  
  `<rich-text-editor>`  uses RichTextStyles variables, 
  as well as an additional style:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --rich-text-editor-min-height | minimum height of editor | 20px
   *
   * @extends RichTextEditorBehaviors
   * @extends LitElement
   * @customElement
   * @element rich-text-editor
   * @lit-html
   * @lit-element
   * @demo ./demo/index.html demo
   * @demo ./demo/mini.html mini floating toolbar
   * @demo ./demo/full.html toolbar with breadcrumb
   * @demo ./demo/config.html custom configuration
   * @demo ./demo/rawhtml.html raw HTML
   */


  _exports.RichTextEditorBehaviors = RichTextEditorBehaviors;

  var RichTextEditor = /*#__PURE__*/function (_RichTextEditorBehavi) {
    babelHelpers.inherits(RichTextEditor, _RichTextEditorBehavi);

    var _super2 = _createSuper(RichTextEditor);

    function RichTextEditor() {
      babelHelpers.classCallCheck(this, RichTextEditor);
      return _super2.apply(this, arguments);
    }

    return RichTextEditor;
  }(RichTextEditorBehaviors(_litElement.LitElement));

  _exports.RichTextEditor = RichTextEditor;
  window.customElements.define(RichTextEditor.tag, RichTextEditor);
});