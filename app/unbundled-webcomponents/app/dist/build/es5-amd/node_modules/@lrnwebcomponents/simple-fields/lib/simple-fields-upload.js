define(["exports", "require", "../../../lit-element/lit-element.js", "./simple-fields-field.js", "./simple-fields-ui.js", "./simple-fields-fieldset.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../simple-toolbar/simple-toolbar.js", "../../simple-toolbar/lib/simple-toolbar-button.js", "../../../@vaadin/vaadin-upload/vaadin-upload.js"], function (_exports, _require, _litElement, _simpleFieldsField, _simpleFieldsUi, _simpleFieldsFieldset, _simpleIconLite, _simpleIcons, _simpleToolbar, _simpleToolbarButton, _vaadinUpload) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsUpload = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  var _templateObject_b8547d20af6311ebbe560fe9c4727db1, _templateObject2_b8547d20af6311ebbe560fe9c4727db1, _templateObject3_b8547d20af6311ebbe560fe9c4727db1, _templateObject4_b8547d20af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-fields-upload` takes in a JSON schema of type array and builds a form,
   * exposing a `value` property that represents an array described by the schema.
   *
   * @customElement
   * @group simple-fields
   * @element simple-fields-upload
   * @extends simple-fields-fieldset
   * @demo ./demo/upload.html
   * @class SimpleFieldsUpload
   * @extends {SimpleFieldsFieldsetBehaviors(LitElement)}
   */
  var SimpleFieldsUpload = /*#__PURE__*/function (_SimpleFieldsFieldset) {
    babelHelpers.inherits(SimpleFieldsUpload, _SimpleFieldsFieldset);

    var _super = _createSuper(SimpleFieldsUpload);

    /**
     * HTMLElement life cycle
     */
    function SimpleFieldsUpload() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsUpload);
      _this = _super.call(this);
      _this.autocomplete = "off";
      _this.noCamera = false; // @todo leave this off until we can do more testing
      // the wiring is all there but the UI pattern is not

      _this.noVoiceRecord = true;
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsUpload, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_b8547d20af6311ebbe560fe9c4727db1 || (_templateObject_b8547d20af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n      <fieldset part=\"fieldset\">", " ", "</fieldset>\n    "])), this.legend, this.fields);
      }
      /**
       * LitElement life cycle - render callback
       */

    }, {
      key: "fields",
      get: function get() {
        return (0, _litElement.html)(_templateObject2_b8547d20af6311ebbe560fe9c4727db1 || (_templateObject2_b8547d20af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"url-browse\">\n        <simple-fields-field\n          id=\"url\"\n          ?autofocus=\"", "\"\n          autocomplete=\"", "\"\n          value=\"", "\"\n          @value-changed=\"", "\"\n          label=\"URL\"\n          .description=\"", "\"\n          type=\"url\"\n          auto-validate=\"\"\n          part=\"url\"\n          @click=\"", "\"\n          @mousedown=\"", "\"\n          @focus=\"", "\"\n        >\n          <simple-toolbar-button\n            id=\"browse\"\n            label=\"Browse...\"\n            show-text-label\n            @click=\"", "\"\n            controls=\"fieldset\"\n            slot=\"suffix\"\n            part=\"browse\"\n          >\n          </simple-toolbar-button>\n        </simple-fields-field>\n      </div>\n      <div id=\"upload-options\">\n        <vaadin-upload\n          capture\n          class=\"option-", "\"\n          form-data-name=\"file-upload\"\n          id=\"fileupload\"\n          @upload-before=\"", "\"\n          @upload-response=\"", "\"\n          part=\"upload\"\n        >\n          <button id=\"add-hidden\" slot=\"add-button\" hidden></button>\n          <div\n            id=\"drop-camera\"\n            slot=\"drop-label\"\n            part=\"drop-area\"\n            ?hidden=\"", "\"\n          >\n            <span id=\"drop\" part=\"drop-area-text\">\n              <simple-icon-lite\n                icon=\"file-upload\"\n                part=\"drop-area-icon\"\n              ></simple-icon-lite>\n              Drop media here ", "\n            </span>\n            <simple-toolbar-button\n              icon=\"image:camera-alt\"\n              label=\"Take photo\"\n              show-text-label\n              @mousedown=\"", "\"\n              @focus=\"", "\"\n              @click=\"", "\"\n              controls=\"fieldset\"\n              part=\"take-photo\"\n              ?hidden=\"", "\"\n            >\n            </simple-toolbar-button>\n            <simple-toolbar-button\n              icon=\"image:camera-alt\"\n              label=\"Record Audio\"\n              show-text-label\n              @mousedown=\"", "\"\n              @focus=\"", "\"\n              @click=\"", "\"\n              controls=\"fieldset\"\n              part=\"record-audio\"\n              ?hidden=\"", "\"\n            >\n            </simple-toolbar-button>\n          </div>\n          <simple-toolbar-button\n            id=\"cancel-camera\"\n            icon=\"icons:clear\"\n            label=\"Cancel\"\n            @mousedown=\"", "\"\n            @focus=\"", "\"\n            @click=\"", "\"\n            controls=\"fieldset\"\n            slot=\"drop-label\"\n            part=\"cancel-media\"\n            ?hidden=\"", "\"\n          >\n          </simple-toolbar-button>\n          <div\n            id=\"camerahole\"\n            ?hidden=\"", "\"\n            part=\"camera\"\n            slot=\"drop-label\"\n            part=\"camera-preview\"\n          ></div>\n          <div\n            id=\"voicerecorder\"\n            ?hidden=\"", "\"\n            slot=\"drop-label\"\n            part=\"voice-preview\"\n          ></div>\n        </vaadin-upload>\n      </div>\n    "])), this.autofocus, this.autocomplete, this.value || "", this.valueChanged, this.description, function (e) {
          return e.preventDefault();
        }, function (e) {
          return e.preventDefault();
        }, function (e) {
          return e.preventDefault();
        }, this._handleBrowse, this.option, this._fileAboutToUpload, this._fileUploadResponse, this.option == "selfie" || this.option == "audio", !navigator.mediaDevices ? "" : (0, _litElement.html)(_templateObject3_b8547d20af6311ebbe560fe9c4727db1 || (_templateObject3_b8547d20af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" or "]))), function (e) {
          return e.preventDefault();
        }, function (e) {
          return e.preventDefault();
        }, this._handleCameraOption, !navigator.mediaDevices || this.noCamera, function (e) {
          return e.preventDefault();
        }, function (e) {
          return e.preventDefault();
        }, this._handleAudioOption, !navigator.mediaDevices || this.noVoiceRecord, function (e) {
          return e.preventDefault();
        }, function (e) {
          return e.preventDefault();
        }, this._handleCancel, this.option !== "selfie" && this.option !== "audio", this.option !== "selfie", this.option !== "audio");
      }
      /**
       * display camera snap
       *
       * @param {event} e
       * @memberof SimpleFieldsUpload
       */

    }, {
      key: "_handleCameraOption",
      value: function _handleCameraOption(e) {
        e.preventDefault();
        this.option = "selfie";

        this._takeSelfie(e);
      }
      /**
       * display voice recorder
       *
       * @param {event} e
       * @memberof SimpleFieldsUpload
       */

    }, {
      key: "_handleAudioOption",
      value: function _handleAudioOption(e) {
        e.preventDefault();
        this.option = "voice";

        this._voiceRecorder(e);
      }
      /**
       * cancel camera and audio / display upload options
       *
       * @param {event} e
       * @memberof SimpleFieldsUpload
       */

    }, {
      key: "_handleCancel",
      value: function _handleCancel(e) {
        e.preventDefault();
        this.option = "fileupload";
      }
      /**
       * when browse button is clicked trigger the hidden add button in vaadin-upload
       *
       * @param {event} e
       * @memberof SimpleFieldsUpload
       */

    }, {
      key: "_handleBrowse",
      value: function _handleBrowse(e) {
        e.preventDefault();
        this.shadowRoot.querySelector("#add-hidden").dispatchEvent(new CustomEvent("click", e));
      }
      /**
       * update the value
       *
       * @param {*} e
       * @memberof SimpleFieldsUpload
       */

    }, {
      key: "valueChanged",
      value: function valueChanged(e) {
        this.value = e.detail.value;
      }
      /**
       * LitElement life cycle - properties changed callback
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          // notify
          if (propName == "value") {
            _this2.dispatchEvent(new CustomEvent("value-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
        if (this.field && this.__delayedFocus) this.focus();
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "field",
      get: function get() {
        if (this.shadowRoot) {
          if (this.option == "selfie" && this.shadowRoot.querySelector("#cancel")) {
            return this.shadowRoot.querySelector("#cancel");
          } else if (this.option == "audio" && this.shadowRoot.querySelector("#cancel")) {
            return this.shadowRoot.querySelector("#cancel");
          } else if (this.shadowRoot.querySelector("#url")) {
            return this.shadowRoot.querySelector("#url");
          }

          return false;
        }
      }
      /**
       * focuses on field
       */

    }, {
      key: "focus",
      value: function focus() {
        if (this.field) {
          this.field.focus();
          this.__delayedFocus = false;
        } else {
          this.__delayedFocus = true;
        }
      }
      /**
       * Respond to uploading a file
       */

    }, {
      key: "_fileAboutToUpload",
      value: function _fileAboutToUpload(e) {
        this.dispatchEvent(new CustomEvent("upload-before", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: e.detail
        }));
      }
      /**
       * Respond to successful file upload, now inject url into url field and
       * do a gizmo guess from there!
       */

    }, {
      key: "_fileUploadResponse",
      value: function _fileUploadResponse(e) {
        // set the value of the url which will update our URL and notify
        this.shadowRoot.querySelector("#url").value = item.url;
        this.dispatchEvent(new CustomEvent("upload-response", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: e.detail
        }));
      }
      /**
       * LitElement
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "firstUpdated", this).call(this, changedProperties);
        } // test on load for if we have a media device
        // default to URL if we have a value of any kind


        if (this.value) {
          this.option = "url";
        } else {
          this.option = "fileupload";
        }
      }
      /**
       * We got a new photo
       */

    }, {
      key: "__newPhotoShowedUp",
      value: function __newPhotoShowedUp(e) {
        var file = new File([e.detail.raw], "headshot" + e.timeStamp + ".jpg");

        this.shadowRoot.querySelector("#fileupload")._addFile(file);
      }
      /**
       * We got a new photo
       */

    }, {
      key: "__newAudioShowedUp",
      value: function __newAudioShowedUp(e) {
        var file = new File([e.detail.value], "voice-memo" + e.timeStamp + ".mp3");

        this.shadowRoot.querySelector("#fileupload")._addFile(file);
      }
      /**
       * Invoke the camera to set itself up
       */

    }, {
      key: "_takeSelfie",
      value: function _takeSelfie(e) {
        if (!this.camera) {
          new Promise(function (res, rej) {
            return _require.default(["../../simple-login/lib/simple-camera-snap.js"], res, rej);
          });
          this.camera = document.createElement("simple-camera-snap");
          this.camera.autoplay = true;
          this.camera.addEventListener("simple-camera-snap-image", this.__newPhotoShowedUp.bind(this));
          this.shadowRoot.querySelector("#camerahole").appendChild(this.camera);
        }
      }
    }, {
      key: "_voiceRecorder",
      value: function _voiceRecorder(e) {
        if (!this.voice) {
          new Promise(function (res, rej) {
            return _require.default(["../../voice-recorder/voice-recorder.js"], res, rej);
          });
          this.voice = document.createElement("voice-recorder");
          this.voice.addEventListener("voice-recorder-recording", this.__newAudioShowedUp.bind(this));
          this.shadowRoot.querySelector("#voicerecorder").appendChild(this.voice);
        }
      }
      /**
       * Helper to take a multi-dimensional object and convert
       * it's reference into the real value. This allows for variable input defined
       * in a string to actually hit the deeper part of an object structure.
       */

    }, {
      key: "_resolveObjectPath",
      value: function _resolveObjectPath(path, obj) {
        return path.split(".").reduce(function (prev, curr) {
          return prev ? prev[curr] : null;
        }, obj || self);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-upload";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload), "styles", this)), babelHelpers.toConsumableArray(_simpleFieldsUi.SimpleFieldsButtonStyles), [(0, _litElement.css)(_templateObject4_b8547d20af6311ebbe560fe9c4727db1 || (_templateObject4_b8547d20af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          pointer-events: all;\n          overflow: visible;\n          transition: 0.3s all ease;\n          --simple-login-camera-aspect: 1.777777777777;\n          --simple-camera-snap-color: var(--simple-fields-color, currentColor);\n          --simple-camera-snap-background: var(\n            --simple-fields-background-color,\n            unset\n          );\n          --simple-camera-snap-border-radius: 2px;\n          --lumo-font-family: var(--simple-fields-font-family, sans-serif);\n          --lumo-error-color: var(--simple-fields-error-color, #b40000);\n          --lumo-primary-font-color: var(--simple-fields-color, currentColor);\n          --lumo-base-color: var(--simple-fields-background-color, transparent);\n        }\n        #url-browse,\n        #drop-camera {\n          width: 100%;\n          font-family: var(--simple-fields-button-font-family, sans-serif);\n          font-size: var(--simple-fields-button-font-size, 14px);\n        }\n        #drop-camera {\n          display: flex;\n          align-items: center;\n          flex-wrap: wrap;\n          align-items: center;\n          justify-content: center;\n        }\n        #browse {\n          margin-right: 0;\n        }\n        #url {\n          margin-bottom: var(--simple-fields-margin-small, 8px);\n        }\n        #url::part(option-inner) {\n          overflow: hidden;\n          display: flex;\n          flex-direction: column;\n          justify-content: flex-end;\n        }\n        #drop,\n        #photo {\n          white-space: nowrap;\n        }\n        #upload-options {\n          transition: height 0.3s linear;\n        }\n        #cancel-camera {\n          display: block;\n          margin: 0;\n          margin: -12px -12px 0;\n          z-index: 2;\n        }\n        #cancel-camera::part(button) {\n          width: 24px;\n        }\n        simple-toolbar-button {\n          margin: 0 5px;\n        }\n        vaadin-upload {\n          padding: 0 var(--simple-fields-margin-small, 8px)\n            var(--simple-fields-margin-small, 8px);\n          position: relative;\n          overflow: visible;\n        }\n        vaadin-upload::part(drop-label-icon) {\n          display: none;\n        }\n        vaadin-upload::part(add-button) {\n          font-family: var(--simple-fields-font-family, sans-serif);\n          color: var(--simple-fields-color, currentColor);\n        }\n        vaadin-upload::part(drop-label) {\n          font-family: var(--simple-fields-font-family, sans-serif);\n          color: var(--simple-fields-color, currentColor);\n          margin-bottom: 16px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          padding: 0 calc(1 * var(--simple-fields-margin-small, 8px));\n          width: calc(100% - 2 * var(--simple-fields-margin-small) - 2px);\n        }\n        vaadin-upload.option-selfie::part(drop-label) {\n          display: block;\n        }\n        vaadin-upload.option-selfie #drop-camera {\n          display: none;\n        }\n        vaadin-upload[dragover] {\n          border-color: var(\n            --simple-fields-secondary-accent-color,\n            var(--simple-colors-default-theme-accent-3, #77e2ff)\n          );\n        }\n        vaadin-upload-file {\n          --disabled-text-color: #var(--simple-fields-border-color, #999);\n        }\n        simple-camera-snap {\n          --simple-camera-snap-button-container-bottom: 2px;\n          --simple-camera-snap-button-container-z-index: 5;\n          --simple-camera-snap-button-border-radius: 100%;\n          --simple-camera-snap-button-opacity: 0.7;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload), "properties", this)), {}, {
          /**
           * Hint for expected file type in file upload controls
           */
          accept: {
            type: String
          },

          /**
           * Hint for form autofill feature
           */
          autocomplete: {
            type: String
          },

          /**
           * Automatically focus on field when the page is loaded
           */
          autofocus: {
            type: Boolean
          },
          value: {
            type: String
          },
          option: {
            type: String
          },

          /**
           * Used when we want to ensure there is not a web cam option like video upload.
           */
          noCamera: {
            type: Boolean,
            attribute: "no-camera"
          },

          /**
           * No Voice Recording
           */
          noVoiceRecord: {
            type: Boolean,
            attribute: "no-voice-record"
          }
        });
      }
    }]);
    return SimpleFieldsUpload;
  }((0, _simpleFieldsFieldset.SimpleFieldsFieldsetBehaviors)(_litElement.LitElement));

  _exports.SimpleFieldsUpload = SimpleFieldsUpload;
  window.customElements.define(SimpleFieldsUpload.tag, SimpleFieldsUpload);
});