define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-button.js", "../../../simple-picker/simple-picker.js"], function (_exports, _litElement, _richTextEditorButton, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPickerBehaviors = _exports.RichTextEditorPicker = void 0;

  var _templateObject_be34da50af6311ebbe560fe9c4727db1, _templateObject2_be34da50af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * RichTextEditorPickerBehaviors
   *
   * @customElement
   * @class
   * @lit-html
   * @lit-element
   * @extends RichTextEditorButtonBehaviors
   */
  var RichTextEditorPickerBehaviors = function RichTextEditorPickerBehaviors(SuperClass) {
    return /*#__PURE__*/function (_RichTextEditorButton) {
      babelHelpers.inherits(_class, _RichTextEditorButton);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.allowNull = false;
        _this.command = "insertHTML";
        _this.label = "Insert link";
        _this.titleAsHtml = false;
        _this.value = null;
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "render",
        value: function render() {
          return (0, _litElement.html)(_templateObject_be34da50af6311ebbe560fe9c4727db1 || (_templateObject_be34da50af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n        <simple-picker\n          id=\"button\"\n          ?allow-null=\"", "\"\n          class=\"rtebutton ", "\"\n          ?disabled=\"", "\"\n          controls=\"", "\"\n          .options=\"", "\"\n          @mouseover=\"", "\"\n          @keydown=\"", "\"\n          @value-changed=\"", "\"\n          tabindex=\"0\"\n          ?title-as-html=\"", "\"\n        >\n          ", "\n        </simple-picker>\n        ", "\n      "])), this.allowNull, this.toggled ? "toggled" : "", this.disabled, babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "controls", this), this.options, this._pickerFocus, this._pickerFocus, this._pickerChange, this.titleAsHtml, babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "labelTemplate", this), babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "tooltopTemplate", this));
        }
      }, {
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);

          this._setOptions();
        }
        /**
         * overrides RichTextEditorButtonBehaviors
         * toggle button behaviors
         *
         * @param {object} text selected range
         * @returns {boolean} whether button is toggled
         *
         */

      }, {
        key: "isToggled",
        get: function get() {
          return false;
        }
        /**
         * handles picker focus
         * @param {event} e the button tap event
         */

      }, {
        key: "_pickerFocus",
        value: function _pickerFocus(e) {
          e.preventDefault();
        }
        /**
         * handles range changes by getting
         */

      }, {
        key: "_rangeChanged",
        value: function _rangeChanged() {
          var val = this._getSelection();

          if (this.shadowRoot) {
            if (this.tagsArray.includes(val)) {
              this.shadowRoot.querySelector("#button").value = val;
            } else if (!this.range || this.range.collapsed) {
              this.shadowRoot.querySelector("#button").value = null;
            }
          }

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "_rangeChanged", this).call(this);
        }
        /**
         * override to handle custom options
         */

      }, {
        key: "_setOptions",
        value: function _setOptions() {
          return this.options = this._setPickerOptions();
        }
        /**
         * gets a list of icons and load them in a format
         * that simple-picker can take;
         * if no icons are provided, loads a list from iron-meta
         *
         * @param {array} a list of custom icons for picker
         * @returns {array}
         */

      }, {
        key: "_setPickerOptions",
        value: function _setPickerOptions() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options || [];
          var items = [],
              cols = Math.sqrt(options.length) < 11 ? Math.ceil(Math.sqrt(options.length)) : 10;
          options.forEach(function (option, i) {
            var row = Math.floor(i / cols),
                col = i - row * cols;
            if (!items[row]) items[row] = [];
            items[row][col] = option;
          });
          return items;
        }
        /**
         * Picker change
         */

      }, {
        key: "_pickerChange",
        value: function _pickerChange(e) {
          var val = this._getSelectionType() || "";
          this.commandVal = e.detail.value || "";
          /* only update when there is an actual change */

          if (this.range && val !== this.commandVal) {
            this.sendCommand();
          }
        }
      }], [{
        key: "tag",
        get:
        /**
         * Store tag name to make it easier to obtain directly.
         */
        function get() {
          return "rich-text-editor-picker";
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)), [(0, _litElement.css)(_templateObject2_be34da50af6311ebbe560fe9c4727db1 || (_templateObject2_be34da50af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            --simple-picker-background-color: var(--simple-toolbar-button-bg);\n            --simple-picker-color-active: var(\n              --simple-toolbar-button-hover-color\n            );\n            --simple-picker-background-color-active: var(\n              --simple-toolbar-button-hover-bg\n            );\n            --simple-picker-color-disabled: var(\n              --simple-toolbar-button-disabled-color\n            );\n            --simple-picker-background-color-disabled: var(\n              --simple-toolbar-button-disabled-bg\n            );\n            --simple-picker-border-radius: 0px;\n            --simple-picker-border-width: 0px;\n            --simple-picker-option-size: calc(\n              24px - 2 * var(--simple-picker-sample-padding, 2px)\n            );\n            --simple-picker-icon-size: 16px;\n            --simple-picker-options-border-width: 1px;\n          }\n          #button {\n            margin-top: 0;\n            margin-bottom: 0;\n          }\n        "])))]);
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * Allow a null option to be selected?
             */
            allowNull: {
              type: Boolean
            },

            /**
             * command used for document.execCommand.
             */
            command: {
              type: String
            },

            /**
             * Optional icon for null value
             */
            icon: {
              type: String
            },

            /**
             * Renders html as title. (Good for titles with HTML in them.)
             */
            titleAsHtml: {
              type: Boolean
            },

            /**
             * value of elected options
             */
            value: {
              type: Object
            }
          });
        }
      }]);
      return _class;
    }((0, _richTextEditorButton.RichTextEditorButtonBehaviors)(SuperClass));
  };
  /**
   * `rich-text-editor-picker`
   * a picker for rich text editor (custom buttons can RichTextEditorPickerBehaviors)
   *
   * @extends RichTextEditorPickerBehaviors
   * @extends LitElement
   * @customElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-picker
   * @demo ./demo/buttons.html
   */


  _exports.RichTextEditorPickerBehaviors = RichTextEditorPickerBehaviors;

  var RichTextEditorPicker = /*#__PURE__*/function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorPicker, _RichTextEditorPicker);

    var _super2 = _createSuper(RichTextEditorPicker);

    function RichTextEditorPicker() {
      babelHelpers.classCallCheck(this, RichTextEditorPicker);
      return _super2.apply(this, arguments);
    }

    return RichTextEditorPicker;
  }(RichTextEditorPickerBehaviors(_litElement.LitElement));

  _exports.RichTextEditorPicker = RichTextEditorPicker;
  window.customElements.define(RichTextEditorPicker.tag, RichTextEditorPicker);
});