define(["exports", "../../../lit-element/lit-element.js", "./hax-store.js", "./hax-context-item.js", "./hax-toolbar-menu.js", "../../simple-toolbar/lib/simple-toolbar-menu-item.js", "./hax-toolbar.js", "../../utils/utils.js", "./hax-context-behaviors.js", "../../../mobx/dist/mobx.esm.js", "../../i18n-manager/lib/I18NMixin.js"], function (_exports, _litElement, _haxStore, _haxContextItem, _haxToolbarMenu, _simpleToolbarMenuItem, _haxToolbar, _utils, _haxContextBehaviors, _mobxEsm, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;

  var _templateObject_b06dc8a0af6311ebbe560fe9c4727db1, _templateObject2_b06dc8a0af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   * @element hax-ce-context
   */
  var HaxCeContext = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxCeContext, _I18NMixin);

    var _super = _createSuper(HaxCeContext);

    function HaxCeContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxCeContext);
      _this = _super.call(this);
      _this.t = {
        changeTo: "Change to",
        modifyHTMLSource: "Modify HTML source",
        clickToChange: "Click to change",
        insertItemAbove: "Insert item above",
        insertItemAboveOrBelow: "Insert item above or below",
        insertItemBelow: "Insert item below"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      });

      _this.haxUIElement = true;
      _this.onScreen = false;
      _this.ceButtons = [];
      _this.activeTagName = "";
      _this.activeTagIcon = "hax:paragraph";

      _this.addEventListener("hax-context-item-selected", _this.handleCECustomEvent.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HaxCeContext, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "onScreen" && _this2.onScreen) {
            _this2._resetCEMenu();
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return (0, _litElement.html)(_templateObject_b06dc8a0af6311ebbe560fe9c4727db1 || (_templateObject_b06dc8a0af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"toolbar\">\n        <hax-toolbar>\n          <div class=\"group\">\n            <hax-context-item\n              action\n              more\n              .icon=\"", "\"\n              label=\"", "..\"\n              tooltip=\"", ", ", "\"\n              ?disabled=\"", "\"\n              event-name=\"hax-transform-node\"\n              show-text-label\n            ></hax-context-item>\n            <slot name=\"primary\"></slot>\n          </div>\n          <div class=\"group\">\n            ", "\n            <slot name=\"secondary\"></slot>\n          </div>\n          <div class=\"group\">\n            <hax-context-item\n              action\n              icon=\"icons:code\"\n              label=\"", "\"\n              ?disabled=\"", "\"\n              event-name=\"hax-source-view-toggle\"\n              toggles\n              ?toggled=\"", "\"\n              @click=\"", "\"\n            ></hax-context-item>\n            <slot name=\"more\"></slot>\n          </div>\n          <div class=\"group\">\n            <hax-toolbar-menu\n              icon=\"add\"\n              label=\"", "\"\n            >\n              <simple-toolbar-menu-item slot=\"menuitem\">\n                <hax-context-item\n                  action\n                  align-horizontal=\"left\"\n                  show-text-label\n                  role=\"menuitem\"\n                  icon=\"hardware:keyboard-arrow-up\"\n                  event-name=\"insert-above-active\"\n                  label=\"", "\"\n                ></hax-context-item>\n              </simple-toolbar-menu-item>\n              <simple-toolbar-menu-item slot=\"menuitem\">\n                <hax-context-item\n                  action\n                  align-horizontal=\"left\"\n                  show-text-label\n                  role=\"menuitem\"\n                  icon=\"hardware:keyboard-arrow-down\"\n                  event-name=\"insert-below-active\"\n                  label=\"", "\"\n                ></hax-context-item>\n              </simple-toolbar-menu-item>\n            </hax-toolbar-menu>\n          </div>\n        </hax-toolbar>\n      </div>\n    "])), this.activeTagIcon, this.t.changeTo, this.activeTagName, this.t.clickToChange, this.disableTransform, this.ceButtons.map(function (el) {
          return (0, _litElement.html)(_templateObject2_b06dc8a0af6311ebbe560fe9c4727db1 || (_templateObject2_b06dc8a0af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" <hax-context-item\n                action\n                icon=\"", "\"\n                label=\"", "\"\n                event-name=\"hax-ce-custom-button\"\n                value=\"", "\"\n              ></hax-context-item>"])), el.icon, el.label, el.callback);
        }), this.t.modifyHTMLSource, !this.sourceView, this.viewSource, function (e) {
          return _this3.viewSource = !_this3.viewSource;
        }, this.t.insertItemAboveOrBelow, this.t.insertItemAbove, this.t.insertItemBelow);
      }
    }, {
      key: "handleCECustomEvent",
      value: function handleCECustomEvent(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "hax-ce-custom-button":
            if (this.activeNode && typeof this.activeNode[detail.value] === "function") {
              if (this.activeNode[detail.value](e)) {
                _haxStore.HAXStore.refreshActiveNodeForm();
              }
            }

            break;
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this4 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        (0, _mobxEsm.autorun)(function () {
          _this4.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

          if (_this4.activeNode && _this4.activeNode.classList) {
            _this4._resetCEMenu();
          }
        });
      }
      /**
       * HAX properties changed, update buttons available.
       */

    }, {
      key: "_resetCEMenu",
      value: function () {
        var _resetCEMenu2 = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var schema, list;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (this.shadowRoot) {
                    (0, _utils.wipeSlot)(this, "*");
                  } // reset buttons in-case this element has new ones


                  this.ceButtons = [];
                  this.viewSource = false;

                  if (!(_haxStore.HAXStore.activeHaxBody && this.activeNode != null)) {
                    _context.next = 14;
                    break;
                  }

                  schema = _haxStore.HAXStore.haxSchemaFromTag(this.activeNode.tagName);
                  this.sourceView = schema.canEditSource;

                  if (_haxStore.HAXStore.isTextElement(this.activeNode)) {
                    _context.next = 12;
                    break;
                  }

                  _context.next = 9;
                  return _haxStore.HAXStore.activeHaxBody.replaceElementWorkflow(this.activeNode, true);

                case 9:
                  list = _context.sent;
                  this.disableTransform = list.length === 0 ? true : false;

                  if (_haxStore.HAXStore.activeGizmo) {
                    this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
                    this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
                  }

                case 12:
                  _context.next = 16;
                  break;

                case 14:
                  this.activeTagName = "";
                  this.activeTagIcon = "";

                case 16:
                  _context.next = 18;
                  return _haxStore.HAXStore.runHook(this.activeNode, "inlineContextMenu", [this]);

                case 18:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _resetCEMenu() {
          return _resetCEMenu2.apply(this, arguments);
        }

        return _resetCEMenu;
      }()
    }], [{
      key: "styles",
      get: function get() {
        return babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext), "styles", this));
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-ce-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext), "properties", this)), {}, {
          disableTransform: {
            type: Boolean
          },
          onScreen: {
            type: Boolean,
            attribute: "on-screen",
            reflect: true
          },
          sourceView: {
            type: Boolean
          },
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          },
          ceButtons: {
            type: Array
          },
          viewSource: {
            type: Boolean
          }
        });
      }
    }]);
    return HaxCeContext;
  }((0, _I18NMixin2.I18NMixin)((0, _haxContextBehaviors.HaxContextBehaviors)(_litElement.LitElement)));

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});