define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-prompt-button.js"], function (_exports, _litElement, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorImage = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-image`
   * an inline image button for rich text editor
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @extends RichTextEditorPromptButtonBehaviors
   * @extends LitElement
   * @element rich-text-editor-image
   * @demo ./demo/buttons.html
   */
  var RichTextEditorImage = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(RichTextEditorImage, _RichTextEditorPrompt);

    var _super = _createSuper(RichTextEditorImage);

    function RichTextEditorImage() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorImage);
      _this = _super.call(this);
      _this.fields = [{
        property: "src",
        title: "Image URL",
        description: "The image URL. (Leave blank to remove.)",
        inputMethod: "textfield"
      }, {
        property: "alt",
        title: "Alt Text",
        inputMethod: "textfield"
      }, {
        property: "width",
        title: "Width",
        inputMethod: "textfield",
        inline: true
      }, {
        property: "height",
        title: "Height",
        inputMethod: "textfield",
        inline: true
      }];
      _this.command = "insertHTML";
      _this.label = "Insert Inline Image";
      _this.icon = "editor:insert-photo";
      _this.tagsList = "img";
      _this.value = {};
      return _this;
    }
    /**
     * overrides RichTextEditorPromptButtonBehaviors
     * so that isToggled is based on toggled property
     *
     * @readonly
     * @memberof RichTextEditorImage
     */


    babelHelpers.createClass(RichTextEditorImage, [{
      key: "render",
      value: // render function for template
      function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorImage.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }, {
      key: "isToggled",
      get: function get() {
        return this.toggled;
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to customize for setting image properties
       *
       * @param {object} node selected node
       * @memberof RichTextEditorImage
       */

    }, {
      key: "promptCommandVal",
      get: function get() {
        var alt = this.getPropValue("alt"),
            src = this.getPropValue("src"),
            width = this.getPropValue("width"),
            height = this.getPropValue("height");
        return !src ? "" : "<img src=\"".concat(src, "\"").concat(!alt ? "" : " alt=\"".concat(alt, "\"")).concat(!width ? "" : " width=\"".concat(width, "\"")).concat(!height ? "" : " width=\"".concat(height, "\""), ">");
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to customize for getting selected image properties
       *
       * @param {object} node selected node
       * @memberof RichTextEditorImage
       */

    }, {
      key: "getValue",
      value: function getValue(node) {
        var img = node || this.rangeQuery();
        return !img ? undefined : {
          alt: !img ? undefined : img.getAttribute("alt"),
          src: !img ? undefined : img.getAttribute("src"),
          width: !img ? undefined : img.getAttribute("width"),
          height: !img ? undefined : img.getAttribute("height")
        };
      }
      /**
       * overrides RichTextEditorPickerBehaviors
       * sets toggle based on whether an image is selected
       *
       * @memberof RichTextEditorLink
       */

    }, {
      key: "setToggled",
      value: function setToggled() {
        this.toggled = !!this.value;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "rich-text-editor-image";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorImage), "properties", this));
      }
    }]);
    return RichTextEditorImage;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorImage = RichTextEditorImage;
  window.customElements.define(RichTextEditorImage.tag, RichTextEditorImage);
});