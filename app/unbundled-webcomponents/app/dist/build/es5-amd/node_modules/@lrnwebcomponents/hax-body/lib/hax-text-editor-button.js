define(["exports", "../../../lit-element/lit-element.js", "../../rich-text-editor/lib/buttons/rich-text-editor-prompt-button.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _litElement, _richTextEditorPromptButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTextEditorButton = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-text-editor-button`
   * a custom-element button for hax text editor (custom buttons can extend this)
   *
   * @extends RichTextEditorPromptButtonBehaviors
   * @extends LitElement
   * @customElement
   * @demo demo/index.html
   */
  var HaxTextEditorButton = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(HaxTextEditorButton, _RichTextEditorPrompt);

    var _super = _createSuper(HaxTextEditorButton);

    function HaxTextEditorButton() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTextEditorButton);
      _this = _super.call(this);
      _this.tag = HaxTextEditorButton.tag;
      _this.toggles = true;
      _this.value = {};
      _this.command = "insertHTML";
      return _this;
    }

    babelHelpers.createClass(HaxTextEditorButton, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "element" && _this2.element) _this2.updateElement();
        });
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to set custom gizmo property and slot values
       *
       * @memberof HaxTextEditorButton
       */

    }, {
      key: "updateElement",
      value: function updateElement() {
        var el = this.element || {},
            settings = el.settings || {},
            gizmo = el.gizmo || {};
        this.fields = [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "fields", this)), babelHelpers.toConsumableArray((settings.configure || []).map(function (f) {
          if (f.inputMethod === "code-editor") f.inputMethod = "textfield";
          return f;
        }).filter(function (f) {
          return f.slot !== "";
        })));
        this.tagsList = gizmo.tag || "span";
        this.icon = gizmo.icon || "add";
        this.label = gizmo.title || "Add ".concat(gizmo.tag);
        this.updateButton();
      }
      /**
       * overriden from RichTextEditorPromptButtonBehaviors:
       * to determin if gizmo will be inserted
       * @memberof HaxTextEditorButton
       */

    }, {
      key: "promptCommandVal",
      get: function get() {
        return this.value;
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to get custom gizmo property and slot values
       *
       * @param {object} node selected node
       * @memberof HaxTextEditorButton
       */

    }, {
      key: "getValue",
      value: function getValue(node) {
        var el = node || this.rangeElement(),
            val = babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "getValue", this).call(this);

        if (el) {
          this.fields.forEach(function (field) {
            if (field.property && field.property !== "innerHTML") val[field.property] = el[field.property];

            if (field.slot && field.slot !== "") {
              var slot = el.querySelector("[slot=".concat(field.slot, "]"));
              val[field.slot] = !slot ? undefined : slot.innerHTML;
            }
          });
        }

        return !el ? undefined : val;
      }
    }, {
      key: "setToggled",
      value: function setToggled() {
        this.toggled = !!this.value;
      }
      /**
       * overrides RichTextEditorPromptButtonBehaviors
       * to perform a custom gizmo insert
       *
       * @param {string} [command=this.operationCommand]
       * @param {string} [commandVal=this.operationCommandVal]
       * @param {object} [range=this.range]
       * @memberof HaxTextEditorButton
       */

    }, {
      key: "sendCommand",
      value: function sendCommand() {
        var _this3 = this;

        var command = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.operationCommand;
        var commandVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.operationCommandVal;
        var range = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.range;
        var node = document.createElement(this.tagsList);
        this.fields.forEach(function (field) {
          if (!!field.property) node[field.property] = _this3.value[field.property];
          node.innerHTML = _this3.value.innerHTML;

          if (!!field.slot && field.slot !== "") {
            var div = document.createElement("div");
            div.slot = field.slot;
            div.innerHTML = _this3.value[field.slot];
            node.append(div);
          }
        });

        if (!!this.selectedNode) {
          //make sure old inline widgets are clear
          this.selectedNode.remove();
        } else {
          //empties inline text nodes
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton.prototype), "sendCommand", this).call(this, command, "", range);
        } //inserts new updated widget


        range.insertNode(node);
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      function get() {
        return "hax-text-editor-button";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditorButton), "properties", this)), {}, {
          element: {
            type: Object
          }
        });
      }
    }]);
    return HaxTextEditorButton;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement));

  _exports.HaxTextEditorButton = HaxTextEditorButton;
  window.customElements.define(HaxTextEditorButton.tag, HaxTextEditorButton);
});