define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "../i18n-manager/lib/I18NMixin.js", "../utils/utils.js", "../utils/lib/gSheetsInterface.js", "../simple-fields/lib/simple-fields-field.js", "../simple-fields/lib/simple-fields-tag-list.js", "../a11y-collapse/a11y-collapse.js", "../a11y-collapse/lib/a11y-collapse-group.js", "../editable-table/lib/editable-table-display.js", "../a11y-tabs/a11y-tabs.js", "../a11y-tabs/lib/a11y-tab.js", "../grid-plate/grid-plate.js", "../iframe-loader/lib/loading-indicator.js", "./lib/grade-book-student-block.js", "./lib/letter-grade.js", "../../@github/time-elements/dist/time-elements.js"], function (_exports, meta, _require, _litElement, _simpleColors, _I18NMixin2, _utils, _gSheetsInterface, _simpleFieldsField, _simpleFieldsTagList, _a11yCollapse, _a11yCollapseGroup, _editableTableDisplay, _a11yTabs, _a11yTab, _gridPlate, _loadingIndicator, _gradeBookStudentBlock, _letterGrade, _timeElements) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GradeBook = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  var _templateObject_6615a610af6311ebbe560fe9c4727db1, _templateObject2_6615a610af6311ebbe560fe9c4727db1, _templateObject3_6615a610af6311ebbe560fe9c4727db1, _templateObject4_6615a610af6311ebbe560fe9c4727db1, _templateObject5_6615a610af6311ebbe560fe9c4727db1, _templateObject6_6615a610af6311ebbe560fe9c4727db1, _templateObject7_6615a610af6311ebbe560fe9c4727db1, _templateObject8_6615a610af6311ebbe560fe9c4727db1, _templateObject9_6615a610af6311ebbe560fe9c4727db1, _templateObject10_6615a610af6311ebbe560fe9c4727db1, _templateObject11_6615a610af6311ebbe560fe9c4727db1, _templateObject12_6615a610af6311ebbe560fe9c4727db1, _templateObject13_6615a610af6311ebbe560fe9c4727db1, _templateObject14_6615a610af6311ebbe560fe9c4727db1, _templateObject15_6615a610af6311ebbe560fe9c4727db1, _templateObject16_6615a610af6311ebbe560fe9c4727db1, _templateObject17_6615a610af6311ebbe560fe9c4727db1, _templateObject18_6615a610af6311ebbe560fe9c4727db1, _templateObject19_6615a610af6311ebbe560fe9c4727db1, _templateObject20_6615a610af6311ebbe560fe9c4727db1, _templateObject21_6615a610af6311ebbe560fe9c4727db1, _templateObject22_6615a610af6311ebbe560fe9c4727db1, _templateObject23_6615a610af6311ebbe560fe9c4727db1, _templateObject24_6615a610af6311ebbe560fe9c4727db1, _templateObject25_6615a610af6311ebbe560fe9c4727db1, _templateObject26_6615a610af6311ebbe560fe9c4727db1, _templateObject27_6615a610af6311ebbe560fe9c4727db1, _templateObject28_6615a610af6311ebbe560fe9c4727db1, _templateObject29_6615a610af6311ebbe560fe9c4727db1, _templateObject30_6615a610af6311ebbe560fe9c4727db1, _templateObject31_6615a610af6311ebbe560fe9c4727db1, _templateObject32_6615a610af6311ebbe560fe9c4727db1, _templateObject33_6615a610af6311ebbe560fe9c4727db1, _templateObject34_6615a610af6311ebbe560fe9c4727db1, _templateObject35_6615a610af6311ebbe560fe9c4727db1, _templateObject36_6615a610af6311ebbe560fe9c4727db1;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `grade-book`
   * `A headless gradebook that supports multiple backends with rubrics`
   * @demo demo/index.html
   * @element grade-book
   */
  var GradeBook = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(GradeBook, _I18NMixin);

    var _super = _createSuper(GradeBook);

    function GradeBook() {
      var _this;

      babelHelpers.classCallCheck(this, GradeBook);
      _this = _super.call(this); // gid from the google sheet. technically if you add / remove sheets this would
      // have to be updated to match

      _this.gSheet = new _gSheetsInterface.gSheetInterface(babelHelpers.assertThisInitialized(_this), {
        tags: 0,
        roster: 118800528,
        assignments: 540222065,
        rubrics: 1744429439,
        submissions: 2104732668,
        gradeScale: 980501320,
        grades: 2130903440,
        gradesDetails: 644559151,
        settings: 1413275461
      }); // storing internals of the assessmentView tab

      _this.assessmentView = _this.resetAssessmentView();
      _this.totalScore = 0; // active ID in the array of the student being reviewed

      _this.activeStudent = 0; // active ID in the array of the assignment being reviewed

      _this.activeAssignment = 0; // active Submission is the data itself

      _this.activeSubmission = null; // student submission status for rendering

      _this.activeStudentSubmissions = []; // lock on score override

      _this.scoreLock = true; // active rubric data

      _this.activeRubric = []; // the active grade sheet

      _this.activeGrading = {}; // internal data structure of the "app". This is bridging all data from the
      // backend sheets and then informing how our application works

      _this.database = {
        tags: {
          categories: [],
          data: []
        },
        submissions: [],
        rubrics: [],
        assignments: [],
        roster: [],
        grades: {},
        gradesDetails: {},
        gradeScale: [],
        settings: {}
      }; // general state

      _this.hideGradeScale = true;
      _this.disabled = false; // shows progress indicator as it loads

      _this.loading = true; // translatable text

      _this.t = {
        csvURL: "CSV URL",
        debugData: "Debug data",
        points: "Points",
        criteria: "Criteria",
        description: "Description",
        assessmentWeight: "Assessment Weight",
        overallFeedback: "Overall feedback",
        letterGrade: "Letter grade",
        highRange: "High range",
        lowRange: "Low range",
        noSubmission: "No submission found",
        studentSubmission: "Student submission",
        openInNewWindow: "Open in new window",
        gradingScale: "Grading Scale"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        basePath: meta.url,
        locales: ["es", "fr", "de"]
      }); // notice that a category on the active grading area responded that it changed


      _this.addEventListener("simple-fields-tag-list-changed", _this.qualitativeFeedbackUpdate.bind(babelHelpers.assertThisInitialized(_this))); // value change within the rubric area


      _this.addEventListener("value-changed", _this.rubricCriteriaPointsChange); // drop event to remove the styling from droppable areas


      _this.addEventListener("drop", _this._handleDragDrop.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(GradeBook, [{
      key: "resetAssessmentView",
      value: function resetAssessmentView() {
        return {
          qualitative: [],
          written: []
        };
      }
      /**
       * Return an object representing all scores on all assignments
       * which allows us to make a visual of all submissions this student
       * has had.
       */

    }, {
      key: "getStudentSubmissions",
      value: function getStudentSubmissions(activeStudent) {
        var response = [];

        for (var i in this.database.submissions) {
          var row = this.database.submissions[i]; // look for student, need a match before we render anything

          if (row.student === this.database.roster[activeStudent].student) {
            for (var j in row) {
              if (j !== "student") {
                var a = this.getAssignmentByShortName(j);

                if (a) {
                  response.push({
                    studentScore: this.database.grades[activeStudent][j] == "" ? null : this.database.grades[activeStudent][j],
                    assignmentPoints: a.points,
                    assignmentName: a.name,
                    assignmentIndex: a.index
                  });
                }
              }
            }

            return response;
          }
        }

        return response;
      }
    }, {
      key: "getAssignmentByShortName",
      value: function getAssignmentByShortName(name) {
        var index;
        var item = this.database.assignments.filter(function (i, ind) {
          if (i.shortName === name) {
            index = ind;
            return true;
          }

          return false;
        });

        if (item.length === 1) {
          item[0].index = index;
          return item[0];
        }

        return null;
      } // generate current score based on student / assignment cross-section

    }, {
      key: "getCurrentScore",
      value: function getCurrentScore(activeStudent, activeAssignment) {
        // see if there's a score set in the grades setup
        if (this.database.grades[activeStudent][this.database.assignments[activeAssignment].shortName]) {
          return this.database.grades[activeStudent][this.database.assignments[activeAssignment].shortName];
        }

        return 0;
      } // return the active submission based on student and assignment

    }, {
      key: "getActiveSubmission",
      value: function getActiveSubmission() {
        for (var i in this.database.submissions) {
          var row = this.database.submissions[i]; // look for student AND that the assignment column name is there

          if (row.student === this.database.roster[this.activeStudent].student && row[this.database.assignments[this.activeAssignment].shortName]) {
            return row[this.database.assignments[this.activeAssignment].shortName];
          }
        }

        return null;
      } // return the active rurbic based on active assignment

    }, {
      key: "getActiveRubric",
      value: function getActiveRubric() {
        var _this2 = this;

        return this.database.rubrics.filter(function (item) {
          return item.shortName == _this2.database.assignments[_this2.activeAssignment].rubric;
        });
      }
      /**
       * LitElement life cycle for property change notification
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(GradeBook.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(GradeBook.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          // support debugging, only import debugger element if needed
          if (propName == "debug" && _this3[propName]) {
            new Promise(function (res, rej) {
              return _require.default(["../csv-render/csv-render.js"], res, rej);
            });
          } // set rubric based on assignment


          if (["activeAssignment", "activeStudent", "database", "loading"].includes(propName)) {
            _this3.activeSubmission = _this3.getActiveSubmission();
            _this3.assessmentView = _this3.resetAssessmentView();
            _this3.activeRubric = _this3.getActiveRubric();
            _this3.activeStudentSubmissions = [];
            _this3.activeStudentSubmissions = babelHelpers.toConsumableArray(_this3.getStudentSubmissions(_this3.activeStudent)); // ensure we maintain visibility of the active student / assignment
            // in our mini-map; delay to ensure paints pixel before visibility

            if (_this3.shadowRoot && _this3.shadowRoot.querySelector(".mini-map div[data-active-assignment-student-pixel]")) {
              setTimeout(function () {
                _this3.shadowRoot.querySelector(".mini-map").scrollTop = _this3.shadowRoot.querySelector(".mini-map div[data-active-assignment-student-pixel]").offsetTop - 120 - _this3.shadowRoot.querySelector(".mini-map").offsetTop;
              }, 100);
            }
          } // source will have to fetch ALL the pages and slowly load data as it rolls through


          if (propName == "sheet" && _this3[propName]) {
            // minor debounce just in case source changes from input
            clearTimeout(_this3.__debouce);
            _this3.__debouce = setTimeout( /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var i;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _this3.loading = true;
                      _this3.gSheet.sheet = _this3[propName];
                      _context.t0 = regeneratorRuntime.keys(_this3.gSheet.sheetGids);

                    case 3:
                      if ((_context.t1 = _context.t0()).done) {
                        _context.next = 11;
                        break;
                      }

                      i = _context.t1.value;
                      _context.next = 7;
                      return _this3.gSheet.loadSheetData(i);

                    case 7:
                      _this3.database[i] = _context.sent;

                      // complex data update that I am sure will not be picked up by LitElement
                      // this forces an update
                      _this3.requestUpdate();

                      _context.next = 3;
                      break;

                    case 11:
                      _this3.loading = false; // ensure the letter-grade tags KNOW about the database refresh
                      // @todo this is a mobx thing for sure, should not be passing this blob of data
                      // in constantly

                      setTimeout(function () {
                        if (_this3.database.gradeScale.length > 0) {
                          var lg = _this3.shadowRoot.querySelectorAll("letter-grade");

                          for (var i in Array.from(lg)) {
                            lg[i].gradeScale = _this3.database.gradeScale;
                          }
                        }
                      }, 0);

                    case 13:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })), 0);
          }
        });
      }
      /**
       * process assignment data to normalize date string
       */

    }, {
      key: "processassignmentsData",
      value: function processassignmentsData(table, headings, data) {
        for (var i in data) {
          var event = new Date("".concat(data[i].dueDate, " ").concat(data[i].dueTime));
          data[i]._ISODueDate = event.toISOString();
        }

        return data;
      }
      /**
       * Process our tagging structure for use in the rubric
       * Tag structure allows the instructor to drag and drop elements into
       * qualitative areas of a rubric
       */

    }, {
      key: "processtagsData",
      value: function processtagsData(table, headings, data) {
        var categories = new Set([]);
        var rCategories = []; // these must all exist as keys for us to proceed

        for (var i in data) {
          data[i].category = data[i].category ? data[i].category.split(",") : [];
          data[i].associatedMaterial = data[i].associatedMaterial ? data[i].associatedMaterial.split(",") : []; // trick to dedup the categories using a Set

          data[i].category.forEach(function (item) {
            categories.add(item);
          }); // convert Set to Array for data visualization purposes

          rCategories = babelHelpers.toConsumableArray(Array.from(categories));
        }

        return {
          categories: rCategories,
          data: data
        };
      }
    }, {
      key: "processrubricsData",
      value: function processrubricsData(table, headings, data) {
        for (var i in data) {
          data[i].qualitative = data[i].qualitative ? data[i].qualitative.split(",") : [];
        }

        return data;
      }
    }, {
      key: "processrosterData",
      value: function processrosterData(table, headings, data) {
        for (var i in data) {
          data[i].interests = data[i].interests ? data[i].interests.split(",") : [];
        }

        return data;
      }
    }, {
      key: "processsettingsData",
      value: function processsettingsData(table, headings, data) {
        var d = {};

        for (var i in data) {
          d[data[i].key] = data[i].value;
        }

        return d;
      }
    }, {
      key: "changeStudent",
      value: function changeStudent(e) {
        if (e.target.value == "prev" && 0 !== this.activeStudent) {
          this.activeStudent--;
        } else if (e.target.value == "next" && this.database.roster.length - 1 !== this.activeStudent) {
          this.activeStudent++;
        }

        this.requestUpdate();
      }
    }, {
      key: "changeAssignment",
      value: function changeAssignment(e) {
        if (e.target.value == "prev" && 0 !== this.activeAssignment) {
          this.activeAssignment--;
        } else if (e.target.value == "next" && this.database.assignments.length - 1 !== this.activeAssignment) {
          this.activeAssignment++;
        }

        this.requestUpdate();
      }
    }, {
      key: "renderSubmission",
      value: // render submission; guessing game really :)
      function renderSubmission(data) {
        var pre = (0, _litElement.html)(_templateObject_6615a610af6311ebbe560fe9c4727db1 || (_templateObject_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<h3>", "</h3>"])), this.t.studentSubmission); // test if this smells like a URL

        if ((0, _utils.validURL)(data)) {
          pre = (0, _litElement.html)(_templateObject2_6615a610af6311ebbe560fe9c4727db1 || (_templateObject2_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", "<a\n          href=\"", "\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          ><simple-icon-button-lite\n            label=\"", "\"\n            icon=\"open-in-new\"\n          ></simple-icon-button-lite\n        ></a>"])), pre, data, this.t.openInNewWindow); // see if this is a video we know about

          if (data != (0, _utils.cleanVideoSource)(data)) {
            // implies it was able to clean it up in some way
            new Promise(function (res, rej) {
              return _require.default(["../video-player/video-player.js"], res, rej);
            });
            return (0, _litElement.html)(_templateObject3_6615a610af6311ebbe560fe9c4727db1 || (_templateObject3_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", "<video-player\n            class=\"active-submission\"\n            source=\"", "\"\n            width=\"60%\"\n          ></video-player>"])), pre, data);
          } else {
            return (0, _litElement.html)(_templateObject4_6615a610af6311ebbe560fe9c4727db1 || (_templateObject4_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", "\n          <div class=\"active-submission\">\n            <iframe\n              src=\"", "\"\n              loading=\"lazy\"\n              width=\"100%\"\n              height=\"100%\"\n            ></iframe>\n          </div>"])), pre, data);
          }
        } else {
          // see if we can just present this as data
          new Promise(function (res, rej) {
            return _require.default(["../md-block/md-block.js"], res, rej);
          });
          return (0, _litElement.html)(_templateObject5_6615a610af6311ebbe560fe9c4727db1 || (_templateObject5_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", "\n        <div class=\"active-submission\">\n          <md-block .markdown=\"", "\"></md-block>\n        </div>"])), pre, data);
        }
      }
    }, {
      key: "studentLetterGradeHistoryClick",
      value: function studentLetterGradeHistoryClick(e) {
        // ensure this is numeric
        this.activeAssignment = parseInt(e.target.value);
        this.requestUpdate();
      }
    }, {
      key: "toggleGradeScale",
      value: function toggleGradeScale(e) {
        new Promise(function (res, rej) {
          return _require.default(["../simple-popover/simple-popover.js"], res, rej);
        });
        this.hideGradeScale = !this.hideGradeScale;
      }
      /**
       * LitElement render method
       */

    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        return (0, _litElement.html)(_templateObject6_6615a610af6311ebbe560fe9c4727db1 || (_templateObject6_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n      <grid-plate layout=\"1-1-1\">\n        <div slot=\"col-1\">\n          <simple-icon-button-lite\n            @click=\"", "\"\n            value=\"prev\"\n            ?disabled=\"", "\"\n            icon=\"arrow-back\"\n          >\n            Previous student\n          </simple-icon-button-lite>\n          <simple-icon-button-lite\n            @click=\"", "\"\n            value=\"next\"\n            icon=\"arrow-forward\"\n            ?disabled=\"", "\"\n          >\n            Next student\n          </simple-icon-button-lite>\n        </div>\n        <div slot=\"col-2\">\n          <simple-icon-button-lite\n            @click=\"", "\"\n            value=\"prev\"\n            icon=\"arrow-back\"\n            ?disabled=\"", "\"\n          >\n            Previous assignment\n          </simple-icon-button-lite>\n          <simple-icon-button-lite\n            @click=\"", "\"\n            value=\"next\"\n            ?disabled=\"", "\"\n            icon=\"arrow-forward\"\n          >\n            Next Assignment\n          </simple-icon-button-lite>\n          <simple-icon-button-lite\n            icon=\"list\"\n            @click=\"", "\"\n            id=\"gradescalebtn\"\n          >\n            ", "\n          </simple-icon-button-lite>\n          <simple-popover\n            ?hidden=\"", "\"\n            for=\"gradescalebtn\"\n            auto\n          >\n            <editable-table-display\n              accent-color=\"", "\"\n              bordered\n              column-header\n              condensed\n              disable-responsive\n              scroll\n              striped\n            >\n              <table>\n                <tbody>\n                  <tr>\n                    <td>", "</td>\n                    <td>", "</td>\n                    <td>", "</td>\n                  </tr>\n                  ", "\n                </tbody>\n              </table>\n            </editable-table-display>\n          </simple-popover>\n        </div>\n        <loading-indicator\n          ?loading=\"", "\"\n          slot=\"col-3\"\n        ></loading-indicator>\n      </grid-plate>\n      <a11y-tabs full-width>\n        <a11y-tab icon=\"social:person\" label=\"Active student\">\n          <grid-plate layout=\"3-1\">\n            <div slot=\"col-1\">\n              ", "\n            </div>\n            <div slot=\"col-2\">\n              ", "\n            </div>\n          </grid-plate>\n        </a11y-tab>\n        <a11y-tab icon=\"assignment-ind\" label=\"Active Assessment\">\n          ", "\n        </a11y-tab>\n      </a11y-tabs>\n      <grid-plate layout=\"3-1\">\n        <div slot=\"col-1\">\n          <a11y-tabs\n            full-width\n            @a11y-tabs-active-changed=\"", "\"\n          >\n            <a11y-tab\n              icon=\"image:style\"\n              label=\"Assessment view\"\n              id=\"assessmentview\"\n            >\n              ", "\n            </a11y-tab>\n            <a11y-tab icon=\"assignment\" label=\"Student report\">\n              <div>\n                ", "\n              </div>\n            </a11y-tab>\n          </a11y-tabs>\n        </div>\n        <div slot=\"col-2\" class=\"tag-group\">\n          ", "\n        </div>\n      </grid-plate>\n    "])), this.changeStudent, 0 === this.activeStudent, this.changeStudent, this.database.roster.length - 1 === this.activeStudent, this.changeAssignment, 0 === this.activeAssignment, this.changeAssignment, this.database.assignments.length - 1 === this.activeAssignment, this.toggleGradeScale, this.t.gradingScale, this.hideGradeScale, this.accentColor, this.t.letterGrade, this.t.highRange, this.t.lowRange, this.database.gradeScale.map(function (scale) {
          return (0, _litElement.html)(_templateObject7_6615a610af6311ebbe560fe9c4727db1 || (_templateObject7_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                      <tr>\n                        <td>", "</td>\n                        <td>", "</td>\n                        <td>", "</td>\n                      </tr>\n                    "])), scale.letter, scale.highRange, scale.lowRange);
        }), this.loading, this.database.roster[this.activeStudent] && this.database.grades[this.activeStudent] ? (0, _litElement.html)(_templateObject8_6615a610af6311ebbe560fe9c4727db1 || (_templateObject8_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                    <grade-book-student-block\n                      .student=\"", "\"\n                    ></grade-book-student-block>\n                    <div class=\"active-student-grade-history\">\n                      ", "\n                    </div>\n                  "])), this.database.roster[this.activeStudent], this.activeStudentSubmissions.map(function (sRecord) {
          return (0, _litElement.html)(_templateObject9_6615a610af6311ebbe560fe9c4727db1 || (_templateObject9_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                          <button\n                            .value=\"", "\"\n                            @click=\"", "\"\n                            class=\"", "\"\n                          >\n                            <letter-grade\n                              mini\n                              label=\"", "\"\n                              .total=\"", "\"\n                              .score=\"", "\"\n                              .value=\"", "\"\n                            >\n                            </letter-grade>\n                          </button>\n                        "])), sRecord.assignmentIndex, _this4.studentLetterGradeHistoryClick, _this4.activeAssignment === sRecord.assignmentIndex ? "activeAssignment" : "", sRecord.assignmentName, sRecord.assignmentPoints, sRecord.studentScore, sRecord.assignmentIndex);
        })) : (0, _litElement.html)(_templateObject10_6615a610af6311ebbe560fe9c4727db1 || (_templateObject10_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))), this.database.roster.length && this.database.assignments.length ? (0, _litElement.html)(_templateObject11_6615a610af6311ebbe560fe9c4727db1 || (_templateObject11_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                    <h4>Active submission map</h4>\n                    <div class=\"mini-map\">\n                      ", "\n                    </div>\n                  "])), this.database.roster.map(function (s, i) {
          return (0, _litElement.html)(_templateObject12_6615a610af6311ebbe560fe9c4727db1 || (_templateObject12_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" <div data-pixel-row>\n                          ", "\n                        </div>"])), _this4.database.assignments.map(function (a, h) {
            return (0, _litElement.html)(_templateObject13_6615a610af6311ebbe560fe9c4727db1 || (_templateObject13_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                              <div\n                                data-pixel-col\n                                ?data-active-assignment-student-pixel=\"", "\"\n                              ></div>\n                            "])), _this4.activeStudent === i && _this4.activeAssignment === h);
          }));
        })) : (0, _litElement.html)(_templateObject14_6615a610af6311ebbe560fe9c4727db1 || (_templateObject14_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))), this.database.assignments.length && this.database.assignments[this.activeAssignment] ? (0, _litElement.html)(_templateObject15_6615a610af6311ebbe560fe9c4727db1 || (_templateObject15_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                <h3>\n                  ", "\n                </h3>\n                <ul>\n                  <li>\n                    Due date:\n                    <local-time\n                      datetime=\"", "\"\n                      month=\"short\"\n                      day=\"numeric\"\n                      year=\"numeric\"\n                      hour=\"numeric\"\n                      minute=\"numeric\"\n                      time-zone-name=\"short\"\n                    >\n                    </local-time>\n                  </li>\n                  <li>\n                    Date submitted:\n                    ", "\n                    minutes ago\n                  </li>\n                </ul>\n                <div>\n                  ", "\n                </div>\n              "])), this.database.assignments[this.activeAssignment].name, this.database.assignments[this.activeAssignment]._ISODueDate, Math.floor(this.database.assignments[this.activeAssignment]._ISODueDate - new Date("2021-03-01T10:20:08")) / 60e3, this.activeSubmission ? this.renderSubmission(this.activeSubmission) : (0, _litElement.html)(_templateObject16_6615a610af6311ebbe560fe9c4727db1 || (_templateObject16_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", ""])), this.t.noSubmission)) : (0, _litElement.html)(_templateObject17_6615a610af6311ebbe560fe9c4727db1 || (_templateObject17_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))), this.updateStudentReport, this.activeRubric[0] ? (0, _litElement.html)(_templateObject18_6615a610af6311ebbe560fe9c4727db1 || (_templateObject18_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                    <h3>", "</h3>\n                    ", "\n                    <div class=\"student-feedback-wrap\">\n                      <div class=\"student-feedback-text\">\n                        <h3 class=\"heading\">Overall feedback</h3>\n                        <simple-fields-field\n                          type=\"textarea\"\n                          data-criteria=\"overall\"\n                          data-rubric-written\n                        ></simple-fields-field>\n                      </div>\n                      <div class=\"student-feedback-score\">\n                        <simple-icon-button-lite\n                          icon=\"", "\"\n                          @click=\"", "\"\n                        ></simple-icon-button-lite>\n                        <simple-fields-field\n                          ?disabled=\"", "\"\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"totalpts\"\n                          maxlength=\"10\"\n                          @value-changed=\"", "\"\n                        ></simple-fields-field>\n                        /\n                        ", "\n                        pts\n                        <letter-grade\n                          style=\"margin:-8px 0 0 16px;\"\n                          total=\"", "\"\n                          score=\"", "\"\n                        ></letter-grade>\n                      </div>\n                    </div>\n                  "])), this.activeRubric[0].name, this.activeRubric.map(function (rubric) {
          return (0, _litElement.html)(_templateObject19_6615a610af6311ebbe560fe9c4727db1 || (_templateObject19_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                        <h4>", "</h4>\n                        <p>", "</p>\n                        <editable-table-display\n                          accent-color=\"", "\"\n                          bordered\n                          column-header\n                          condensed\n                          disable-responsive\n                          scroll\n                          striped\n                        >\n                          <table>\n                            <tbody>\n                              <tr>\n                                ", "\n                                <td>", " %</td>\n                              </tr>\n                              <tr>\n                                ", "\n                                <td>\n                                  <simple-fields-field\n                                    type=\"number\"\n                                    part=\"simple-fields-field\"\n                                    min=\"0\"\n                                    value=\"", "\"\n                                    max=\"", "\"\n                                    maxlength=\"10\"\n                                    data-rubric-score\n                                    data-criteria=\"", "\"\n                                  ></simple-fields-field>\n                                </td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </editable-table-display>\n                        <h4>Additional ", " feedback</h4>\n                        <simple-fields-field\n                          type=\"textarea\"\n                          data-rubric-written\n                          data-criteria=\"", "\"\n                        ></simple-fields-field>\n                      "])), rubric.criteria, rubric.description, _this4.accentColor, rubric.qualitative.map(function (cat) {
            return (0, _litElement.html)(_templateObject20_6615a610af6311ebbe560fe9c4727db1 || (_templateObject20_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" <td>", "</td> "])), cat);
          }), rubric.percentage, rubric.qualitative.map(function (cat) {
            return (0, _litElement.html)(_templateObject21_6615a610af6311ebbe560fe9c4727db1 || (_templateObject21_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                                    <td>\n                                      <simple-fields-tag-list\n                                        style=\"background-color:transparent;\"\n                                        data-criteria=\"", "\"\n                                        label=\"", "\"\n                                      ></simple-fields-tag-list>\n                                    </td>\n                                  "])), rubric.criteria, cat);
          }), _this4.database.settings.defaultScore === "max" ? Math.round(rubric.percentage / 100 * _this4.database.assignments[_this4.activeAssignment].points) : _this4.database.settings.defaultScore, Math.round(rubric.percentage / 100 * _this4.database.assignments[_this4.activeAssignment].points), rubric.criteria, rubric.criteria, rubric.criteria);
        }), this.scoreLock ? "lock" : "lock-open", this.toggleLock, this.scoreLock, this.totalScoreChangedEvent, this.database.assignments[this.activeAssignment].points, this.database.assignments[this.activeAssignment].points, this.totalScore) : (0, _litElement.html)(_templateObject22_6615a610af6311ebbe560fe9c4727db1 || (_templateObject22_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))), !this.loading ? (0, _litElement.html)(_templateObject23_6615a610af6311ebbe560fe9c4727db1 || (_templateObject23_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                      <h2>Student feedback report</h2>\n                      <div class=\"student-report-wrap\">\n                        <a11y-collapse-group\n                          heading-button\n                          expanded\n                          style=\"width:80%;\"\n                        >\n                          ", "\n                          <a11y-collapse class=\"student-feedback-text\">\n                            <div slot=\"heading\" class=\"heading\">\n                              ", "\n                            </div>\n                            <div slot=\"content\">\n                              <p>", "</p>\n                              <h3>Your total Score</h3>\n                              <div class=\"score-display\">\n                                ", " /\n                                ", "\n                                pts\n                              </div>\n                            </div>\n                          </a11y-collapse>\n                        </a11y-collapse-group>\n                        <letter-grade\n                          class=\"student-report-score\"\n                          show-scale\n                          total=\"", "\"\n                          score=\"", "\"\n                        ></letter-grade>\n                      </div>\n                    "])), this.database.rubrics.filter(function (item) {
          return item.shortName == _this4.database.assignments[_this4.activeAssignment].rubric;
        }).map(function (rubric) {
          return (0, _litElement.html)(_templateObject24_6615a610af6311ebbe560fe9c4727db1 || (_templateObject24_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                                <a11y-collapse class=\"student-feedback-text\">\n                                  <div slot=\"heading\" class=\"heading\">\n                                    ", "\n                                  </div>\n                                  <div slot=\"content\">\n                                    <div class=\"student-feedback-score-heading\">\n                                      <div>\n                                        ", "\n                                        /\n                                        ", "\n                                      </div>\n                                      <h3>Criteria details</h3>\n                                    </div>\n                                    <p>", "</p>\n                                    <h3>Your feedback</h3>\n                                    <ul>\n                                      ", "\n                                    </ul>\n                                    <h3>Additional Criteria feedback</h3>\n                                    <p>\n                                      ", "\n                                    </p>\n                                  </div>\n                                </a11y-collapse>\n                              "])), rubric.criteria, _this4.getCriteriaScore(rubric.criteria), Math.round(rubric.percentage / 100 * _this4.database.assignments[_this4.activeAssignment].points), rubric.description, rubric.qualitative.map(function (cat) {
            return (0, _litElement.html)(_templateObject25_6615a610af6311ebbe560fe9c4727db1 || (_templateObject25_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                                          <h4>", "</h4>\n                                          <ul>\n                                            ", "\n                                          </ul>\n                                        "])), cat, _this4.activeGrading[rubric.criteria] ? (0, _litElement.html)(_templateObject26_6615a610af6311ebbe560fe9c4727db1 || (_templateObject26_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["", ""])), _this4.activeGrading[rubric.criteria][cat].map(function (tag) {
              return (0, _litElement.html)(_templateObject27_6615a610af6311ebbe560fe9c4727db1 || (_templateObject27_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" <li>\n                                                    <span>", "</span\n                                                    >", "\n                                                    ", "\n                                                  </li>"])), tag.term, tag.description ? (0, _litElement.html)(_templateObject28_6615a610af6311ebbe560fe9c4727db1 || (_templateObject28_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral([" -\n                                                        ", ""])), tag.description) : "", tag.associatedMaterial ? (0, _litElement.html)(_templateObject29_6615a610af6311ebbe560fe9c4727db1 || (_templateObject29_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                                                          <ul>\n                                                            ", "\n                                                          </ul>\n                                                        "])), tag.associatedMaterial.map(function (material) {
                return (0, _litElement.html)(_templateObject30_6615a610af6311ebbe560fe9c4727db1 || (_templateObject30_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                                                                <li>\n                                                                  <a\n                                                                    href=\"", "\"\n                                                                    target=\"_blank\"\n                                                                    rel=\"noopener noreferrer\"\n                                                                    >", "</a\n                                                                  >\n                                                                </li>\n                                                              "])), material, material);
              })) : "");
            })) : "");
          }), _this4.getCriteriaFeedback(rubric.criteria));
        }), this.t.overallFeedback, this.getCriteriaFeedback("overall"), this.totalScore, this.database.assignments[this.activeAssignment].points, this.database.assignments[this.activeAssignment].points, this.totalScore) : (0, _litElement.html)(_templateObject31_6615a610af6311ebbe560fe9c4727db1 || (_templateObject31_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))), this.database.tags.categories.length > 0 ? (0, _litElement.html)(_templateObject32_6615a610af6311ebbe560fe9c4727db1 || (_templateObject32_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                <h4>Qualitative Rubric Tags</h4>\n                <a11y-collapse-group heading-button>\n                  ", "\n                </a11y-collapse-group>\n              "])), this.database.tags.categories.map(function (category, i) {
          return (0, _litElement.html)(_templateObject33_6615a610af6311ebbe560fe9c4727db1 || (_templateObject33_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n                      <a11y-collapse>\n                        <div slot=\"heading\">\n                          <simple-colors accent-color=\"", "\"\n                            ><span></span></simple-colors\n                          >", "\n                        </div>\n                        <div slot=\"content\">\n                          ", "\n                        </div>\n                      </a11y-collapse>\n                    "])), _this4.pickColor(i), category, _this4.database.tags.data.filter(function (item) {
            return item.category.includes(category);
          }).map(function (term) {
            return (0, _litElement.html)(_templateObject34_6615a610af6311ebbe560fe9c4727db1 || (_templateObject34_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<simple-tag\n                                  draggable=\"true\"\n                                  tabindex=\"0\"\n                                  @keypress=\"", "\"\n                                  @dragstart=\"", "\"\n                                  accent-color=\"", "\"\n                                  value=\"", "\"\n                                  .data=\"", "\"\n                                ></simple-tag>"])), _this4.keyDown, _this4.setDragTransfer, _this4.pickColor(i), term.term, term);
          }));
        })) : (0, _litElement.html)(_templateObject35_6615a610af6311ebbe560fe9c4727db1 || (_templateObject35_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["<loading-indicator></loading-indicator>"]))));
      }
      /**
       * Listen for value change coming from the fields in the active rubric
       * and update the overall point total to match
       */

    }, {
      key: "rubricCriteriaPointsChange",
      value: function rubricCriteriaPointsChange(e) {
        var _this5 = this;

        // detect score field change
        if (e.detail.getAttribute("data-rubric-score") != null) {
          clearTimeout(this.__debouce);
          this.__debouce = setTimeout(function () {
            if (!_this5.loading) {
              // @todo we need to store and recall these values
              _this5.updateTotalScore(); // this will defer to whatever the "grades" db value is


              _this5.totalScore = _this5.getCurrentScore(_this5.activeStudent, _this5.activeAssignment);
              _this5.shadowRoot.querySelector("#totalpts").value = _this5.totalScore;
            } // force locking the score if this changes as we're using the rubric
            // to modify things


            _this5.scoreLock = true;
          }, 10);
        }
      }
    }, {
      key: "updateTotalScore",
      value: function updateTotalScore() {
        var score = 0;
        var tables = this.shadowRoot.querySelectorAll("#assessmentview editable-table-display"); // add the scores up based on values of the pieces

        for (var i in Array.from(tables)) {
          if (tables[i].shadowRoot.querySelector("[data-rubric-score]").value) {
            score = score + parseInt(tables[i].shadowRoot.querySelector("simple-fields-field").value);
          }
        }

        this.totalScore = score;
        this.requestUpdate();
      }
    }, {
      key: "totalScoreChangedEvent",
      value: function totalScoreChangedEvent(e) {
        this.totalScore = e.detail.value;
        this.database.grades[this.activeStudent][this.database.assignments[this.activeAssignment].shortName] = this.totalScore;
        this.activeStudentSubmissions = [];
        this.activeStudentSubmissions = babelHelpers.toConsumableArray(this.getStudentSubmissions(this.activeStudent));
        this.requestUpdate();
      }
      /**
       * lock toggle
       */

    }, {
      key: "toggleLock",
      value: function toggleLock(e) {
        this.scoreLock = !this.scoreLock;
      }
      /**
       * update student report when that tab is activated
       */

    }, {
      key: "updateStudentReport",
      value: function updateStudentReport() {
        // force a repaint of the calculated values from the Assessment view
        this.requestUpdate();
      }
      /**
       * Return the criteria score, current value
       */

    }, {
      key: "getCriteriaScore",
      value: function getCriteriaScore(criteria) {
        var tables = this.shadowRoot.querySelectorAll("#assessmentview editable-table-display"); // add the scores up based on values of the pieces

        for (var i in Array.from(tables)) {
          if (tables[i].shadowRoot.querySelector("[data-rubric-score][data-criteria=\"".concat(criteria, "\"]"))) {
            return tables[i].shadowRoot.querySelector("[data-rubric-score][data-criteria=\"".concat(criteria, "\"]")).value;
          }
        }

        return 0;
      }
      /**
       * Return the criteria written feedback, current value
       */

    }, {
      key: "getCriteriaFeedback",
      value: function getCriteriaFeedback(criteria) {
        if (this.shadowRoot.querySelector("#assessmentview [data-rubric-written][data-criteria=\"".concat(criteria, "\"]"))) {
          return this.shadowRoot.querySelector("#assessmentview [data-rubric-written][data-criteria=\"".concat(criteria, "\"]")).value;
        }

        return "";
      }
      /**
       * A qualitative feedback field got a new value
       */

    }, {
      key: "qualitativeFeedbackUpdate",
      value: function qualitativeFeedbackUpdate(e) {
        // group grade report by criteria, then qualitative label, THEN the list of tags used
        if (!this.activeGrading[e.detail.getAttribute("data-criteria")]) {
          this.activeGrading[e.detail.getAttribute("data-criteria")] = {};
        }

        this.activeGrading[e.detail.getAttribute("data-criteria")][e.detail.label] = e.detail.tagList;
        this.requestUpdate();
      } // @todo add support for keyboard based assignment of tag to criteria

    }, {
      key: "keyDown",
      value: function keyDown(e) {
        if (e.key === "Enter") {}
      } // get color based on index in the object "colors" from SimpleColors
      // this allows us to use an index in a common way and obtain a color
      // so that our tags have a color association per category

    }, {
      key: "pickColor",
      value: function pickColor(val) {
        var colors = Object.keys(this.colors);

        while (val > colors.length) {
          val = val - colors.length;
        }

        return colors[val];
      } // ensure when we drop a tag onto the UI that it removes all the outlines
      // of fields that can have items dropped into them

    }, {
      key: "_handleDragDrop",
      value: function _handleDragDrop(e) {
        window.dispatchEvent(new CustomEvent("simple-tag-drop", {
          detail: {
            value: "drop"
          }
        }));
      } // set the drag transfer data

    }, {
      key: "setDragTransfer",
      value: function setDragTransfer(e) {
        window.dispatchEvent(new CustomEvent("simple-tag-dragstart", {
          detail: {
            value: e.target
          }
        }));
        var data = e.target.data; // have to add in color

        data.color = e.target.accentColor;
        e.dataTransfer.setData("text", JSON.stringify(data));
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(GradeBook), "properties", this)), {}, {
          hideGradeScale: {
            type: Boolean
          },
          disabled: {
            type: Boolean,
            reflect: true
          },
          loading: {
            type: Boolean,
            reflect: true
          },
          activeStudent: {
            type: Number,
            attribute: "active-student"
          },
          activeAssignment: {
            type: Number,
            attribute: "active-assignment"
          },
          totalScore: {
            type: Number
          },
          scoreLock: {
            type: Boolean
          },
          debug: {
            type: Boolean
          },
          sheet: {
            type: String
          },
          activeSubmission: {
            type: String,
            attribute: false
          },
          database: {
            type: Object,
            attribute: false
          },
          activeRubric: {
            type: Object,
            attribute: false
          },
          assessmentView: {
            type: Object,
            attribute: false
          },
          activeGrading: {
            type: Object,
            attribute: false
          },
          activeStudentSubmissions: {
            type: Array
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(GradeBook), "styles", this)), [(0, _litElement.css)(_templateObject36_6615a610af6311ebbe560fe9c4727db1 || (_templateObject36_6615a610af6311ebbe560fe9c4727db1 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        loading-indicator {\n          --loading-indicator-background-color: var(\n            --simple-colors-default-theme-accent-2,\n            grey\n          );\n          --loading-indicator-color: var(\n            --simple-colors-default-theme-accent-10,\n            black\n          );\n        }\n        grid-plate {\n          --hax-layout-container-transition: none;\n          --grid-plate-col-transition: none;\n          --grid-plate-item-margin: 8px;\n          --grid-plate-item-padding: 8px;\n        }\n        a11y-tabs {\n          --a11y-tabs-border-color: var(\n            --simple-colors-default-theme-accent-10,\n            black\n          );\n        }\n        a11y-collapse {\n          --a11y-collapse-border-color: var(\n            --simple-colors-default-theme-accent-10,\n            black\n          );\n        }\n        a11y-collapse:not([expanded]):hover {\n          background-color: var(--simple-colors-default-theme-accent-1, grey);\n        }\n        a11y-collapse div[slot=\"heading\"] {\n          font-size: 16px;\n          font-weight: normal;\n          cursor: pointer;\n          line-height: 34px;\n          display: flex;\n        }\n        a11y-collapse[expanded] div[slot=\"heading\"] {\n          font-weight: bold;\n        }\n        .active-student-grade-history {\n          display: flex;\n          width: 100%;\n        }\n        .active-student-grade-history letter-grade {\n          display: inline-flex;\n          margin: 2px;\n        }\n        .active-student-grade-history button {\n          opacity: 0.4;\n          background-color: transparent;\n          border: 0;\n          padding: 0;\n          margin: 0;\n        }\n        .active-student-grade-history button.activeAssignment {\n          opacity: 0.9;\n          background-color: yellow;\n        }\n        .active-student-grade-history button:focus,\n        .active-student-grade-history button:active,\n        .active-student-grade-history button:hover {\n          opacity: 1;\n          outline: 1px solid black;\n          outline-offset: 2px;\n        }\n        simple-fields-tag-list.drag-focus {\n          background-color: #dddddd;\n        }\n        simple-colors[accent-color] {\n          display: inline-flex;\n          width: 24px;\n          height: 24px;\n          margin: 4px 6px 0px 0px;\n        }\n        simple-colors[accent-color] span {\n          display: inline-flex;\n          width: 24px;\n          height: 24px;\n          background-color: var(\n            --simple-colors-default-theme-accent-3,\n            #eeeeee\n          );\n        }\n        simple-fields-field[type=\"textarea\"] {\n          --simple-fields-font-size: 20px;\n        }\n        simple-fields-field[type=\"number\"] {\n          --simple-fields-font-size: 40px;\n          line-height: 40px;\n        }\n\n        .student-feedback-score-heading {\n          display: flex;\n          font-size: 28px;\n          font-weight: bold;\n          line-height: 28px;\n          padding: 8px;\n        }\n        .student-feedback-score-heading h3 {\n          margin: 0 0 0 8px;\n          padding: 0px;\n        }\n\n        #totalpts {\n          width: 84px;\n          margin: 0px 12px;\n        }\n        .mini-map {\n          max-height: 150px;\n          max-width: 150px;\n          overflow: auto;\n        }\n        .mini-map div[data-pixel-row] {\n          height: 5px;\n        }\n        .mini-map div[data-pixel-col] {\n          background-color: yellow;\n          float: left;\n          width: 5px;\n          height: 5px;\n        }\n        .mini-map div[data-active-assignment-student-pixel] {\n          background-color: blue;\n        }\n        .student-feedback-wrap {\n          display: flex;\n        }\n        .student-feedback-wrap .student-feedback-text {\n          width: 80%;\n          margin: 0;\n        }\n        .student-feedback-wrap .student-feedback-text div.heading {\n          padding: 20px;\n        }\n        .student-feedback-wrap .student-feedback-score {\n          font-size: 40px;\n          line-height: 68px;\n          padding: 34px 16px;\n          display: flex;\n          width: 50%;\n        }\n        simple-tag {\n          margin: 2px;\n        }\n        simple-tag:focus,\n        simple-tag:hover {\n          --simple-fields-fieldset-border-color: var(\n            --simple-colors-default-theme-accent-10,\n            #eeeeee\n          );\n        }\n        .active-submission {\n          max-height: 400px;\n          width: 60%;\n          overflow: auto;\n          margin: 0 auto;\n        }\n        .active-submission iframe {\n          height: 400px;\n          width: 60%;\n        }\n        .tag-group {\n          position: sticky;\n          top: 0;\n        }\n        .student-report-wrap {\n          display: flex;\n          justify-content: space-evenly;\n        }\n        .student-report-score {\n          margin-top: -20px;\n        }\n        editable-table-display::part(td),\n        editable-table-display::part(th) {\n          text-align: center;\n          vertical-align: top;\n          max-width: 250px;\n        }\n        editable-table-display::part(simple-fields-field) {\n          --simple-fields-font-size: 32px;\n          --simple-fields-text-align: center;\n          background-color: transparent;\n          max-width: 100px;\n          padding: 0 0 28px 0;\n          margin: 0;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "grade-book";
      }
    }]);
    return GradeBook;
  }((0, _I18NMixin2.I18NMixin)(_simpleColors.SimpleColors));

  _exports.GradeBook = GradeBook;
  customElements.define(GradeBook.tag, GradeBook);
});